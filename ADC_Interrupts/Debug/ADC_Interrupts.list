
ADC_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020cc  080020cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020cc  080020cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020cc  080020cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080020e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080020e0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8fb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001abd  00000000  00000000  0002b930  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  0002dad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f29  00000000  00000000  0002e108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070ec  00000000  00000000  00043031  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fd46  00000000  00000000  0004a11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001acc  00000000  00000000  000b9ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002068 	.word	0x08002068

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002068 	.word	0x08002068

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc53 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fe14 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc6b 	bl	8000a72 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fc33 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f001 fdb0 	bl	8001df8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fab3 	bl	8000804 <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <HAL_ADC_Init+0x1a8>)
 800035c:	4013      	ands	r3, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <HAL_ADC_Start_IT+0x1a>
 800041a:	2302      	movs	r3, #2
 800041c:	e0a0      	b.n	8000560 <HAL_ADC_Start_IT+0x15c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 f99a 	bl	8000760 <ADC_Enable>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 808f 	bne.w	8000556 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a45      	ldr	r2, [pc, #276]	; (8000568 <HAL_ADC_Start_IT+0x164>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <HAL_ADC_Start_IT+0x5e>
 8000456:	4b45      	ldr	r3, [pc, #276]	; (800056c <HAL_ADC_Start_IT+0x168>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d115      	bne.n	800048e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d026      	beq.n	80004ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800048c:	e01d      	b.n	80004ca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a33      	ldr	r2, [pc, #204]	; (800056c <HAL_ADC_Start_IT+0x168>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d004      	beq.n	80004ae <HAL_ADC_Start_IT+0xaa>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <HAL_ADC_Start_IT+0x164>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10d      	bne.n	80004ca <HAL_ADC_Start_IT+0xc6>
 80004ae:	4b2f      	ldr	r3, [pc, #188]	; (800056c <HAL_ADC_Start_IT+0x168>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f023 0206 	bic.w	r2, r3, #6
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	e002      	b.n	80004ea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f06f 0202 	mvn.w	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	685a      	ldr	r2, [r3, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f042 0220 	orr.w	r2, r2, #32
 800050a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000516:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800051a:	d113      	bne.n	8000544 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_ADC_Start_IT+0x164>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_ADC_Start_IT+0x168>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800052e:	2b00      	cmp	r3, #0
 8000530:	d108      	bne.n	8000544 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	e00c      	b.n	800055e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	e003      	b.n	800055e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40012800 	.word	0x40012800
 800056c:	40012400 	.word	0x40012400

08000570 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000588:	2b01      	cmp	r3, #1
 800058a:	d101      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x20>
 800058c:	2302      	movs	r3, #2
 800058e:	e0dc      	b.n	800074a <HAL_ADC_ConfigChannel+0x1da>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b06      	cmp	r3, #6
 800059e:	d81c      	bhi.n	80005da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	3b05      	subs	r3, #5
 80005b2:	221f      	movs	r2, #31
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	4019      	ands	r1, r3
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	3b05      	subs	r3, #5
 80005cc:	fa00 f203 	lsl.w	r2, r0, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
 80005d8:	e03c      	b.n	8000654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2b0c      	cmp	r3, #12
 80005e0:	d81c      	bhi.n	800061c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	4613      	mov	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	3b23      	subs	r3, #35	; 0x23
 80005f4:	221f      	movs	r2, #31
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4019      	ands	r1, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	3b23      	subs	r3, #35	; 0x23
 800060e:	fa00 f203 	lsl.w	r2, r0, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	430a      	orrs	r2, r1
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
 800061a:	e01b      	b.n	8000654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	3b41      	subs	r3, #65	; 0x41
 800062e:	221f      	movs	r2, #31
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	43db      	mvns	r3, r3
 8000636:	4019      	ands	r1, r3
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	3b41      	subs	r3, #65	; 0x41
 8000648:	fa00 f203 	lsl.w	r2, r0, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	430a      	orrs	r2, r1
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d91c      	bls.n	8000696 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68d9      	ldr	r1, [r3, #12]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	3b1e      	subs	r3, #30
 800066e:	2207      	movs	r2, #7
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	4019      	ands	r1, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	6898      	ldr	r0, [r3, #8]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	3b1e      	subs	r3, #30
 8000688:	fa00 f203 	lsl.w	r2, r0, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	430a      	orrs	r2, r1
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	e019      	b.n	80006ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6919      	ldr	r1, [r3, #16]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	2207      	movs	r2, #7
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4019      	ands	r1, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6898      	ldr	r0, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	fa00 f203 	lsl.w	r2, r0, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b10      	cmp	r3, #16
 80006d0:	d003      	beq.n	80006da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006d6:	2b11      	cmp	r3, #17
 80006d8:	d132      	bne.n	8000740 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <HAL_ADC_ConfigChannel+0x1e4>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d125      	bne.n	8000730 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d126      	bne.n	8000740 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000700:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b10      	cmp	r3, #16
 8000708:	d11a      	bne.n	8000740 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_ADC_ConfigChannel+0x1e8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <HAL_ADC_ConfigChannel+0x1ec>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	0c9a      	lsrs	r2, r3, #18
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000720:	e002      	b.n	8000728 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	3b01      	subs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <HAL_ADC_ConfigChannel+0x1b2>
 800072e:	e007      	b.n	8000740 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	f043 0220 	orr.w	r2, r3, #32
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40012400 	.word	0x40012400
 8000758:	20000008 	.word	0x20000008
 800075c:	431bde83 	.word	0x431bde83

08000760 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b01      	cmp	r3, #1
 800077c:	d039      	beq.n	80007f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <ADC_Enable+0x9c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <ADC_Enable+0xa0>)
 8000794:	fba2 2303 	umull	r2, r3, r2, r3
 8000798:	0c9b      	lsrs	r3, r3, #18
 800079a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800079c:	e002      	b.n	80007a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f9      	bne.n	800079e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80007aa:	f7ff fd27 	bl	80001fc <HAL_GetTick>
 80007ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80007b0:	e018      	b.n	80007e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80007b2:	f7ff fd23 	bl	80001fc <HAL_GetTick>
 80007b6:	4602      	mov	r2, r0
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d911      	bls.n	80007e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c4:	f043 0210 	orr.w	r2, r3, #16
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d0:	f043 0201 	orr.w	r2, r3, #1
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e007      	b.n	80007f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d1df      	bne.n	80007b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008
 8000800:	431bde83 	.word	0x431bde83

08000804 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b01      	cmp	r3, #1
 800081c:	d127      	bne.n	800086e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f022 0201 	bic.w	r2, r2, #1
 800082c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800082e:	f7ff fce5 	bl	80001fc <HAL_GetTick>
 8000832:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000834:	e014      	b.n	8000860 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000836:	f7ff fce1 	bl	80001fc <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d90d      	bls.n	8000860 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	f043 0210 	orr.w	r2, r3, #16
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000854:	f043 0201 	orr.w	r2, r3, #1
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e007      	b.n	8000870 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b01      	cmp	r3, #1
 800086c:	d0e3      	beq.n	8000836 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <NVIC_EnableIRQ+0x2c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100

0800090c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	da0b      	bge.n	8000938 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <NVIC_SetPriority+0x4c>)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 030f 	and.w	r3, r3, #15
 800092c:	3b04      	subs	r3, #4
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000936:	e009      	b.n	800094c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <NVIC_SetPriority+0x50>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	e000e100 	.word	0xe000e100

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff90 	bl	800090c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff31 	bl	8000878 <NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff46 	bl	80008c0 <NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff39 	bl	80008dc <NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa2 	bl	80009c4 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
 8000aae:	e127      	b.n	8000d00 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f040 8116 	bne.w	8000cfa <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d034      	beq.n	8000b40 <HAL_GPIO_Init+0xb4>
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d80d      	bhi.n	8000af6 <HAL_GPIO_Init+0x6a>
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d02b      	beq.n	8000b36 <HAL_GPIO_Init+0xaa>
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d804      	bhi.n	8000aec <HAL_GPIO_Init+0x60>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d031      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d01c      	beq.n	8000b24 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e048      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d043      	beq.n	8000b78 <HAL_GPIO_Init+0xec>
 8000af0:	2b11      	cmp	r3, #17
 8000af2:	d01b      	beq.n	8000b2c <HAL_GPIO_Init+0xa0>
          break;
 8000af4:	e043      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000af6:	4a87      	ldr	r2, [pc, #540]	; (8000d14 <HAL_GPIO_Init+0x288>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d026      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
 8000afc:	4a85      	ldr	r2, [pc, #532]	; (8000d14 <HAL_GPIO_Init+0x288>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d806      	bhi.n	8000b10 <HAL_GPIO_Init+0x84>
 8000b02:	4a85      	ldr	r2, [pc, #532]	; (8000d18 <HAL_GPIO_Init+0x28c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d020      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
 8000b08:	4a84      	ldr	r2, [pc, #528]	; (8000d1c <HAL_GPIO_Init+0x290>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01d      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
          break;
 8000b0e:	e036      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000b10:	4a83      	ldr	r2, [pc, #524]	; (8000d20 <HAL_GPIO_Init+0x294>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d019      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
 8000b16:	4a83      	ldr	r2, [pc, #524]	; (8000d24 <HAL_GPIO_Init+0x298>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d016      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
 8000b1c:	4a82      	ldr	r2, [pc, #520]	; (8000d28 <HAL_GPIO_Init+0x29c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xbe>
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e028      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e023      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01e      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e019      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e012      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e008      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e002      	b.n	8000b7e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	2bff      	cmp	r3, #255	; 0xff
 8000b82:	d801      	bhi.n	8000b88 <HAL_GPIO_Init+0xfc>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	e001      	b.n	8000b8c <HAL_GPIO_Init+0x100>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	2bff      	cmp	r3, #255	; 0xff
 8000b92:	d802      	bhi.n	8000b9a <HAL_GPIO_Init+0x10e>
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_Init+0x114>
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	6a39      	ldr	r1, [r7, #32]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8096 	beq.w	8000cfa <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bce:	4b57      	ldr	r3, [pc, #348]	; (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a56      	ldr	r2, [pc, #344]	; (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000be6:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	4013      	ands	r3, r2
 8000c08:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a49      	ldr	r2, [pc, #292]	; (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0x1ae>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d00d      	beq.n	8000c36 <HAL_GPIO_Init+0x1aa>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a47      	ldr	r2, [pc, #284]	; (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d007      	beq.n	8000c32 <HAL_GPIO_Init+0x1a6>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <HAL_GPIO_Init+0x2b4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_GPIO_Init+0x1a2>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x1b0>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e004      	b.n	8000c3c <HAL_GPIO_Init+0x1b0>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e002      	b.n	8000c3c <HAL_GPIO_Init+0x1b0>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x1b0>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3e:	f002 0203 	and.w	r2, r2, #3
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	4093      	lsls	r3, r2
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000c4c:	4938      	ldr	r1, [pc, #224]	; (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4936      	ldr	r1, [pc, #216]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4931      	ldr	r1, [pc, #196]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d006      	beq.n	8000c9c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	492c      	ldr	r1, [pc, #176]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	4927      	ldr	r1, [pc, #156]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	4922      	ldr	r1, [pc, #136]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	608b      	str	r3, [r1, #8]
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	491d      	ldr	r1, [pc, #116]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	4918      	ldr	r1, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60cb      	str	r3, [r1, #12]
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4913      	ldr	r1, [pc, #76]	; (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	f67f aed4 	bls.w	8000ab0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000d08:	bf00      	nop
 8000d0a:	372c      	adds	r7, #44	; 0x2c
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10110000 	.word	0x10110000
 8000d1c:	10120000 	.word	0x10120000
 8000d20:	10310000 	.word	0x10310000
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10220000 	.word	0x10220000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 8087 	beq.w	8000e70 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d62:	4b92      	ldr	r3, [pc, #584]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d00c      	beq.n	8000d88 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6e:	4b8f      	ldr	r3, [pc, #572]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d112      	bne.n	8000da0 <HAL_RCC_OscConfig+0x58>
 8000d7a:	4b8c      	ldr	r3, [pc, #560]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d10b      	bne.n	8000da0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	4b88      	ldr	r3, [pc, #544]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d06c      	beq.n	8000e6e <HAL_RCC_OscConfig+0x126>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d168      	bne.n	8000e6e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e22d      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d106      	bne.n	8000db8 <HAL_RCC_OscConfig+0x70>
 8000daa:	4b80      	ldr	r3, [pc, #512]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a7f      	ldr	r2, [pc, #508]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e02e      	b.n	8000e16 <HAL_RCC_OscConfig+0xce>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10c      	bne.n	8000dda <HAL_RCC_OscConfig+0x92>
 8000dc0:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a79      	ldr	r2, [pc, #484]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b77      	ldr	r3, [pc, #476]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a76      	ldr	r2, [pc, #472]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e01d      	b.n	8000e16 <HAL_RCC_OscConfig+0xce>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0xb6>
 8000de4:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a70      	ldr	r2, [pc, #448]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b6e      	ldr	r3, [pc, #440]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a6d      	ldr	r2, [pc, #436]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0xce>
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6a      	ldr	r2, [pc, #424]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b68      	ldr	r3, [pc, #416]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a67      	ldr	r2, [pc, #412]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d013      	beq.n	8000e46 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1e:	f7ff f9ed 	bl	80001fc <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e26:	f7ff f9e9 	bl	80001fc <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e1e1      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e38:	4b5c      	ldr	r3, [pc, #368]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0xde>
 8000e44:	e014      	b.n	8000e70 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff f9d9 	bl	80001fc <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4e:	f7ff f9d5 	bl	80001fc <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e1cd      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e60:	4b52      	ldr	r3, [pc, #328]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1f0      	bne.n	8000e4e <HAL_RCC_OscConfig+0x106>
 8000e6c:	e000      	b.n	8000e70 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d063      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00b      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e88:	4b48      	ldr	r3, [pc, #288]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d11c      	bne.n	8000ece <HAL_RCC_OscConfig+0x186>
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d116      	bne.n	8000ece <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea0:	4b42      	ldr	r3, [pc, #264]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x170>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d001      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e1a1      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4939      	ldr	r1, [pc, #228]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ecc:	e03a      	b.n	8000f44 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d020      	beq.n	8000f18 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_RCC_OscConfig+0x268>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff f98e 	bl	80001fc <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee4:	f7ff f98a 	bl	80001fc <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e182      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4926      	ldr	r1, [pc, #152]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
 8000f16:	e015      	b.n	8000f44 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_RCC_OscConfig+0x268>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f96d 	bl	80001fc <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff f969 	bl	80001fc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e161      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f0      	bne.n	8000f26 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d039      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d019      	beq.n	8000f8c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff f94d 	bl	80001fc <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f66:	f7ff f949 	bl	80001fc <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e141      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_RCC_OscConfig+0x264>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f0      	beq.n	8000f66 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fae3 	bl	8001550 <RCC_Delay>
 8000f8a:	e01b      	b.n	8000fc4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff f933 	bl	80001fc <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f98:	e00e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9a:	f7ff f92f 	bl	80001fc <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d907      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e127      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	42420000 	.word	0x42420000
 8000fb4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb8:	4b92      	ldr	r3, [pc, #584]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ea      	bne.n	8000f9a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80a6 	beq.w	800111e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd6:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10d      	bne.n	8000ffe <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a87      	ldr	r2, [pc, #540]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	2b00      	cmp	r3, #0
 8001008:	d118      	bne.n	800103c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100a:	4b7f      	ldr	r3, [pc, #508]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a7e      	ldr	r2, [pc, #504]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001016:	f7ff f8f1 	bl	80001fc <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff f8ed 	bl	80001fc <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e0e5      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d106      	bne.n	8001052 <HAL_RCC_OscConfig+0x30a>
 8001044:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a6e      	ldr	r2, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	e02d      	b.n	80010ae <HAL_RCC_OscConfig+0x366>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x32c>
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	e01c      	b.n	80010ae <HAL_RCC_OscConfig+0x366>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d10c      	bne.n	8001096 <HAL_RCC_OscConfig+0x34e>
 800107c:	4b61      	ldr	r3, [pc, #388]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a60      	ldr	r2, [pc, #384]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6213      	str	r3, [r2, #32]
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a5d      	ldr	r2, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6213      	str	r3, [r2, #32]
 8001094:	e00b      	b.n	80010ae <HAL_RCC_OscConfig+0x366>
 8001096:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a5a      	ldr	r2, [pc, #360]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b58      	ldr	r3, [pc, #352]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a57      	ldr	r2, [pc, #348]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d015      	beq.n	80010e2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff f8a1 	bl	80001fc <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff f89d 	bl	80001fc <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e093      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0ee      	beq.n	80010be <HAL_RCC_OscConfig+0x376>
 80010e0:	e014      	b.n	800110c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff f88b 	bl	80001fc <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e8:	e00a      	b.n	8001100 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff f887 	bl	80001fc <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e07d      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ee      	bne.n	80010ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d105      	bne.n	800111e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a3b      	ldr	r2, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d069      	beq.n	80011fa <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d061      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d146      	bne.n	80011c8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff f85c 	bl	80001fc <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001148:	f7ff f858 	bl	80001fc <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e050      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d108      	bne.n	8001182 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4921      	ldr	r1, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a19      	ldr	r1, [r3, #32]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	430b      	orrs	r3, r1
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff f82c 	bl	80001fc <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff f828 	bl	80001fc <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e020      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x460>
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff f815 	bl	80001fc <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff f811 	bl	80001fc <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e009      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x48e>
 80011f4:	e001      	b.n	80011fa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
 800120c:	42420060 	.word	0x42420060

08001210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800121e:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d910      	bls.n	800124e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 0207 	bic.w	r2, r3, #7
 8001234:	4978      	ldr	r1, [pc, #480]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800123c:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e0      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d020      	beq.n	800129c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 800126c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001270:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a66      	ldr	r2, [pc, #408]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001284:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001288:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128a:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4961      	ldr	r1, [pc, #388]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d06a      	beq.n	800137e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d115      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0a7      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d107      	bne.n	80012d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c8:	4b54      	ldr	r3, [pc, #336]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e09b      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e093      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 0203 	bic.w	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4949      	ldr	r1, [pc, #292]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fa:	f7fe ff7f 	bl	80001fc <HAL_GetTick>
 80012fe:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d112      	bne.n	800132e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130a:	f7fe ff77 	bl	80001fc <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e077      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b04      	cmp	r3, #4
 800132a:	d1ee      	bne.n	800130a <HAL_RCC_ClockConfig+0xfa>
 800132c:	e027      	b.n	800137e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d11d      	bne.n	8001372 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001336:	e00a      	b.n	800134e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7fe ff60 	bl	80001fc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e060      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d1ee      	bne.n	8001338 <HAL_RCC_ClockConfig+0x128>
 800135a:	e010      	b.n	800137e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7fe ff4e 	bl	80001fc <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e04e      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ee      	bne.n	800135c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d210      	bcs.n	80013ae <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 0207 	bic.w	r2, r3, #7
 8001394:	4920      	ldr	r1, [pc, #128]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_RCC_ClockConfig+0x208>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e030      	b.n	8001410 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4915      	ldr	r1, [pc, #84]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ec:	f000 f81c 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x20c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_RCC_ClockConfig+0x210>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	fa21 f303 	lsr.w	r3, r1, r3
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_RCC_ClockConfig+0x214>)
 8001406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001408:	2000      	movs	r0, #0
 800140a:	f7fe feb5 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40022000 	.word	0x40022000
 800141c:	40021000 	.word	0x40021000
 8001420:	080020b4 	.word	0x080020b4
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001430:	1d3c      	adds	r4, r7, #4
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x40>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x46>
 8001466:	e02d      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	e02d      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800147a:	4413      	add	r3, r2
 800147c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001480:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c5b      	lsrs	r3, r3, #17
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800149a:	4413      	add	r3, r2
 800149c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a6:	fb02 f203 	mul.w	r2, r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e004      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	623b      	str	r3, [r7, #32]
      break;
 80014c2:	e002      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c6:	623b      	str	r3, [r7, #32]
      break;
 80014c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ca:	6a3b      	ldr	r3, [r7, #32]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc90      	pop	{r4, r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	08002080 	.word	0x08002080
 80014dc:	08002090 	.word	0x08002090
 80014e0:	40021000 	.word	0x40021000
 80014e4:	007a1200 	.word	0x007a1200
 80014e8:	003d0900 	.word	0x003d0900

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_RCC_GetHCLKFreq+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001504:	f7ff fff2 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001508:	4601      	mov	r1, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	080020c4 	.word	0x080020c4

08001528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800152c:	f7ff ffde 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001530:	4601      	mov	r1, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0adb      	lsrs	r3, r3, #11
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_RCC_GetPCLK2Freq+0x24>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	080020c4 	.word	0x080020c4

08001550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <RCC_Delay+0x34>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <RCC_Delay+0x38>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0a5b      	lsrs	r3, r3, #9
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800156c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <RCC_Delay+0x1c>
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d07d      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	61d3      	str	r3, [r2, #28]
 80015c4:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d118      	bne.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a42      	ldr	r2, [pc, #264]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ec:	f7fe fe06 	bl	80001fc <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	e008      	b.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7fe fe02 	bl	80001fc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e06d      	b.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800161a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d02e      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d027      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001638:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001646:	4a29      	ldr	r2, [pc, #164]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d014      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7fe fdd1 	bl	80001fc <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7fe fdcd 	bl	80001fc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e036      	b.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4917      	ldr	r1, [pc, #92]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800168e:	4313      	orrs	r3, r2
 8001690:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800169e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	490b      	ldr	r1, [pc, #44]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4904      	ldr	r1, [pc, #16]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420440 	.word	0x42420440

080016f8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e03f      	b.n	800178a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fba6 	bl	8001e70 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800173a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f90b 	bl	8001958 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001760:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001770:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b088      	sub	sp, #32
 8001796:	af02      	add	r7, sp, #8
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	f040 8083 	bne.w	80018ba <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_UART_Transmit+0x2e>
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e07b      	b.n	80018bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_UART_Transmit+0x40>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e074      	b.n	80018bc <HAL_UART_Transmit+0x12a>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2221      	movs	r2, #33	; 0x21
 80017e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017e8:	f7fe fd08 	bl	80001fc <HAL_GetTick>
 80017ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	88fa      	ldrh	r2, [r7, #6]
 80017f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80017fa:	e042      	b.n	8001882 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001800:	b29b      	uxth	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d122      	bne.n	800185a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2200      	movs	r2, #0
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f850 	bl	80018c4 <UART_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e046      	b.n	80018bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001840:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3302      	adds	r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	e017      	b.n	8001882 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3301      	adds	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e013      	b.n	8001882 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f82d 	bl	80018c4 <UART_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e023      	b.n	80018bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1b7      	bne.n	80017fc <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f814 	bl	80018c4 <UART_WaitOnFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e00a      	b.n	80018bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80018d4:	e02c      	b.n	8001930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d028      	beq.n	8001930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80018e4:	f7fe fc8a 	bl	80001fc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d21d      	bcs.n	8001930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e00f      	b.n	8001950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4013      	ands	r3, r2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	429a      	cmp	r2, r3
 800194c:	d0c3      	beq.n	80018d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800199a:	f023 030c 	bic.w	r3, r3, #12
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6f      	ldr	r2, [pc, #444]	; (8001b80 <UART_SetConfig+0x228>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d16b      	bne.n	8001aa0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019c8:	f7ff fdae 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	441a      	add	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4a68      	ldr	r2, [pc, #416]	; (8001b84 <UART_SetConfig+0x22c>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	011c      	lsls	r4, r3, #4
 80019ec:	f7ff fd9c 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009a      	lsls	r2, r3, #2
 80019fa:	441a      	add	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a06:	f7ff fd8f 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009a      	lsls	r2, r3, #2
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <UART_SetConfig+0x22c>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2264      	movs	r2, #100	; 0x64
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	1aeb      	subs	r3, r5, r3
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	3332      	adds	r3, #50	; 0x32
 8001a34:	4a53      	ldr	r2, [pc, #332]	; (8001b84 <UART_SetConfig+0x22c>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a40:	441c      	add	r4, r3
 8001a42:	f7ff fd71 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009a      	lsls	r2, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a5c:	f7ff fd64 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	441a      	add	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4a43      	ldr	r2, [pc, #268]	; (8001b84 <UART_SetConfig+0x22c>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	2264      	movs	r2, #100	; 0x64
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	1aeb      	subs	r3, r5, r3
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	3332      	adds	r3, #50	; 0x32
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <UART_SetConfig+0x22c>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	095b      	lsrs	r3, r3, #5
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4422      	add	r2, r4
 8001a9c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001a9e:	e06a      	b.n	8001b76 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001aa0:	f7ff fd2e 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	009a      	lsls	r2, r3, #2
 8001aae:	441a      	add	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <UART_SetConfig+0x22c>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	011c      	lsls	r4, r3, #4
 8001ac4:	f7ff fd1c 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	441a      	add	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ade:	f7ff fd0f 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009a      	lsls	r2, r3, #2
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <UART_SetConfig+0x22c>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2264      	movs	r2, #100	; 0x64
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	1aeb      	subs	r3, r5, r3
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	3332      	adds	r3, #50	; 0x32
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <UART_SetConfig+0x22c>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b18:	441c      	add	r4, r3
 8001b1a:	f7ff fcf1 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b34:	f7ff fce4 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009a      	lsls	r2, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <UART_SetConfig+0x22c>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	2264      	movs	r2, #100	; 0x64
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	1aeb      	subs	r3, r5, r3
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	3332      	adds	r3, #50	; 0x32
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <UART_SetConfig+0x22c>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4422      	add	r2, r4
 8001b74:	609a      	str	r2, [r3, #8]
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013800 	.word	0x40013800
 8001b84:	51eb851f 	.word	0x51eb851f

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8c:	f7fe fade 	bl	800014c <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2012      	movs	r0, #18
 8001b96:	f7fe ff42 	bl	8000a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b9a:	2012      	movs	r0, #18
 8001b9c:	f7fe ff5b 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc1);
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <main+0x48>)
 8001ba2:	f7fe fc2f 	bl	8000404 <HAL_ADC_Start_IT>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 f819 	bl	8001bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001baa:	f000 f8d7 	bl	8001d5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bae:	f000 f86d 	bl	8001c8c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001bb2:	f000 f8a9 	bl	8001d08 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(2000);
 8001bb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bba:	f7fe fb29 	bl	8000210 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*) "While Loop\r\n", 12, HAL_MAX_DELAY);
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <main+0x4c>)
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <main+0x50>)
 8001bc8:	f7ff fde3 	bl	8001792 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001bcc:	e7f3      	b.n	8001bb6 <main+0x2e>
 8001bce:	bf00      	nop
 8001bd0:	2000002c 	.word	0x2000002c
 8001bd4:	08002094 	.word	0x08002094
 8001bd8:	2000005c 	.word	0x2000005c

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	2228      	movs	r2, #40	; 0x28
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fa34 	bl	8002058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2301      	movs	r3, #1
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c14:	2310      	movs	r3, #16
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001c20:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f88c 	bl	8000d48 <HAL_RCC_OscConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001c36:	f000 f8a7 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2102      	movs	r1, #2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fada 	bl	8001210 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c62:	f000 f891 	bl	8001d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c66:	2302      	movs	r3, #2
 8001c68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001c6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc8a 	bl	800158c <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 f883 	bl	8001d88 <Error_Handler>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3750      	adds	r7, #80	; 0x50
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <MX_ADC1_Init+0x78>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cca:	f7fe fac3 	bl	8000254 <HAL_ADC_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001cd4:	f000 f858 	bl	8001d88 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_ADC1_Init+0x74>)
 8001cea:	f7fe fc41 	bl	8000570 <HAL_ADC_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cf4:	f000 f848 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000002c 	.word	0x2000002c
 8001d04:	40012400 	.word	0x40012400

08001d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <MX_USART1_UART_Init+0x50>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	220c      	movs	r2, #12
 8001d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d40:	f7ff fcda 	bl	80016f8 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4a:	f000 f81d 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000005c 	.word	0x2000005c
 8001d58:	40013800 	.word	0x40013800

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_GPIO_Init+0x28>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <MX_GPIO_Init+0x28>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <MX_GPIO_Init+0x28>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_MspInit+0x5c>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_MspInit+0x5c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6193      	str	r3, [r2, #24]
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_MspInit+0x5c>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_MspInit+0x5c>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_MspInit+0x5c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_MspInit+0x5c>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_MspInit+0x60>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_MspInit+0x60>)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000

08001df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_ADC_MspInit+0x6c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d121      	bne.n	8001e5c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_ADC_MspInit+0x70>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4619      	mov	r1, r3
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <HAL_ADC_MspInit+0x74>)
 8001e58:	f7fe fe18 	bl	8000a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40012400 	.word	0x40012400
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_UART_MspInit+0x8c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d131      	bne.n	8001ef4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_UART_MspInit+0x90>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_UART_MspInit+0x94>)
 8001ed6:	f7fe fdd9 	bl	8000a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_UART_MspInit+0x94>)
 8001ef0:	f7fe fdcc 	bl	8000a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010800 	.word	0x40010800

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <HardFault_Handler+0x4>

08001f1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <MemManage_Handler+0x4>

08001f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <BusFault_Handler+0x4>

08001f26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <UsageFault_Handler+0x4>

08001f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f7fe f940 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <SystemInit+0x5c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <SystemInit+0x5c>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <SystemInit+0x5c>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4911      	ldr	r1, [pc, #68]	; (8001fb8 <SystemInit+0x5c>)
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <SystemInit+0x60>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <SystemInit+0x5c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <SystemInit+0x5c>)
 8001f7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <SystemInit+0x5c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SystemInit+0x5c>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <SystemInit+0x5c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <SystemInit+0x5c>)
 8001f9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SystemInit+0x5c>)
 8001fa2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fa6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SystemInit+0x64>)
 8001faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fae:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	f8ff0000 	.word	0xf8ff0000
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fc6:	e003      	b.n	8001fd0 <LoopCopyDataInit>

08001fc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fce:	3104      	adds	r1, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd8:	d3f6      	bcc.n	8001fc8 <CopyDataInit>
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fdc:	e002      	b.n	8001fe4 <LoopFillZerobss>

08001fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fe0:	f842 3b04 	str.w	r3, [r2], #4

08001fe4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe8:	d3f9      	bcc.n	8001fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fea:	f7ff ffb7 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f000 f80f 	bl	8002010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff fdc9 	bl	8001b88 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ff8:	080020d4 	.word	0x080020d4
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002000:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002004:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002008:	2000009c 	.word	0x2000009c

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <__libc_init_array>:
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	2500      	movs	r5, #0
 8002014:	4e0c      	ldr	r6, [pc, #48]	; (8002048 <__libc_init_array+0x38>)
 8002016:	4c0d      	ldr	r4, [pc, #52]	; (800204c <__libc_init_array+0x3c>)
 8002018:	1ba4      	subs	r4, r4, r6
 800201a:	10a4      	asrs	r4, r4, #2
 800201c:	42a5      	cmp	r5, r4
 800201e:	d109      	bne.n	8002034 <__libc_init_array+0x24>
 8002020:	f000 f822 	bl	8002068 <_init>
 8002024:	2500      	movs	r5, #0
 8002026:	4e0a      	ldr	r6, [pc, #40]	; (8002050 <__libc_init_array+0x40>)
 8002028:	4c0a      	ldr	r4, [pc, #40]	; (8002054 <__libc_init_array+0x44>)
 800202a:	1ba4      	subs	r4, r4, r6
 800202c:	10a4      	asrs	r4, r4, #2
 800202e:	42a5      	cmp	r5, r4
 8002030:	d105      	bne.n	800203e <__libc_init_array+0x2e>
 8002032:	bd70      	pop	{r4, r5, r6, pc}
 8002034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002038:	4798      	blx	r3
 800203a:	3501      	adds	r5, #1
 800203c:	e7ee      	b.n	800201c <__libc_init_array+0xc>
 800203e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002042:	4798      	blx	r3
 8002044:	3501      	adds	r5, #1
 8002046:	e7f2      	b.n	800202e <__libc_init_array+0x1e>
 8002048:	080020cc 	.word	0x080020cc
 800204c:	080020cc 	.word	0x080020cc
 8002050:	080020cc 	.word	0x080020cc
 8002054:	080020d0 	.word	0x080020d0

08002058 <memset>:
 8002058:	4603      	mov	r3, r0
 800205a:	4402      	add	r2, r0
 800205c:	4293      	cmp	r3, r2
 800205e:	d100      	bne.n	8002062 <memset+0xa>
 8002060:	4770      	bx	lr
 8002062:	f803 1b01 	strb.w	r1, [r3], #1
 8002066:	e7f9      	b.n	800205c <memset+0x4>

08002068 <_init>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr

08002074 <_fini>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	bf00      	nop
 8002078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207a:	bc08      	pop	{r3}
 800207c:	469e      	mov	lr, r3
 800207e:	4770      	bx	lr
