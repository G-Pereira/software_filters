
TwoInputTwoOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08006228  08006228  00016228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080065a0  080065a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a0  080065a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08006618  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08006618  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c3d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002286  00000000  00000000  00030cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164e5  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e9b  00000000  00000000  0004ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000778f5  00000000  00000000  000549b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc2ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  000cc328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006210 	.word	0x08006210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006210 	.word	0x08006210

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 fb11 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f002 fafa 	bl	8003070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb1b 	bl	80010e2 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 faf1 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000004 	.word	0x20000004
 8000b08:	20000098 	.word	0x20000098

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000098 	.word	0x20000098

08000b20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e0be      	b.n	8000cc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f002 fab8 	bl	80030d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f9ab 	bl	8000ec0 <ADC_ConversionStop_Disable>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8099 	bne.w	8000cae <HAL_ADC_Init+0x18e>
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8095 	bne.w	8000cae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b8c:	f023 0302 	bic.w	r3, r3, #2
 8000b90:	f043 0202 	orr.w	r2, r3, #2
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000ba0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000ba8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb8:	d003      	beq.n	8000bc2 <HAL_ADC_Init+0xa2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d102      	bne.n	8000bc8 <HAL_ADC_Init+0xa8>
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	e000      	b.n	8000bca <HAL_ADC_Init+0xaa>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d119      	bne.n	8000c0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	035a      	lsls	r2, r3, #13
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	e00b      	b.n	8000c0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f043 0220 	orr.w	r2, r3, #32
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	f043 0201 	orr.w	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_ADC_Init+0x1a8>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3c:	d003      	beq.n	8000c46 <HAL_ADC_Init+0x126>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d104      	bne.n	8000c50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	051b      	lsls	r3, r3, #20
 8000c4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_ADC_Init+0x1ac>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d10b      	bne.n	8000c8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f023 0303 	bic.w	r3, r3, #3
 8000c82:	f043 0201 	orr.w	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8a:	e018      	b.n	8000cbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f023 0312 	bic.w	r3, r3, #18
 8000c94:	f043 0210 	orr.w	r2, r3, #16
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cac:	e007      	b.n	8000cbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	f043 0210 	orr.w	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	ffe1f7fd 	.word	0xffe1f7fd
 8000ccc:	ff1f0efe 	.word	0xff1f0efe

08000cd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <HAL_ADC_ConfigChannel+0x20>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e0dc      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x1da>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d81c      	bhi.n	8000d3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	3b05      	subs	r3, #5
 8000d12:	221f      	movs	r2, #31
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4019      	ands	r1, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b05      	subs	r3, #5
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
 8000d38:	e03c      	b.n	8000db4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b0c      	cmp	r3, #12
 8000d40:	d81c      	bhi.n	8000d7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	3b23      	subs	r3, #35	; 0x23
 8000d54:	221f      	movs	r2, #31
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4019      	ands	r1, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3b23      	subs	r3, #35	; 0x23
 8000d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7a:	e01b      	b.n	8000db4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b41      	subs	r3, #65	; 0x41
 8000d8e:	221f      	movs	r2, #31
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3b41      	subs	r3, #65	; 0x41
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d91c      	bls.n	8000df6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68d9      	ldr	r1, [r3, #12]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b1e      	subs	r3, #30
 8000dce:	2207      	movs	r2, #7
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	3b1e      	subs	r3, #30
 8000de8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	e019      	b.n	8000e2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6919      	ldr	r1, [r3, #16]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	2207      	movs	r2, #7
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4019      	ands	r1, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6898      	ldr	r0, [r3, #8]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d003      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e36:	2b11      	cmp	r3, #17
 8000e38:	d132      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d125      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d126      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e60:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d11a      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_ADC_ConfigChannel+0x1ec>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	0c9a      	lsrs	r2, r3, #18
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x1b2>
 8000e8e:	e007      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f043 0220 	orr.w	r2, r3, #32
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40012400 	.word	0x40012400
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	431bde83 	.word	0x431bde83

08000ec0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d127      	bne.n	8000f2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eea:	f7ff fe0f 	bl	8000b0c <HAL_GetTick>
 8000eee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef0:	e014      	b.n	8000f1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ef2:	f7ff fe0b 	bl	8000b0c <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d90d      	bls.n	8000f1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f043 0210 	orr.w	r2, r3, #16
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e007      	b.n	8000f2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d0e3      	beq.n	8000ef2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da0b      	bge.n	8000fc4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <NVIC_SetPriority+0x4c>)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	3b04      	subs	r3, #4
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc2:	e009      	b.n	8000fd8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <NVIC_SetPriority+0x50>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff49 	bl	8000f34 <NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5e 	bl	8000f7c <NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff90 	bl	8000fec <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5f 	bl	8000f98 <NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
 800111e:	e127      	b.n	8001370 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001120:	2201      	movs	r2, #1
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8116 	bne.w	800136a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d034      	beq.n	80011b0 <HAL_GPIO_Init+0xb4>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d80d      	bhi.n	8001166 <HAL_GPIO_Init+0x6a>
 800114a:	2b02      	cmp	r3, #2
 800114c:	d02b      	beq.n	80011a6 <HAL_GPIO_Init+0xaa>
 800114e:	2b02      	cmp	r3, #2
 8001150:	d804      	bhi.n	800115c <HAL_GPIO_Init+0x60>
 8001152:	2b00      	cmp	r3, #0
 8001154:	d031      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
 8001156:	2b01      	cmp	r3, #1
 8001158:	d01c      	beq.n	8001194 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115a:	e048      	b.n	80011ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800115c:	2b03      	cmp	r3, #3
 800115e:	d043      	beq.n	80011e8 <HAL_GPIO_Init+0xec>
 8001160:	2b11      	cmp	r3, #17
 8001162:	d01b      	beq.n	800119c <HAL_GPIO_Init+0xa0>
          break;
 8001164:	e043      	b.n	80011ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001166:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_GPIO_Init+0x288>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d026      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
 800116c:	4a85      	ldr	r2, [pc, #532]	; (8001384 <HAL_GPIO_Init+0x288>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d806      	bhi.n	8001180 <HAL_GPIO_Init+0x84>
 8001172:	4a85      	ldr	r2, [pc, #532]	; (8001388 <HAL_GPIO_Init+0x28c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d020      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
 8001178:	4a84      	ldr	r2, [pc, #528]	; (800138c <HAL_GPIO_Init+0x290>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01d      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
          break;
 800117e:	e036      	b.n	80011ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001180:	4a83      	ldr	r2, [pc, #524]	; (8001390 <HAL_GPIO_Init+0x294>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
 8001186:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_GPIO_Init+0x298>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d016      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
 800118c:	4a82      	ldr	r2, [pc, #520]	; (8001398 <HAL_GPIO_Init+0x29c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0xbe>
          break;
 8001192:	e02c      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e028      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	3304      	adds	r3, #4
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e023      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	3308      	adds	r3, #8
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e01e      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	330c      	adds	r3, #12
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e019      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011c2:	2304      	movs	r3, #4
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e012      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2308      	movs	r3, #8
 80011d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	611a      	str	r2, [r3, #16]
          break;
 80011da:	e008      	b.n	80011ee <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011dc:	2308      	movs	r3, #8
 80011de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	615a      	str	r2, [r3, #20]
          break;
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d801      	bhi.n	80011f8 <HAL_GPIO_Init+0xfc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	e001      	b.n	80011fc <HAL_GPIO_Init+0x100>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d802      	bhi.n	800120a <HAL_GPIO_Init+0x10e>
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x114>
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	3b08      	subs	r3, #8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	210f      	movs	r1, #15
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	431a      	orrs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8096 	beq.w	800136a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <HAL_GPIO_Init+0x2a0>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a56      	ldr	r2, [pc, #344]	; (800139c <HAL_GPIO_Init+0x2a0>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b54      	ldr	r3, [pc, #336]	; (800139c <HAL_GPIO_Init+0x2a0>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001256:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4013      	ands	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x1ae>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x1aa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x1a6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2b4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1a2>
 800129a:	2303      	movs	r3, #3
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x1b0>
 800129e:	2304      	movs	r3, #4
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x1b0>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x1b0>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x1b0>
 80012aa:	2300      	movs	r3, #0
 80012ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80012bc:	4938      	ldr	r1, [pc, #224]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4936      	ldr	r1, [pc, #216]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4931      	ldr	r1, [pc, #196]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	492c      	ldr	r1, [pc, #176]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	43db      	mvns	r3, r3
 8001314:	4927      	ldr	r1, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001316:	4013      	ands	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	4922      	ldr	r1, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	43db      	mvns	r3, r3
 800133c:	491d      	ldr	r1, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800133e:	4013      	ands	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	43db      	mvns	r3, r3
 8001364:	4913      	ldr	r1, [pc, #76]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001366:	4013      	ands	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	3301      	adds	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f aed4 	bls.w	8001120 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	372c      	adds	r7, #44	; 0x2c
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	10210000 	.word	0x10210000
 8001388:	10110000 	.word	0x10110000
 800138c:	10120000 	.word	0x10120000
 8001390:	10310000 	.word	0x10310000
 8001394:	10320000 	.word	0x10320000
 8001398:	10220000 	.word	0x10220000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8087 	beq.w	80014e0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013d2:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x58>
 80013ea:	4b8c      	ldr	r3, [pc, #560]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b88      	ldr	r3, [pc, #544]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d06c      	beq.n	80014de <HAL_RCC_OscConfig+0x126>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d168      	bne.n	80014de <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e22d      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x70>
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x264>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7f      	ldr	r2, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e02e      	b.n	8001486 <HAL_RCC_OscConfig+0xce>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <HAL_RCC_OscConfig+0x92>
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a79      	ldr	r2, [pc, #484]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b77      	ldr	r3, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x264>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a76      	ldr	r2, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e01d      	b.n	8001486 <HAL_RCC_OscConfig+0xce>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0xb6>
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a70      	ldr	r2, [pc, #448]	; (800161c <HAL_RCC_OscConfig+0x264>)
 800145a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6d      	ldr	r2, [pc, #436]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0xce>
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x264>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a67      	ldr	r2, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb3d 	bl	8000b0c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001496:	f7ff fb39 	bl	8000b0c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	; 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1e1      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0xde>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb29 	bl	8000b0c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff fb25 	bl	8000b0c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1cd      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d0:	4b52      	ldr	r3, [pc, #328]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x106>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d063      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ec:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d11c      	bne.n	800153e <HAL_RCC_OscConfig+0x186>
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001510:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x170>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e1a1      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x264>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4939      	ldr	r1, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153c:	e03a      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d020      	beq.n	8001588 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x268>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fade 	bl	8000b0c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fada 	bl	8000b0c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e182      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4926      	ldr	r1, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x264>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
 8001586:	e015      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x268>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fabd 	bl	8000b0c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fab9 	bl	8000b0c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e161      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d039      	beq.n	8001634 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d019      	beq.n	80015fc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fa9d 	bl	8000b0c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa99 	bl	8000b0c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e141      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_RCC_OscConfig+0x264>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fae3 	bl	8001bc0 <RCC_Delay>
 80015fa:	e01b      	b.n	8001634 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fa83 	bl	8000b0c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	e00e      	b.n	8001628 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fa7f 	bl	8000b0c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d907      	bls.n	8001628 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e127      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
 800161c:	40021000 	.word	0x40021000
 8001620:	42420000 	.word	0x42420000
 8001624:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ea      	bne.n	800160a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x4c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x4c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7e      	ldr	r2, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x4c0>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff fa41 	bl	8000b0c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff fa3d 	bl	8000b0c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0e5      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <HAL_RCC_OscConfig+0x4c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x30a>
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e02d      	b.n	800171e <HAL_RCC_OscConfig+0x366>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x32c>
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x366>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x34e>
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x366>
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f9f1 	bl	8000b0c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f9ed 	bl	8000b0c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e093      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x376>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f9db 	bl	8000b0c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f9d7 	bl	8000b0c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e07d      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d069      	beq.n	800186a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d061      	beq.n	8001866 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d146      	bne.n	8001838 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff f9ac 	bl	8000b0c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f9a8 	bl	8000b0c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e050      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017de:	d108      	bne.n	80017f2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4921      	ldr	r1, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a19      	ldr	r1, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	430b      	orrs	r3, r1
 8001804:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_RCC_OscConfig+0x4c4>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff f97c 	bl	8000b0c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f978 	bl	8000b0c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e020      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x460>
 8001836:	e018      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x4c4>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff f965 	bl	8000b0c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff f961 	bl	8000b0c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e009      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x4bc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x48e>
 8001864:	e001      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	42420060 	.word	0x42420060

08001880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800188e:	4b7e      	ldr	r3, [pc, #504]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d910      	bls.n	80018be <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 0207 	bic.w	r2, r3, #7
 80018a4:	4978      	ldr	r1, [pc, #480]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ac:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0e0      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d020      	beq.n	800190c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a6c      	ldr	r2, [pc, #432]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80018dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018e0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a66      	ldr	r2, [pc, #408]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80018f4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018f8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fa:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4961      	ldr	r1, [pc, #388]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d06a      	beq.n	80019ee <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d115      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0a7      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	4b54      	ldr	r3, [pc, #336]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e09b      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e093      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 0203 	bic.w	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4949      	ldr	r1, [pc, #292]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196a:	f7ff f8cf 	bl	8000b0c <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d112      	bne.n	800199e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197a:	f7ff f8c7 	bl	8000b0c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e077      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001990:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_ClockConfig+0xfa>
 800199c:	e027      	b.n	80019ee <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11d      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f8b0 	bl	8000b0c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e060      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d1ee      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x128>
 80019ca:	e010      	b.n	80019ee <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f89e 	bl	8000b0c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e04e      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d210      	bcs.n	8001a1e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 0207 	bic.w	r2, r3, #7
 8001a04:	4920      	ldr	r1, [pc, #128]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e030      	b.n	8001a80 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4915      	ldr	r1, [pc, #84]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5c:	f000 f81c 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a60:	4601      	mov	r1, r0
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_RCC_ClockConfig+0x210>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	fa21 f303 	lsr.w	r3, r1, r3
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_RCC_ClockConfig+0x214>)
 8001a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff f805 	bl	8000a88 <HAL_InitTick>
  
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08006270 	.word	0x08006270
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b490      	push	{r4, r7}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	1d3c      	adds	r4, r7, #4
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x46>
 8001ad6:	e02d      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b10:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e004      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b36:	623b      	str	r3, [r7, #32]
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc90      	pop	{r4, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08006228 	.word	0x08006228
 8001b4c:	08006238 	.word	0x08006238
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200
 8001b58:	003d0900 	.word	0x003d0900

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff2 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08006280 	.word	0x08006280

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	0adb      	lsrs	r3, r3, #11
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08006280 	.word	0x08006280

08001bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <RCC_Delay+0x34>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <RCC_Delay+0x38>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001bdc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	60fa      	str	r2, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <RCC_Delay+0x1c>
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d07d      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d118      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5c:	f7fe ff56 	bl	8000b0c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	e008      	b.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c64:	f7fe ff52 	bl	8000b0c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e06d      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02e      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d027      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb6:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff21 	bl	8000b0c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7fe ff1d 	bl	8000b0c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e036      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4917      	ldr	r1, [pc, #92]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	490b      	ldr	r1, [pc, #44]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4904      	ldr	r1, [pc, #16]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42420440 	.word	0x42420440

08001d68 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01d      	b.n	8001db6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 fa06 	bl	80031a0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 f8d0 	bl	8001f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e0b4      	b.n	8001f44 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	f200 809f 	bhi.w	8001f30 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	08001f31 	.word	0x08001f31
 8001e00:	08001f31 	.word	0x08001f31
 8001e04:	08001f31 	.word	0x08001f31
 8001e08:	08001e6d 	.word	0x08001e6d
 8001e0c:	08001f31 	.word	0x08001f31
 8001e10:	08001f31 	.word	0x08001f31
 8001e14:	08001f31 	.word	0x08001f31
 8001e18:	08001eaf 	.word	0x08001eaf
 8001e1c:	08001f31 	.word	0x08001f31
 8001e20:	08001f31 	.word	0x08001f31
 8001e24:	08001f31 	.word	0x08001f31
 8001e28:	08001eef 	.word	0x08001eef
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f8f0 	bl	8002018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6999      	ldr	r1, [r3, #24]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	619a      	str	r2, [r3, #24]
    }
    break;
 8001e6a:	e062      	b.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f93c 	bl	80020f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6999      	ldr	r1, [r3, #24]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	021a      	lsls	r2, r3, #8
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
    }
    break;
 8001eac:	e041      	b.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f98b 	bl	80021d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0208 	orr.w	r2, r2, #8
 8001ec8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0204 	bic.w	r2, r2, #4
 8001ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69d9      	ldr	r1, [r3, #28]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
    }
    break;
 8001eec:	e021      	b.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f9db 	bl	80022b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f08:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69d9      	ldr	r1, [r3, #28]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
    }
    break;
 8001f2e:	e000      	b.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001f30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	; (800200c <TIM_Base_SetConfig+0xc0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0x34>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0x34>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <TIM_Base_SetConfig+0xc4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x34>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a26      	ldr	r2, [pc, #152]	; (8002014 <TIM_Base_SetConfig+0xc8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <TIM_Base_SetConfig+0xc0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0x66>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0x66>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <TIM_Base_SetConfig+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0x66>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <TIM_Base_SetConfig+0xc8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fca:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <TIM_Base_SetConfig+0xc0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800

08002018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <TIM_OC1_SetConfig+0xd4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10c      	bne.n	800209a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 0308 	bic.w	r3, r3, #8
 8002086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <TIM_OC1_SetConfig+0xd4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d111      	bne.n	80020c6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f023 0210 	bic.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0320 	bic.w	r3, r3, #32
 8002146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <TIM_OC2_SetConfig+0xdc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d10d      	bne.n	8002178 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002176:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <TIM_OC2_SetConfig+0xdc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d113      	bne.n	80021a8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800218e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <TIM_OC3_SetConfig+0xdc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10d      	bne.n	8002256 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002254:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <TIM_OC3_SetConfig+0xdc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d113      	bne.n	8002286 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800226c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00

080022b0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ea:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002306:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <TIM_OC4_SetConfig+0xa4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d109      	bne.n	8002330 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40012c00 	.word	0x40012c00

08002358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800236c:	2302      	movs	r3, #2
 800236e:	e032      	b.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800238e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e03f      	b.n	8002472 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 ff1a 	bl	8003240 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002422:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f90b 	bl	8002640 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002448:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002458:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b088      	sub	sp, #32
 800247e:	af02      	add	r7, sp, #8
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b20      	cmp	r3, #32
 8002498:	f040 8083 	bne.w	80025a2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_UART_Transmit+0x2e>
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e07b      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Transmit+0x40>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e074      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	; 0x21
 80024cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fb1c 	bl	8000b0c <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80024e2:	e042      	b.n	800256a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	d122      	bne.n	8002542 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2200      	movs	r2, #0
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f850 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e046      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002528:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3302      	adds	r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	e017      	b.n	800256a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e013      	b.n	800256a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f82d 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e023      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60ba      	str	r2, [r7, #8]
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1b7      	bne.n	80024e4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	2140      	movs	r1, #64	; 0x40
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f814 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e00a      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
  }
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80025bc:	e02c      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d028      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x30>
 80025cc:	f7fe fa9e 	bl	8000b0c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d21d      	bcs.n	8002618 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e00f      	b.n	8002638 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	429a      	cmp	r2, r3
 8002634:	d0c3      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002682:	f023 030c 	bic.w	r3, r3, #12
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	430b      	orrs	r3, r1
 800268e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6f      	ldr	r2, [pc, #444]	; (8002868 <UART_SetConfig+0x228>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d16b      	bne.n	8002788 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026b0:	f7ff fa72 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4a68      	ldr	r2, [pc, #416]	; (800286c <UART_SetConfig+0x22c>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	011c      	lsls	r4, r3, #4
 80026d4:	f7ff fa60 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009a      	lsls	r2, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80026ee:	f7ff fa53 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <UART_SetConfig+0x22c>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2264      	movs	r2, #100	; 0x64
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	1aeb      	subs	r3, r5, r3
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	3332      	adds	r3, #50	; 0x32
 800271c:	4a53      	ldr	r2, [pc, #332]	; (800286c <UART_SetConfig+0x22c>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002728:	441c      	add	r4, r3
 800272a:	f7ff fa35 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 800272e:	4602      	mov	r2, r0
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009a      	lsls	r2, r3, #2
 8002738:	441a      	add	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	fbb2 f5f3 	udiv	r5, r2, r3
 8002744:	f7ff fa28 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002748:	4602      	mov	r2, r0
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4a43      	ldr	r2, [pc, #268]	; (800286c <UART_SetConfig+0x22c>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	2264      	movs	r2, #100	; 0x64
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	1aeb      	subs	r3, r5, r3
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	3332      	adds	r3, #50	; 0x32
 8002772:	4a3e      	ldr	r2, [pc, #248]	; (800286c <UART_SetConfig+0x22c>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4422      	add	r2, r4
 8002784:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002786:	e06a      	b.n	800285e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002788:	f7ff f9f2 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 800278c:	4602      	mov	r2, r0
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009a      	lsls	r2, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <UART_SetConfig+0x22c>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	011c      	lsls	r4, r3, #4
 80027ac:	f7ff f9e0 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80027c6:	f7ff f9d3 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	4a22      	ldr	r2, [pc, #136]	; (800286c <UART_SetConfig+0x22c>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	1aeb      	subs	r3, r5, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	3332      	adds	r3, #50	; 0x32
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <UART_SetConfig+0x22c>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	441c      	add	r4, r3
 8002802:	f7ff f9b5 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8002806:	4602      	mov	r2, r0
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fbb2 f5f3 	udiv	r5, r2, r3
 800281c:	f7ff f9a8 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8002820:	4602      	mov	r2, r0
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4a0d      	ldr	r2, [pc, #52]	; (800286c <UART_SetConfig+0x22c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	2264      	movs	r2, #100	; 0x64
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	1aeb      	subs	r3, r5, r3
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	3332      	adds	r3, #50	; 0x32
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <UART_SetConfig+0x22c>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4422      	add	r2, r4
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	bf00      	nop
 8002868:	40013800 	.word	0x40013800
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <integrate>:
	double prevIn;
	double result;

} Integrator;

double integrate(Integrator * integrator, double input) {
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	e9c7 2300 	strd	r2, r3, [r7]
	integrator->result = input * integrator->period + integrator->result;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002886:	f7fd fe27 	bl	80004d8 <__aeabi_dmul>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	4618      	mov	r0, r3
 8002890:	4621      	mov	r1, r4
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f103 0410 	add.w	r4, r3, #16
 8002898:	e9d4 3400 	ldrd	r3, r4, [r4]
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	f7fd fc64 	bl	800016c <__adddf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	460c      	mov	r4, r1
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	return integrator->result;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f103 0410 	add.w	r4, r3, #16
 80028b4:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	4621      	mov	r1, r4
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	0000      	movs	r0, r0
 80028c4:	0000      	movs	r0, r0
	...

080028c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80028ce:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028d0:	f7fe f8c4 	bl	8000a5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028d4:	f000 fa3e 	bl	8002d54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028d8:	f000 fb96 	bl	8003008 <MX_GPIO_Init>
	MX_ADC1_Init();
 80028dc:	f000 fa96 	bl	8002e0c <MX_ADC1_Init>
	MX_TIM4_Init();
 80028e0:	f000 fb10 	bl	8002f04 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 80028e4:	f000 fb66 	bl	8002fb4 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 80028e8:	f000 face 	bl	8002e88 <MX_ADC2_Init>
	/* USER CODE BEGIN WHILE */

	//HAL_ADC_Start_IT(&hadc2);
	//HAL_ADC_Start_IT(&hadc1);

	uint32_t iter = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	double in1, in2;
	in1 = in2 = 0;
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	f04f 0400 	mov.w	r4, #0
 80028fa:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80028fe:	e9c2 3400 	strd	r3, r4, [r2]
 8002902:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002906:	cb18      	ldmia	r3, {r3, r4}
 8002908:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800290c:	e9c2 3400 	strd	r3, r4, [r2]
	double pi = 3.1415926;
 8002910:	a4bf      	add	r4, pc, #764	; (adr r4, 8002c10 <main+0x348>)
 8002912:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002916:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800291a:	e9c2 3400 	strd	r3, r4, [r2]
	double sinPeriod = 0.5;
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	4cc3      	ldr	r4, [pc, #780]	; (8002c30 <main+0x368>)
 8002924:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8002928:	e9c2 3400 	strd	r3, r4, [r2]
	double period = 0.001052;
 800292c:	a4ba      	add	r4, pc, #744	; (adr r4, 8002c18 <main+0x350>)
 800292e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002932:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002936:	e9c2 3400 	strd	r3, r4, [r2]
	double R1 = 1000;
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	4cbd      	ldr	r4, [pc, #756]	; (8002c34 <main+0x36c>)
 8002940:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002944:	e9c2 3400 	strd	r3, r4, [r2]
	double R2 = 1000;
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	4cb9      	ldr	r4, [pc, #740]	; (8002c34 <main+0x36c>)
 800294e:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8002952:	e9c2 3400 	strd	r3, r4, [r2]
	double C = 0.0001;
 8002956:	a4b2      	add	r4, pc, #712	; (adr r4, 8002c20 <main+0x358>)
 8002958:	e9d4 3400 	ldrd	r3, r4, [r4]
 800295c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002960:	e9c2 3400 	strd	r3, r4, [r2]
	double L = 0.0002;
 8002964:	a4b0      	add	r4, pc, #704	; (adr r4, 8002c28 <main+0x360>)
 8002966:	e9d4 3400 	ldrd	r3, r4, [r4]
 800296a:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800296e:	e9c2 3400 	strd	r3, r4, [r2]

	Integrator intIn1, intIn2, intX1, intX2;

	intIn1.period = intIn2.period = intX1.period = intX2.period = period;
 8002972:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002976:	cb18      	ldmia	r3, {r3, r4}
 8002978:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800297c:	e9c2 3400 	strd	r3, r4, [r2]
 8002980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002984:	cb18      	ldmia	r3, {r3, r4}
 8002986:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800298a:	e9c2 3400 	strd	r3, r4, [r2]
 800298e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002992:	cb18      	ldmia	r3, {r3, r4}
 8002994:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002998:	e9c2 3400 	strd	r3, r4, [r2]
 800299c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029a0:	cb18      	ldmia	r3, {r3, r4}
 80029a2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80029a6:	e9c2 3400 	strd	r3, r4, [r2]
	intIn1.result = intIn2.result = intX1.result = intX2.result = 0;
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	f04f 0400 	mov.w	r4, #0
 80029b2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80029b6:	e9c2 3400 	strd	r3, r4, [r2]
 80029ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029be:	cb18      	ldmia	r3, {r3, r4}
 80029c0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80029c4:	e9c2 3400 	strd	r3, r4, [r2]
 80029c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80029cc:	cb18      	ldmia	r3, {r3, r4}
 80029ce:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80029d2:	e9c2 3400 	strd	r3, r4, [r2]
 80029d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029da:	cb18      	ldmia	r3, {r3, r4}
 80029dc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80029e0:	e9c2 3400 	strd	r3, r4, [r2]

	double X1 = 0;
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80029f0:	e9c2 3400 	strd	r3, r4, [r2]
	double X2 = 0;
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f04f 0400 	mov.w	r4, #0
 80029fc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8002a00:	e9c2 3400 	strd	r3, r4, [r2]
//			HAL_MAX_DELAY);

	while (1) {
		//Calculate inputs

		if (iter <= 47530) {
 8002a04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002a08:	f64b 12aa 	movw	r2, #47530	; 0xb9aa
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d8f9      	bhi.n	8002a04 <main+0x13c>

			in1 = 2048 + 2048 * sin((period * iter * 2 * pi) / sinPeriod);
 8002a10:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8002a14:	f7fd fce6 	bl	80003e4 <__aeabi_ui2d>
 8002a18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd fd5a 	bl	80004d8 <__aeabi_dmul>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	f7fd fb9c 	bl	800016c <__adddf3>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fd48 	bl	80004d8 <__aeabi_dmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fe68 	bl	800072c <__aeabi_ddiv>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	460c      	mov	r4, r1
 8002a60:	4618      	mov	r0, r3
 8002a62:	4621      	mov	r1, r4
 8002a64:	f002 fbe8 	bl	8005238 <sin>
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <main+0x370>)
 8002a6e:	f7fd fd33 	bl	80004d8 <__aeabi_dmul>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	4618      	mov	r0, r3
 8002a78:	4621      	mov	r1, r4
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	4b6e      	ldr	r3, [pc, #440]	; (8002c38 <main+0x370>)
 8002a80:	f7fd fb74 	bl	800016c <__adddf3>
 8002a84:	4603      	mov	r3, r0
 8002a86:	460c      	mov	r4, r1
 8002a88:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002a8c:	e9c2 3400 	strd	r3, r4, [r2]

			in2 = 2048
					+ 2048 * sin(((period * iter * 2 * pi) / sinPeriod) + pi);
 8002a90:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8002a94:	f7fd fca6 	bl	80003e4 <__aeabi_ui2d>
 8002a98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fd1a 	bl	80004d8 <__aeabi_dmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	f7fd fb5c 	bl	800016c <__adddf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4621      	mov	r1, r4
 8002abc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fd08 	bl	80004d8 <__aeabi_dmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fe28 	bl	800072c <__aeabi_ddiv>
 8002adc:	4603      	mov	r3, r0
 8002ade:	460c      	mov	r4, r1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fb3e 	bl	800016c <__adddf3>
 8002af0:	4603      	mov	r3, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	4618      	mov	r0, r3
 8002af6:	4621      	mov	r1, r4
 8002af8:	f002 fb9e 	bl	8005238 <sin>
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <main+0x370>)
 8002b02:	f7fd fce9 	bl	80004d8 <__aeabi_dmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4621      	mov	r1, r4
			in2 = 2048
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <main+0x370>)
 8002b14:	f7fd fb2a 	bl	800016c <__adddf3>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002b20:	e9c2 3400 	strd	r3, r4, [r2]

			in1Integrated = integrate(&intIn1, in1);
 8002b24:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8002b28:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	4608      	mov	r0, r1
 8002b32:	f7ff fe9d 	bl	8002870 <integrate>
 8002b36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b3a:	e9c3 0100 	strd	r0, r1, [r3]
			in2Integrated = integrate(&intIn2, in2 / R2);
 8002b3e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b4e:	f7fd fded 	bl	800072c <__aeabi_ddiv>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4608      	mov	r0, r1
 8002b60:	f7ff fe86 	bl	8002870 <integrate>
 8002b64:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002b68:	e9c3 0100 	strd	r0, r1, [r3]
			X1Integrated = integrate(&intX1, X1);
 8002b6c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002b70:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	f7ff fe79 	bl	8002870 <integrate>
 8002b7e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b82:	e9c3 0100 	strd	r0, r1, [r3]
			X2Integrated = integrate(&intX2, X2);
 8002b86:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002b8a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	4608      	mov	r0, r1
 8002b94:	f7ff fe6c 	bl	8002870 <integrate>
 8002b98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002b9c:	e9c3 0100 	strd	r0, r1, [r3]

			X2 = in2Integrated - (X2Integrated / R2) + X1Integrated;
 8002ba0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8002bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb0:	f7fd fdbc 	bl	800072c <__aeabi_ddiv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bc4:	f7fd fad0 	bl	8000168 <__aeabi_dsub>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	460c      	mov	r4, r1
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8002bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bd8:	f7fd fac8 	bl	800016c <__adddf3>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8002be4:	e9c2 3400 	strd	r3, r4, [r2]
			X2 /= C;
 8002be8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bf8:	f7fd fd98 	bl	800072c <__aeabi_ddiv>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8002c04:	e9c2 3400 	strd	r3, r4, [r2]

			X1 = in1Integrated - X2Integrated - X1Integrated * R1;
 8002c08:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c0c:	e016      	b.n	8002c3c <main+0x374>
 8002c0e:	bf00      	nop
 8002c10:	4d12d84a 	.word	0x4d12d84a
 8002c14:	400921fb 	.word	0x400921fb
 8002c18:	661ae70c 	.word	0x661ae70c
 8002c1c:	3f513c68 	.word	0x3f513c68
 8002c20:	eb1c432d 	.word	0xeb1c432d
 8002c24:	3f1a36e2 	.word	0x3f1a36e2
 8002c28:	eb1c432d 	.word	0xeb1c432d
 8002c2c:	3f2a36e2 	.word	0x3f2a36e2
 8002c30:	3fe00000 	.word	0x3fe00000
 8002c34:	408f4000 	.word	0x408f4000
 8002c38:	40a00000 	.word	0x40a00000
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c48:	f7fd fa8e 	bl	8000168 <__aeabi_dsub>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	4625      	mov	r5, r4
 8002c52:	461c      	mov	r4, r3
 8002c54:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8002c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c64:	f7fd fc38 	bl	80004d8 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fa7a 	bl	8000168 <__aeabi_dsub>
 8002c74:	4603      	mov	r3, r0
 8002c76:	460c      	mov	r4, r1
 8002c78:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8002c7c:	e9c2 3400 	strd	r3, r4, [r2]

			X1 /= L;
 8002c80:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c90:	f7fd fd4c 	bl	800072c <__aeabi_ddiv>
 8002c94:	4603      	mov	r3, r0
 8002c96:	460c      	mov	r4, r1
 8002c98:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8002c9c:	e9c2 3400 	strd	r3, r4, [r2]


			//X2 = ((intIn2.result * 0.001) - (intX2.result * 0.001) + intX1.result) / C;

			//Iout = (X1 * 200) + 1.65;
			Iout = X1;
 8002ca0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002ca4:	cb18      	ldmia	r3, {r3, r4}
 8002ca6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002caa:	e9c2 3400 	strd	r3, r4, [r2]
			Vout = X2;
 8002cae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002cb2:	cb18      	ldmia	r3, {r3, r4}
 8002cb4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8002cb8:	e9c2 3400 	strd	r3, r4, [r2]
			char valIN1[20];
			char valIN2[20];
			char valIout[20];
			char valVout[20];

			gcvt(in1, 8, valIN1);
 8002cbc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8002cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cca:	f000 fbb3 	bl	8003434 <gcvt>
			gcvt(in2, 8, valIN2);
 8002cce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cdc:	f000 fbaa 	bl	8003434 <gcvt>
			gcvt(Iout, 10, valIout);
 8002ce0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cee:	f000 fba1 	bl	8003434 <gcvt>
			gcvt(Vout, 10, valVout);
 8002cf2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8002cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d00:	f000 fb98 	bl	8003434 <gcvt>

			sprintf(str, "%lu, %9s, %9s, %11s, %11s\r\n", iter, valIN1, valIN2,
 8002d04:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002d08:	4638      	mov	r0, r7
 8002d0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8002d22:	490a      	ldr	r1, [pc, #40]	; (8002d4c <main+0x484>)
 8002d24:	f000 fbdc 	bl	80034e0 <siprintf>
					valIout, valVout);

			HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str),
 8002d28:	463b      	mov	r3, r7
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fa10 	bl	8000150 <strlen>
 8002d30:	4603      	mov	r3, r0
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4639      	mov	r1, r7
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <main+0x488>)
 8002d3c:	f7ff fb9d 	bl	800247a <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			iter++;
 8002d40:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002d44:	3301      	adds	r3, #1
 8002d46:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
		if (iter <= 47530) {
 8002d4a:	e65b      	b.n	8002a04 <main+0x13c>
 8002d4c:	0800623c 	.word	0x0800623c
 8002d50:	2000013c 	.word	0x2000013c

08002d54 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b094      	sub	sp, #80	; 0x50
 8002d58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5e:	2228      	movs	r2, #40	; 0x28
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fbb4 	bl	80034d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d92:	2301      	movs	r3, #1
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d96:	2302      	movs	r3, #2
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002da0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002da4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fb04 	bl	80013b8 <HAL_RCC_OscConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SystemClock_Config+0x66>
		Error_Handler();
 8002db6:	f000 f955 	bl	8003064 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002dba:	230f      	movs	r3, #15
 8002dbc:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dca:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fd52 	bl	8001880 <HAL_RCC_ClockConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <SystemClock_Config+0x92>
		Error_Handler();
 8002de2:	f000 f93f 	bl	8003064 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002de6:	2302      	movs	r3, #2
 8002de8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe ff02 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <SystemClock_Config+0xae>
		Error_Handler();
 8002dfe:	f000 f931 	bl	8003064 <Error_Handler>
	}
}
 8002e02:	bf00      	nop
 8002e04:	3750      	adds	r7, #80	; 0x50
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e1e:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <MX_ADC1_Init+0x78>)
 8002e20:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e3a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002e48:	480d      	ldr	r0, [pc, #52]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e4a:	f7fd fe69 	bl	8000b20 <HAL_ADC_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8002e54:	f000 f906 	bl	8003064 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_ADC1_Init+0x74>)
 8002e6a:	f7fd ff31 	bl	8000cd0 <HAL_ADC_ConfigChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8002e74:	f000 f8f6 	bl	8003064 <Error_Handler>

//  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(ADC1_IRQn);
	/* USER CODE END ADC1_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000010c 	.word	0x2000010c
 8002e84:	40012400 	.word	0x40012400

08002e88 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <MX_ADC2_Init+0x74>)
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <MX_ADC2_Init+0x78>)
 8002e9c:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <MX_ADC2_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <MX_ADC2_Init+0x74>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	60da      	str	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_ADC2_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_ADC2_Init+0x74>)
 8002eb2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002eb6:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MX_ADC2_Init+0x74>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <MX_ADC2_Init+0x74>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <MX_ADC2_Init+0x74>)
 8002ec6:	f7fd fe2b 	bl	8000b20 <HAL_ADC_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_ADC2_Init+0x4c>
		Error_Handler();
 8002ed0:	f000 f8c8 	bl	8003064 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_ADC2_Init+0x74>)
 8002ee6:	f7fd fef3 	bl	8000cd0 <HAL_ADC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_ADC2_Init+0x6c>
		Error_Handler();
 8002ef0:	f000 f8b8 	bl	8003064 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200000dc 	.word	0x200000dc
 8002f00:	40012800 	.word	0x40012800

08002f04 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f0a:	f107 0320 	add.w	r3, r7, #32
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	615a      	str	r2, [r3, #20]
 8002f24:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <MX_TIM4_Init+0xac>)
 8002f2a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002f4a:	4818      	ldr	r0, [pc, #96]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f4c:	f7fe ff0c 	bl	8001d68 <HAL_TIM_PWM_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM4_Init+0x56>
		Error_Handler();
 8002f56:	f000 f885 	bl	8003064 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002f62:	f107 0320 	add.w	r3, r7, #32
 8002f66:	4619      	mov	r1, r3
 8002f68:	4810      	ldr	r0, [pc, #64]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f6a:	f7ff f9f5 	bl	8002358 <HAL_TIMEx_MasterConfigSynchronization>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM4_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8002f74:	f000 f876 	bl	8003064 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f78:	2360      	movs	r3, #96	; 0x60
 8002f7a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4807      	ldr	r0, [pc, #28]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002f90:	f7fe ff16 	bl	8001dc0 <HAL_TIM_PWM_ConfigChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002f9a:	f000 f863 	bl	8003064 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002f9e:	4803      	ldr	r0, [pc, #12]	; (8002fac <MX_TIM4_Init+0xa8>)
 8002fa0:	f000 f91c 	bl	80031dc <HAL_TIM_MspPostInit>

}
 8002fa4:	bf00      	nop
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000009c 	.word	0x2000009c
 8002fb0:	40000800 	.word	0x40000800

08002fb4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <MX_USART2_UART_Init+0x50>)
 8002fbc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fec:	f7ff f9f8 	bl	80023e0 <HAL_UART_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002ff6:	f000 f835 	bl	8003064 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000013c 	.word	0x2000013c
 8003004:	40004400 	.word	0x40004400

08003008 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <MX_GPIO_Init+0x58>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <MX_GPIO_Init+0x58>)
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	6193      	str	r3, [r2, #24]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <MX_GPIO_Init+0x58>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <MX_GPIO_Init+0x58>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <MX_GPIO_Init+0x58>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6193      	str	r3, [r2, #24]
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <MX_GPIO_Init+0x58>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <MX_GPIO_Init+0x58>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <MX_GPIO_Init+0x58>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	6193      	str	r3, [r2, #24]
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <MX_GPIO_Init+0x58>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
	;

}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40021000 	.word	0x40021000

08003064 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_MspInit+0x5c>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_MspInit+0x5c>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6193      	str	r3, [r2, #24]
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_MspInit+0x5c>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_MspInit+0x5c>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <HAL_MspInit+0x5c>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_MspInit+0x5c>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_MspInit+0x60>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_MspInit+0x60>)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40010000 	.word	0x40010000

080030d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_ADC_MspInit+0xbc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d122      	bne.n	800313a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	6193      	str	r3, [r2, #24]
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4a20      	ldr	r2, [pc, #128]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003124:	2302      	movs	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003128:	2303      	movs	r3, #3
 800312a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	4619      	mov	r1, r3
 8003132:	4819      	ldr	r0, [pc, #100]	; (8003198 <HAL_ADC_MspInit+0xc4>)
 8003134:	f7fd ffe2 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003138:	e026      	b.n	8003188 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_ADC_MspInit+0xc8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d121      	bne.n	8003188 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_ADC_MspInit+0xc0>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003174:	2310      	movs	r3, #16
 8003176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003178:	2303      	movs	r3, #3
 800317a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317c:	f107 0318 	add.w	r3, r7, #24
 8003180:	4619      	mov	r1, r3
 8003182:	4805      	ldr	r0, [pc, #20]	; (8003198 <HAL_ADC_MspInit+0xc4>)
 8003184:	f7fd ffba 	bl	80010fc <HAL_GPIO_Init>
}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40012400 	.word	0x40012400
 8003194:	40021000 	.word	0x40021000
 8003198:	40010800 	.word	0x40010800
 800319c:	40012800 	.word	0x40012800

080031a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_TIM_PWM_MspInit+0x34>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10b      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_TIM_PWM_MspInit+0x38>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_TIM_PWM_MspInit+0x38>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_TIM_PWM_MspInit+0x38>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_TIM_MspPostInit+0x58>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d117      	bne.n	800322c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_TIM_MspPostInit+0x5c>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_TIM_MspPostInit+0x5c>)
 8003202:	f043 0308 	orr.w	r3, r3, #8
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_TIM_MspPostInit+0x5c>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2302      	movs	r3, #2
 800321e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	4619      	mov	r1, r3
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <HAL_TIM_MspPostInit+0x60>)
 8003228:	f7fd ff68 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40000800 	.word	0x40000800
 8003238:	40021000 	.word	0x40021000
 800323c:	40010c00 	.word	0x40010c00

08003240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0x88>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d12f      	bne.n	80032c0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_UART_MspInit+0x8c>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_UART_MspInit+0x8c>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_UART_MspInit+0x8c>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_UART_MspInit+0x8c>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <HAL_UART_MspInit+0x8c>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_UART_MspInit+0x8c>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003290:	2304      	movs	r3, #4
 8003292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	4619      	mov	r1, r3
 80032a2:	480b      	ldr	r0, [pc, #44]	; (80032d0 <HAL_UART_MspInit+0x90>)
 80032a4:	f7fd ff2a 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032a8:	2308      	movs	r3, #8
 80032aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	4619      	mov	r1, r3
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_UART_MspInit+0x90>)
 80032bc:	f7fd ff1e 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032c0:	bf00      	nop
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40010800 	.word	0x40010800

080032d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <HardFault_Handler+0x4>

080032e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ea:	e7fe      	b.n	80032ea <MemManage_Handler+0x4>

080032ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <BusFault_Handler+0x4>

080032f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f6:	e7fe      	b.n	80032f6 <UsageFault_Handler+0x4>

080032f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003320:	f7fd fbe2 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}

08003328 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <_sbrk+0x50>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <_sbrk+0x16>
		heap_end = &end;
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <_sbrk+0x50>)
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <_sbrk+0x54>)
 800333c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <_sbrk+0x50>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <_sbrk+0x50>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	466a      	mov	r2, sp
 800334e:	4293      	cmp	r3, r2
 8003350:	d907      	bls.n	8003362 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003352:	f000 f893 	bl	800347c <__errno>
 8003356:	4602      	mov	r2, r0
 8003358:	230c      	movs	r3, #12
 800335a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	e006      	b.n	8003370 <_sbrk+0x48>
	}

	heap_end += incr;
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <_sbrk+0x50>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	4a03      	ldr	r2, [pc, #12]	; (8003378 <_sbrk+0x50>)
 800336c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000008c 	.word	0x2000008c
 800337c:	20000180 	.word	0x20000180

08003380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <SystemInit+0x5c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <SystemInit+0x5c>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <SystemInit+0x5c>)
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4911      	ldr	r1, [pc, #68]	; (80033dc <SystemInit+0x5c>)
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <SystemInit+0x60>)
 8003398:	4013      	ands	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <SystemInit+0x5c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <SystemInit+0x5c>)
 80033a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <SystemInit+0x5c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <SystemInit+0x5c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <SystemInit+0x5c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a07      	ldr	r2, [pc, #28]	; (80033dc <SystemInit+0x5c>)
 80033be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <SystemInit+0x5c>)
 80033c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SystemInit+0x64>)
 80033ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40021000 	.word	0x40021000
 80033e0:	f8ff0000 	.word	0xf8ff0000
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033ea:	e003      	b.n	80033f4 <LoopCopyDataInit>

080033ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033f2:	3104      	adds	r1, #4

080033f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033f4:	480a      	ldr	r0, [pc, #40]	; (8003420 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80033f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033fc:	d3f6      	bcc.n	80033ec <CopyDataInit>
  ldr r2, =_sbss
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003400:	e002      	b.n	8003408 <LoopFillZerobss>

08003402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003404:	f842 3b04 	str.w	r3, [r2], #4

08003408 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800340a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800340c:	d3f9      	bcc.n	8003402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800340e:	f7ff ffb7 	bl	8003380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003412:	f000 f839 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003416:	f7ff fa57 	bl	80028c8 <main>
  bx lr
 800341a:	4770      	bx	lr
  ldr r3, =_sidata
 800341c:	080065a8 	.word	0x080065a8
  ldr r0, =_sdata
 8003420:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003424:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003428:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800342c:	20000180 	.word	0x20000180

08003430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC1_2_IRQHandler>
	...

08003434 <gcvt>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	461c      	mov	r4, r3
 8003438:	b085      	sub	sp, #20
 800343a:	2300      	movs	r3, #0
 800343c:	4615      	mov	r5, r2
 800343e:	2200      	movs	r2, #0
 8003440:	4606      	mov	r6, r0
 8003442:	460f      	mov	r7, r1
 8003444:	f7fd faba 	bl	80009bc <__aeabi_dcmplt>
 8003448:	4623      	mov	r3, r4
 800344a:	b118      	cbz	r0, 8003454 <gcvt+0x20>
 800344c:	222d      	movs	r2, #45	; 0x2d
 800344e:	3d01      	subs	r5, #1
 8003450:	f803 2b01 	strb.w	r2, [r3], #1
 8003454:	2267      	movs	r2, #103	; 0x67
 8003456:	2100      	movs	r1, #0
 8003458:	e9cd 5300 	strd	r5, r3, [sp]
 800345c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003460:	4905      	ldr	r1, [pc, #20]	; (8003478 <gcvt+0x44>)
 8003462:	4632      	mov	r2, r6
 8003464:	463b      	mov	r3, r7
 8003466:	6808      	ldr	r0, [r1, #0]
 8003468:	f000 f8ce 	bl	8003608 <_gcvt>
 800346c:	2800      	cmp	r0, #0
 800346e:	bf14      	ite	ne
 8003470:	4620      	movne	r0, r4
 8003472:	2000      	moveq	r0, #0
 8003474:	b005      	add	sp, #20
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003478:	2000000c 	.word	0x2000000c

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	2500      	movs	r5, #0
 800348c:	4e0c      	ldr	r6, [pc, #48]	; (80034c0 <__libc_init_array+0x38>)
 800348e:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 8003490:	1ba4      	subs	r4, r4, r6
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	42a5      	cmp	r5, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	f002 feba 	bl	8006210 <_init>
 800349c:	2500      	movs	r5, #0
 800349e:	4e0a      	ldr	r6, [pc, #40]	; (80034c8 <__libc_init_array+0x40>)
 80034a0:	4c0a      	ldr	r4, [pc, #40]	; (80034cc <__libc_init_array+0x44>)
 80034a2:	1ba4      	subs	r4, r4, r6
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	42a5      	cmp	r5, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b0:	4798      	blx	r3
 80034b2:	3501      	adds	r5, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ba:	4798      	blx	r3
 80034bc:	3501      	adds	r5, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	080065a0 	.word	0x080065a0
 80034c4:	080065a0 	.word	0x080065a0
 80034c8:	080065a0 	.word	0x080065a0
 80034cc:	080065a4 	.word	0x080065a4

080034d0 <memset>:
 80034d0:	4603      	mov	r3, r0
 80034d2:	4402      	add	r2, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <siprintf>:
 80034e0:	b40e      	push	{r1, r2, r3}
 80034e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034e6:	b500      	push	{lr}
 80034e8:	b09c      	sub	sp, #112	; 0x70
 80034ea:	ab1d      	add	r3, sp, #116	; 0x74
 80034ec:	9002      	str	r0, [sp, #8]
 80034ee:	9006      	str	r0, [sp, #24]
 80034f0:	9107      	str	r1, [sp, #28]
 80034f2:	9104      	str	r1, [sp, #16]
 80034f4:	4808      	ldr	r0, [pc, #32]	; (8003518 <siprintf+0x38>)
 80034f6:	4909      	ldr	r1, [pc, #36]	; (800351c <siprintf+0x3c>)
 80034f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	a902      	add	r1, sp, #8
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	f000 fd2e 	bl	8003f64 <_svfiprintf_r>
 8003508:	2200      	movs	r2, #0
 800350a:	9b02      	ldr	r3, [sp, #8]
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	b01c      	add	sp, #112	; 0x70
 8003510:	f85d eb04 	ldr.w	lr, [sp], #4
 8003514:	b003      	add	sp, #12
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c
 800351c:	ffff0208 	.word	0xffff0208

08003520 <print_e>:
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b08b      	sub	sp, #44	; 0x2c
 8003524:	460f      	mov	r7, r1
 8003526:	a908      	add	r1, sp, #32
 8003528:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800352a:	9104      	str	r1, [sp, #16]
 800352c:	a907      	add	r1, sp, #28
 800352e:	9103      	str	r1, [sp, #12]
 8003530:	a909      	add	r1, sp, #36	; 0x24
 8003532:	9102      	str	r1, [sp, #8]
 8003534:	1c61      	adds	r1, r4, #1
 8003536:	9101      	str	r1, [sp, #4]
 8003538:	2102      	movs	r1, #2
 800353a:	9100      	str	r1, [sp, #0]
 800353c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8003540:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003542:	f001 f835 	bl	80045b0 <_dtoa_r>
 8003546:	f242 730f 	movw	r3, #9999	; 0x270f
 800354a:	4601      	mov	r1, r0
 800354c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800354e:	4298      	cmp	r0, r3
 8003550:	d104      	bne.n	800355c <print_e+0x3c>
 8003552:	4638      	mov	r0, r7
 8003554:	f000 ff96 	bl	8004484 <strcpy>
 8003558:	b00b      	add	sp, #44	; 0x2c
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	780b      	ldrb	r3, [r1, #0]
 800355e:	703b      	strb	r3, [r7, #0]
 8003560:	2d00      	cmp	r5, #0
 8003562:	d142      	bne.n	80035ea <print_e+0xca>
 8003564:	2c00      	cmp	r4, #0
 8003566:	d140      	bne.n	80035ea <print_e+0xca>
 8003568:	1c7b      	adds	r3, r7, #1
 800356a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800356e:	b10a      	cbz	r2, 8003574 <print_e+0x54>
 8003570:	2c00      	cmp	r4, #0
 8003572:	dc3e      	bgt.n	80035f2 <print_e+0xd2>
 8003574:	2e67      	cmp	r6, #103	; 0x67
 8003576:	d043      	beq.n	8003600 <print_e+0xe0>
 8003578:	2e47      	cmp	r6, #71	; 0x47
 800357a:	d043      	beq.n	8003604 <print_e+0xe4>
 800357c:	461a      	mov	r2, r3
 800357e:	2730      	movs	r7, #48	; 0x30
 8003580:	191d      	adds	r5, r3, r4
 8003582:	1aa9      	subs	r1, r5, r2
 8003584:	2900      	cmp	r1, #0
 8003586:	dc38      	bgt.n	80035fa <print_e+0xda>
 8003588:	2c00      	cmp	r4, #0
 800358a:	bfa8      	it	ge
 800358c:	191b      	addge	r3, r3, r4
 800358e:	1e41      	subs	r1, r0, #1
 8003590:	2900      	cmp	r1, #0
 8003592:	9109      	str	r1, [sp, #36]	; 0x24
 8003594:	461a      	mov	r2, r3
 8003596:	bfb7      	itett	lt
 8003598:	212d      	movlt	r1, #45	; 0x2d
 800359a:	212b      	movge	r1, #43	; 0x2b
 800359c:	f1c0 0001 	rsblt	r0, r0, #1
 80035a0:	9009      	strlt	r0, [sp, #36]	; 0x24
 80035a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035a4:	f802 6b02 	strb.w	r6, [r2], #2
 80035a8:	bfb4      	ite	lt
 80035aa:	7059      	strblt	r1, [r3, #1]
 80035ac:	7059      	strbge	r1, [r3, #1]
 80035ae:	2863      	cmp	r0, #99	; 0x63
 80035b0:	dd0b      	ble.n	80035ca <print_e+0xaa>
 80035b2:	2164      	movs	r1, #100	; 0x64
 80035b4:	fb90 f1f1 	sdiv	r1, r0, r1
 80035b8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80035bc:	1cda      	adds	r2, r3, #3
 80035be:	709c      	strb	r4, [r3, #2]
 80035c0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80035c4:	fb03 0101 	mla	r1, r3, r1, r0
 80035c8:	9109      	str	r1, [sp, #36]	; 0x24
 80035ca:	230a      	movs	r3, #10
 80035cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035ce:	fb91 f3f3 	sdiv	r3, r1, r3
 80035d2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80035d6:	7010      	strb	r0, [r2, #0]
 80035d8:	f06f 0009 	mvn.w	r0, #9
 80035dc:	fb00 1303 	mla	r3, r0, r3, r1
 80035e0:	3330      	adds	r3, #48	; 0x30
 80035e2:	7053      	strb	r3, [r2, #1]
 80035e4:	2300      	movs	r3, #0
 80035e6:	7093      	strb	r3, [r2, #2]
 80035e8:	e7b6      	b.n	8003558 <print_e+0x38>
 80035ea:	222e      	movs	r2, #46	; 0x2e
 80035ec:	1cbb      	adds	r3, r7, #2
 80035ee:	707a      	strb	r2, [r7, #1]
 80035f0:	e7bb      	b.n	800356a <print_e+0x4a>
 80035f2:	f803 2b01 	strb.w	r2, [r3], #1
 80035f6:	3c01      	subs	r4, #1
 80035f8:	e7b7      	b.n	800356a <print_e+0x4a>
 80035fa:	f802 7b01 	strb.w	r7, [r2], #1
 80035fe:	e7c0      	b.n	8003582 <print_e+0x62>
 8003600:	2665      	movs	r6, #101	; 0x65
 8003602:	e7c4      	b.n	800358e <print_e+0x6e>
 8003604:	2645      	movs	r6, #69	; 0x45
 8003606:	e7c2      	b.n	800358e <print_e+0x6e>

08003608 <_gcvt>:
 8003608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800360c:	4617      	mov	r7, r2
 800360e:	461d      	mov	r5, r3
 8003610:	b08b      	sub	sp, #44	; 0x2c
 8003612:	4681      	mov	r9, r0
 8003614:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8003618:	2200      	movs	r2, #0
 800361a:	2300      	movs	r3, #0
 800361c:	4638      	mov	r0, r7
 800361e:	4629      	mov	r1, r5
 8003620:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8003624:	f7fd f9ca 	bl	80009bc <__aeabi_dcmplt>
 8003628:	b108      	cbz	r0, 800362e <_gcvt+0x26>
 800362a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800362e:	2200      	movs	r2, #0
 8003630:	2300      	movs	r3, #0
 8003632:	4638      	mov	r0, r7
 8003634:	4629      	mov	r1, r5
 8003636:	f7fd f9b7 	bl	80009a8 <__aeabi_dcmpeq>
 800363a:	b138      	cbz	r0, 800364c <_gcvt+0x44>
 800363c:	2330      	movs	r3, #48	; 0x30
 800363e:	7023      	strb	r3, [r4, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	7063      	strb	r3, [r4, #1]
 8003644:	4620      	mov	r0, r4
 8003646:	b00b      	add	sp, #44	; 0x2c
 8003648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800364c:	a352      	add	r3, pc, #328	; (adr r3, 8003798 <_gcvt+0x190>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	4638      	mov	r0, r7
 8003654:	4629      	mov	r1, r5
 8003656:	f7fd f9bb 	bl	80009d0 <__aeabi_dcmple>
 800365a:	b168      	cbz	r0, 8003678 <_gcvt+0x70>
 800365c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003660:	3e01      	subs	r6, #1
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f8cd 8008 	str.w	r8, [sp, #8]
 8003668:	9600      	str	r6, [sp, #0]
 800366a:	463a      	mov	r2, r7
 800366c:	462b      	mov	r3, r5
 800366e:	4621      	mov	r1, r4
 8003670:	4648      	mov	r0, r9
 8003672:	f7ff ff55 	bl	8003520 <print_e>
 8003676:	e7e5      	b.n	8003644 <_gcvt+0x3c>
 8003678:	4630      	mov	r0, r6
 800367a:	f000 fb6f 	bl	8003d5c <_mprec_log10>
 800367e:	463a      	mov	r2, r7
 8003680:	462b      	mov	r3, r5
 8003682:	f7fd f9a5 	bl	80009d0 <__aeabi_dcmple>
 8003686:	2800      	cmp	r0, #0
 8003688:	d1e8      	bne.n	800365c <_gcvt+0x54>
 800368a:	2200      	movs	r2, #0
 800368c:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <_gcvt+0x198>)
 800368e:	4629      	mov	r1, r5
 8003690:	4638      	mov	r0, r7
 8003692:	f7fd f993 	bl	80009bc <__aeabi_dcmplt>
 8003696:	a909      	add	r1, sp, #36	; 0x24
 8003698:	aa08      	add	r2, sp, #32
 800369a:	ab07      	add	r3, sp, #28
 800369c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80036a0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80036a4:	b388      	cbz	r0, 800370a <_gcvt+0x102>
 80036a6:	2303      	movs	r3, #3
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	463a      	mov	r2, r7
 80036ac:	462b      	mov	r3, r5
 80036ae:	4648      	mov	r0, r9
 80036b0:	f000 ff7e 	bl	80045b0 <_dtoa_r>
 80036b4:	f242 730f 	movw	r3, #9999	; 0x270f
 80036b8:	9a07      	ldr	r2, [sp, #28]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d027      	beq.n	800370e <_gcvt+0x106>
 80036be:	4623      	mov	r3, r4
 80036c0:	4426      	add	r6, r4
 80036c2:	4607      	mov	r7, r0
 80036c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80036c8:	1af2      	subs	r2, r6, r3
 80036ca:	9d07      	ldr	r5, [sp, #28]
 80036cc:	b349      	cbz	r1, 8003722 <_gcvt+0x11a>
 80036ce:	2d00      	cmp	r5, #0
 80036d0:	dc22      	bgt.n	8003718 <_gcvt+0x110>
 80036d2:	f1b8 0f00 	cmp.w	r8, #0
 80036d6:	d102      	bne.n	80036de <_gcvt+0xd6>
 80036d8:	7839      	ldrb	r1, [r7, #0]
 80036da:	2900      	cmp	r1, #0
 80036dc:	d049      	beq.n	8003772 <_gcvt+0x16a>
 80036de:	429c      	cmp	r4, r3
 80036e0:	bf04      	itt	eq
 80036e2:	2130      	moveq	r1, #48	; 0x30
 80036e4:	7021      	strbeq	r1, [r4, #0]
 80036e6:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0630 	mov.w	r6, #48	; 0x30
 80036f2:	bf08      	it	eq
 80036f4:	1c63      	addeq	r3, r4, #1
 80036f6:	7019      	strb	r1, [r3, #0]
 80036f8:	9907      	ldr	r1, [sp, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	2900      	cmp	r1, #0
 80036fe:	460d      	mov	r5, r1
 8003700:	db24      	blt.n	800374c <_gcvt+0x144>
 8003702:	b100      	cbz	r0, 8003706 <_gcvt+0xfe>
 8003704:	9107      	str	r1, [sp, #28]
 8003706:	1e79      	subs	r1, r7, #1
 8003708:	e02b      	b.n	8003762 <_gcvt+0x15a>
 800370a:	2302      	movs	r3, #2
 800370c:	e7cc      	b.n	80036a8 <_gcvt+0xa0>
 800370e:	4601      	mov	r1, r0
 8003710:	4620      	mov	r0, r4
 8003712:	f000 feb7 	bl	8004484 <strcpy>
 8003716:	e795      	b.n	8003644 <_gcvt+0x3c>
 8003718:	3d01      	subs	r5, #1
 800371a:	f803 1b01 	strb.w	r1, [r3], #1
 800371e:	9507      	str	r5, [sp, #28]
 8003720:	e7cf      	b.n	80036c2 <_gcvt+0xba>
 8003722:	1aad      	subs	r5, r5, r2
 8003724:	2630      	movs	r6, #48	; 0x30
 8003726:	e005      	b.n	8003734 <_gcvt+0x12c>
 8003728:	2a00      	cmp	r2, #0
 800372a:	dd06      	ble.n	800373a <_gcvt+0x132>
 800372c:	2101      	movs	r1, #1
 800372e:	f803 6b01 	strb.w	r6, [r3], #1
 8003732:	3a01      	subs	r2, #1
 8003734:	18a8      	adds	r0, r5, r2
 8003736:	2800      	cmp	r0, #0
 8003738:	dcf6      	bgt.n	8003728 <_gcvt+0x120>
 800373a:	2900      	cmp	r1, #0
 800373c:	d0c9      	beq.n	80036d2 <_gcvt+0xca>
 800373e:	9007      	str	r0, [sp, #28]
 8003740:	e7c7      	b.n	80036d2 <_gcvt+0xca>
 8003742:	f803 6b01 	strb.w	r6, [r3], #1
 8003746:	3a01      	subs	r2, #1
 8003748:	2001      	movs	r0, #1
 800374a:	e7d7      	b.n	80036fc <_gcvt+0xf4>
 800374c:	2a00      	cmp	r2, #0
 800374e:	f101 0101 	add.w	r1, r1, #1
 8003752:	dcf6      	bgt.n	8003742 <_gcvt+0x13a>
 8003754:	2800      	cmp	r0, #0
 8003756:	d0d6      	beq.n	8003706 <_gcvt+0xfe>
 8003758:	9507      	str	r5, [sp, #28]
 800375a:	e7d4      	b.n	8003706 <_gcvt+0xfe>
 800375c:	f803 0b01 	strb.w	r0, [r3], #1
 8003760:	3a01      	subs	r2, #1
 8003762:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003766:	b108      	cbz	r0, 800376c <_gcvt+0x164>
 8003768:	2a00      	cmp	r2, #0
 800376a:	dcf7      	bgt.n	800375c <_gcvt+0x154>
 800376c:	f1b8 0f00 	cmp.w	r8, #0
 8003770:	d10b      	bne.n	800378a <_gcvt+0x182>
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e765      	b.n	8003644 <_gcvt+0x3c>
 8003778:	f801 6b01 	strb.w	r6, [r1], #1
 800377c:	1a68      	subs	r0, r5, r1
 800377e:	2800      	cmp	r0, #0
 8003780:	dcfa      	bgt.n	8003778 <_gcvt+0x170>
 8003782:	2a00      	cmp	r2, #0
 8003784:	bfa8      	it	ge
 8003786:	189b      	addge	r3, r3, r2
 8003788:	e7f3      	b.n	8003772 <_gcvt+0x16a>
 800378a:	4619      	mov	r1, r3
 800378c:	189d      	adds	r5, r3, r2
 800378e:	2630      	movs	r6, #48	; 0x30
 8003790:	e7f4      	b.n	800377c <_gcvt+0x174>
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
 8003798:	eb1c432d 	.word	0xeb1c432d
 800379c:	3f1a36e2 	.word	0x3f1a36e2
 80037a0:	3ff00000 	.word	0x3ff00000

080037a4 <_Balloc>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037a8:	4604      	mov	r4, r0
 80037aa:	460e      	mov	r6, r1
 80037ac:	b93d      	cbnz	r5, 80037be <_Balloc+0x1a>
 80037ae:	2010      	movs	r0, #16
 80037b0:	f001 fcb2 	bl	8005118 <malloc>
 80037b4:	6260      	str	r0, [r4, #36]	; 0x24
 80037b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80037ba:	6005      	str	r5, [r0, #0]
 80037bc:	60c5      	str	r5, [r0, #12]
 80037be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80037c0:	68eb      	ldr	r3, [r5, #12]
 80037c2:	b183      	cbz	r3, 80037e6 <_Balloc+0x42>
 80037c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80037cc:	b9b8      	cbnz	r0, 80037fe <_Balloc+0x5a>
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f506 	lsl.w	r5, r1, r6
 80037d4:	1d6a      	adds	r2, r5, #5
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fadb 	bl	8003d94 <_calloc_r>
 80037de:	b160      	cbz	r0, 80037fa <_Balloc+0x56>
 80037e0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80037e4:	e00e      	b.n	8003804 <_Balloc+0x60>
 80037e6:	2221      	movs	r2, #33	; 0x21
 80037e8:	2104      	movs	r1, #4
 80037ea:	4620      	mov	r0, r4
 80037ec:	f000 fad2 	bl	8003d94 <_calloc_r>
 80037f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037f2:	60e8      	str	r0, [r5, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e4      	bne.n	80037c4 <_Balloc+0x20>
 80037fa:	2000      	movs	r0, #0
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	6802      	ldr	r2, [r0, #0]
 8003800:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003804:	2300      	movs	r3, #0
 8003806:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800380a:	e7f7      	b.n	80037fc <_Balloc+0x58>

0800380c <_Bfree>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003810:	4606      	mov	r6, r0
 8003812:	460d      	mov	r5, r1
 8003814:	b93c      	cbnz	r4, 8003826 <_Bfree+0x1a>
 8003816:	2010      	movs	r0, #16
 8003818:	f001 fc7e 	bl	8005118 <malloc>
 800381c:	6270      	str	r0, [r6, #36]	; 0x24
 800381e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003822:	6004      	str	r4, [r0, #0]
 8003824:	60c4      	str	r4, [r0, #12]
 8003826:	b13d      	cbz	r5, 8003838 <_Bfree+0x2c>
 8003828:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800382a:	686a      	ldr	r2, [r5, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003832:	6029      	str	r1, [r5, #0]
 8003834:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003838:	bd70      	pop	{r4, r5, r6, pc}

0800383a <__multadd>:
 800383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	461f      	mov	r7, r3
 8003840:	4606      	mov	r6, r0
 8003842:	460c      	mov	r4, r1
 8003844:	2300      	movs	r3, #0
 8003846:	690d      	ldr	r5, [r1, #16]
 8003848:	f101 0c14 	add.w	ip, r1, #20
 800384c:	f8dc 0000 	ldr.w	r0, [ip]
 8003850:	3301      	adds	r3, #1
 8003852:	b281      	uxth	r1, r0
 8003854:	fb02 7101 	mla	r1, r2, r1, r7
 8003858:	0c00      	lsrs	r0, r0, #16
 800385a:	0c0f      	lsrs	r7, r1, #16
 800385c:	fb02 7000 	mla	r0, r2, r0, r7
 8003860:	b289      	uxth	r1, r1
 8003862:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003866:	429d      	cmp	r5, r3
 8003868:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800386c:	f84c 1b04 	str.w	r1, [ip], #4
 8003870:	dcec      	bgt.n	800384c <__multadd+0x12>
 8003872:	b1d7      	cbz	r7, 80038aa <__multadd+0x70>
 8003874:	68a3      	ldr	r3, [r4, #8]
 8003876:	42ab      	cmp	r3, r5
 8003878:	dc12      	bgt.n	80038a0 <__multadd+0x66>
 800387a:	6861      	ldr	r1, [r4, #4]
 800387c:	4630      	mov	r0, r6
 800387e:	3101      	adds	r1, #1
 8003880:	f7ff ff90 	bl	80037a4 <_Balloc>
 8003884:	4680      	mov	r8, r0
 8003886:	6922      	ldr	r2, [r4, #16]
 8003888:	f104 010c 	add.w	r1, r4, #12
 800388c:	3202      	adds	r2, #2
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	300c      	adds	r0, #12
 8003892:	f001 fc57 	bl	8005144 <memcpy>
 8003896:	4621      	mov	r1, r4
 8003898:	4630      	mov	r0, r6
 800389a:	f7ff ffb7 	bl	800380c <_Bfree>
 800389e:	4644      	mov	r4, r8
 80038a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80038a4:	3501      	adds	r5, #1
 80038a6:	615f      	str	r7, [r3, #20]
 80038a8:	6125      	str	r5, [r4, #16]
 80038aa:	4620      	mov	r0, r4
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038b0 <__hi0bits>:
 80038b0:	0c02      	lsrs	r2, r0, #16
 80038b2:	0412      	lsls	r2, r2, #16
 80038b4:	4603      	mov	r3, r0
 80038b6:	b9b2      	cbnz	r2, 80038e6 <__hi0bits+0x36>
 80038b8:	0403      	lsls	r3, r0, #16
 80038ba:	2010      	movs	r0, #16
 80038bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80038c0:	bf04      	itt	eq
 80038c2:	021b      	lsleq	r3, r3, #8
 80038c4:	3008      	addeq	r0, #8
 80038c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80038ca:	bf04      	itt	eq
 80038cc:	011b      	lsleq	r3, r3, #4
 80038ce:	3004      	addeq	r0, #4
 80038d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80038d4:	bf04      	itt	eq
 80038d6:	009b      	lsleq	r3, r3, #2
 80038d8:	3002      	addeq	r0, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db06      	blt.n	80038ec <__hi0bits+0x3c>
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	d503      	bpl.n	80038ea <__hi0bits+0x3a>
 80038e2:	3001      	adds	r0, #1
 80038e4:	4770      	bx	lr
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7e8      	b.n	80038bc <__hi0bits+0xc>
 80038ea:	2020      	movs	r0, #32
 80038ec:	4770      	bx	lr

080038ee <__lo0bits>:
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	4601      	mov	r1, r0
 80038f2:	f013 0207 	ands.w	r2, r3, #7
 80038f6:	d00b      	beq.n	8003910 <__lo0bits+0x22>
 80038f8:	07da      	lsls	r2, r3, #31
 80038fa:	d423      	bmi.n	8003944 <__lo0bits+0x56>
 80038fc:	0798      	lsls	r0, r3, #30
 80038fe:	bf49      	itett	mi
 8003900:	085b      	lsrmi	r3, r3, #1
 8003902:	089b      	lsrpl	r3, r3, #2
 8003904:	2001      	movmi	r0, #1
 8003906:	600b      	strmi	r3, [r1, #0]
 8003908:	bf5c      	itt	pl
 800390a:	600b      	strpl	r3, [r1, #0]
 800390c:	2002      	movpl	r0, #2
 800390e:	4770      	bx	lr
 8003910:	b298      	uxth	r0, r3
 8003912:	b9a8      	cbnz	r0, 8003940 <__lo0bits+0x52>
 8003914:	2010      	movs	r0, #16
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	f013 0fff 	tst.w	r3, #255	; 0xff
 800391c:	bf04      	itt	eq
 800391e:	0a1b      	lsreq	r3, r3, #8
 8003920:	3008      	addeq	r0, #8
 8003922:	071a      	lsls	r2, r3, #28
 8003924:	bf04      	itt	eq
 8003926:	091b      	lsreq	r3, r3, #4
 8003928:	3004      	addeq	r0, #4
 800392a:	079a      	lsls	r2, r3, #30
 800392c:	bf04      	itt	eq
 800392e:	089b      	lsreq	r3, r3, #2
 8003930:	3002      	addeq	r0, #2
 8003932:	07da      	lsls	r2, r3, #31
 8003934:	d402      	bmi.n	800393c <__lo0bits+0x4e>
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	d006      	beq.n	8003948 <__lo0bits+0x5a>
 800393a:	3001      	adds	r0, #1
 800393c:	600b      	str	r3, [r1, #0]
 800393e:	4770      	bx	lr
 8003940:	4610      	mov	r0, r2
 8003942:	e7e9      	b.n	8003918 <__lo0bits+0x2a>
 8003944:	2000      	movs	r0, #0
 8003946:	4770      	bx	lr
 8003948:	2020      	movs	r0, #32
 800394a:	4770      	bx	lr

0800394c <__i2b>:
 800394c:	b510      	push	{r4, lr}
 800394e:	460c      	mov	r4, r1
 8003950:	2101      	movs	r1, #1
 8003952:	f7ff ff27 	bl	80037a4 <_Balloc>
 8003956:	2201      	movs	r2, #1
 8003958:	6144      	str	r4, [r0, #20]
 800395a:	6102      	str	r2, [r0, #16]
 800395c:	bd10      	pop	{r4, pc}

0800395e <__multiply>:
 800395e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003962:	4614      	mov	r4, r2
 8003964:	690a      	ldr	r2, [r1, #16]
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	4688      	mov	r8, r1
 800396a:	429a      	cmp	r2, r3
 800396c:	bfbe      	ittt	lt
 800396e:	460b      	movlt	r3, r1
 8003970:	46a0      	movlt	r8, r4
 8003972:	461c      	movlt	r4, r3
 8003974:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003978:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800397c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003980:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003984:	eb07 0609 	add.w	r6, r7, r9
 8003988:	42b3      	cmp	r3, r6
 800398a:	bfb8      	it	lt
 800398c:	3101      	addlt	r1, #1
 800398e:	f7ff ff09 	bl	80037a4 <_Balloc>
 8003992:	f100 0514 	add.w	r5, r0, #20
 8003996:	462b      	mov	r3, r5
 8003998:	2200      	movs	r2, #0
 800399a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800399e:	4573      	cmp	r3, lr
 80039a0:	d316      	bcc.n	80039d0 <__multiply+0x72>
 80039a2:	f104 0214 	add.w	r2, r4, #20
 80039a6:	f108 0114 	add.w	r1, r8, #20
 80039aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80039ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	9b00      	ldr	r3, [sp, #0]
 80039b6:	9201      	str	r2, [sp, #4]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d80c      	bhi.n	80039d6 <__multiply+0x78>
 80039bc:	2e00      	cmp	r6, #0
 80039be:	dd03      	ble.n	80039c8 <__multiply+0x6a>
 80039c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05d      	beq.n	8003a84 <__multiply+0x126>
 80039c8:	6106      	str	r6, [r0, #16]
 80039ca:	b003      	add	sp, #12
 80039cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d0:	f843 2b04 	str.w	r2, [r3], #4
 80039d4:	e7e3      	b.n	800399e <__multiply+0x40>
 80039d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80039da:	f1bb 0f00 	cmp.w	fp, #0
 80039de:	d023      	beq.n	8003a28 <__multiply+0xca>
 80039e0:	4689      	mov	r9, r1
 80039e2:	46ac      	mov	ip, r5
 80039e4:	f04f 0800 	mov.w	r8, #0
 80039e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80039ec:	f8dc a000 	ldr.w	sl, [ip]
 80039f0:	b2a3      	uxth	r3, r4
 80039f2:	fa1f fa8a 	uxth.w	sl, sl
 80039f6:	fb0b a303 	mla	r3, fp, r3, sl
 80039fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80039fe:	f8dc 4000 	ldr.w	r4, [ip]
 8003a02:	4443      	add	r3, r8
 8003a04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003a08:	fb0b 840a 	mla	r4, fp, sl, r8
 8003a0c:	46e2      	mov	sl, ip
 8003a0e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003a18:	454f      	cmp	r7, r9
 8003a1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8003a22:	d82b      	bhi.n	8003a7c <__multiply+0x11e>
 8003a24:	f8cc 8004 	str.w	r8, [ip, #4]
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	3204      	adds	r2, #4
 8003a2c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003a30:	f1ba 0f00 	cmp.w	sl, #0
 8003a34:	d020      	beq.n	8003a78 <__multiply+0x11a>
 8003a36:	4689      	mov	r9, r1
 8003a38:	46a8      	mov	r8, r5
 8003a3a:	f04f 0b00 	mov.w	fp, #0
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	f8b9 c000 	ldrh.w	ip, [r9]
 8003a44:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	fb0a 440c 	mla	r4, sl, ip, r4
 8003a4e:	46c4      	mov	ip, r8
 8003a50:	445c      	add	r4, fp
 8003a52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003a56:	f84c 3b04 	str.w	r3, [ip], #4
 8003a5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8003a5e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	fb0a b303 	mla	r3, sl, r3, fp
 8003a68:	454f      	cmp	r7, r9
 8003a6a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003a6e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003a72:	d805      	bhi.n	8003a80 <__multiply+0x122>
 8003a74:	f8c8 3004 	str.w	r3, [r8, #4]
 8003a78:	3504      	adds	r5, #4
 8003a7a:	e79b      	b.n	80039b4 <__multiply+0x56>
 8003a7c:	46d4      	mov	ip, sl
 8003a7e:	e7b3      	b.n	80039e8 <__multiply+0x8a>
 8003a80:	46e0      	mov	r8, ip
 8003a82:	e7dd      	b.n	8003a40 <__multiply+0xe2>
 8003a84:	3e01      	subs	r6, #1
 8003a86:	e799      	b.n	80039bc <__multiply+0x5e>

08003a88 <__pow5mult>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	4615      	mov	r5, r2
 8003a8e:	f012 0203 	ands.w	r2, r2, #3
 8003a92:	4606      	mov	r6, r0
 8003a94:	460f      	mov	r7, r1
 8003a96:	d007      	beq.n	8003aa8 <__pow5mult+0x20>
 8003a98:	4c21      	ldr	r4, [pc, #132]	; (8003b20 <__pow5mult+0x98>)
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003aa2:	f7ff feca 	bl	800383a <__multadd>
 8003aa6:	4607      	mov	r7, r0
 8003aa8:	10ad      	asrs	r5, r5, #2
 8003aaa:	d035      	beq.n	8003b18 <__pow5mult+0x90>
 8003aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003aae:	b93c      	cbnz	r4, 8003ac0 <__pow5mult+0x38>
 8003ab0:	2010      	movs	r0, #16
 8003ab2:	f001 fb31 	bl	8005118 <malloc>
 8003ab6:	6270      	str	r0, [r6, #36]	; 0x24
 8003ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003abc:	6004      	str	r4, [r0, #0]
 8003abe:	60c4      	str	r4, [r0, #12]
 8003ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ac8:	b94c      	cbnz	r4, 8003ade <__pow5mult+0x56>
 8003aca:	f240 2171 	movw	r1, #625	; 0x271
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7ff ff3c 	bl	800394c <__i2b>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	f8c8 0008 	str.w	r0, [r8, #8]
 8003adc:	6003      	str	r3, [r0, #0]
 8003ade:	f04f 0800 	mov.w	r8, #0
 8003ae2:	07eb      	lsls	r3, r5, #31
 8003ae4:	d50a      	bpl.n	8003afc <__pow5mult+0x74>
 8003ae6:	4639      	mov	r1, r7
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	f7ff ff37 	bl	800395e <__multiply>
 8003af0:	4681      	mov	r9, r0
 8003af2:	4639      	mov	r1, r7
 8003af4:	4630      	mov	r0, r6
 8003af6:	f7ff fe89 	bl	800380c <_Bfree>
 8003afa:	464f      	mov	r7, r9
 8003afc:	106d      	asrs	r5, r5, #1
 8003afe:	d00b      	beq.n	8003b18 <__pow5mult+0x90>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	b938      	cbnz	r0, 8003b14 <__pow5mult+0x8c>
 8003b04:	4622      	mov	r2, r4
 8003b06:	4621      	mov	r1, r4
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f7ff ff28 	bl	800395e <__multiply>
 8003b0e:	6020      	str	r0, [r4, #0]
 8003b10:	f8c0 8000 	str.w	r8, [r0]
 8003b14:	4604      	mov	r4, r0
 8003b16:	e7e4      	b.n	8003ae2 <__pow5mult+0x5a>
 8003b18:	4638      	mov	r0, r7
 8003b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1e:	bf00      	nop
 8003b20:	08006378 	.word	0x08006378

08003b24 <__lshift>:
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	460c      	mov	r4, r1
 8003b2a:	4607      	mov	r7, r0
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003b34:	eb0a 0903 	add.w	r9, sl, r3
 8003b38:	6849      	ldr	r1, [r1, #4]
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	f109 0501 	add.w	r5, r9, #1
 8003b40:	42ab      	cmp	r3, r5
 8003b42:	db32      	blt.n	8003baa <__lshift+0x86>
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff fe2d 	bl	80037a4 <_Balloc>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4680      	mov	r8, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f100 0114 	add.w	r1, r0, #20
 8003b54:	4553      	cmp	r3, sl
 8003b56:	db2b      	blt.n	8003bb0 <__lshift+0x8c>
 8003b58:	6920      	ldr	r0, [r4, #16]
 8003b5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b5e:	f104 0314 	add.w	r3, r4, #20
 8003b62:	f016 021f 	ands.w	r2, r6, #31
 8003b66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b6a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003b6e:	d025      	beq.n	8003bbc <__lshift+0x98>
 8003b70:	2000      	movs	r0, #0
 8003b72:	f1c2 0e20 	rsb	lr, r2, #32
 8003b76:	468a      	mov	sl, r1
 8003b78:	681e      	ldr	r6, [r3, #0]
 8003b7a:	4096      	lsls	r6, r2
 8003b7c:	4330      	orrs	r0, r6
 8003b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8003b82:	f853 0b04 	ldr.w	r0, [r3], #4
 8003b86:	459c      	cmp	ip, r3
 8003b88:	fa20 f00e 	lsr.w	r0, r0, lr
 8003b8c:	d814      	bhi.n	8003bb8 <__lshift+0x94>
 8003b8e:	6048      	str	r0, [r1, #4]
 8003b90:	b108      	cbz	r0, 8003b96 <__lshift+0x72>
 8003b92:	f109 0502 	add.w	r5, r9, #2
 8003b96:	3d01      	subs	r5, #1
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f8c8 5010 	str.w	r5, [r8, #16]
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f7ff fe34 	bl	800380c <_Bfree>
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003baa:	3101      	adds	r1, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	e7c7      	b.n	8003b40 <__lshift+0x1c>
 8003bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	e7cd      	b.n	8003b54 <__lshift+0x30>
 8003bb8:	4651      	mov	r1, sl
 8003bba:	e7dc      	b.n	8003b76 <__lshift+0x52>
 8003bbc:	3904      	subs	r1, #4
 8003bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc2:	459c      	cmp	ip, r3
 8003bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8003bc8:	d8f9      	bhi.n	8003bbe <__lshift+0x9a>
 8003bca:	e7e4      	b.n	8003b96 <__lshift+0x72>

08003bcc <__mcmp>:
 8003bcc:	6903      	ldr	r3, [r0, #16]
 8003bce:	690a      	ldr	r2, [r1, #16]
 8003bd0:	b530      	push	{r4, r5, lr}
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	d10c      	bne.n	8003bf0 <__mcmp+0x24>
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	3014      	adds	r0, #20
 8003bda:	3114      	adds	r1, #20
 8003bdc:	1884      	adds	r4, r0, r2
 8003bde:	4411      	add	r1, r2
 8003be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003be8:	4295      	cmp	r5, r2
 8003bea:	d003      	beq.n	8003bf4 <__mcmp+0x28>
 8003bec:	d305      	bcc.n	8003bfa <__mcmp+0x2e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd30      	pop	{r4, r5, pc}
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d3f3      	bcc.n	8003be0 <__mcmp+0x14>
 8003bf8:	e7fa      	b.n	8003bf0 <__mcmp+0x24>
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e7f7      	b.n	8003bf0 <__mcmp+0x24>

08003c00 <__mdiff>:
 8003c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	460d      	mov	r5, r1
 8003c06:	4607      	mov	r7, r0
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	f7ff ffdd 	bl	8003bcc <__mcmp>
 8003c12:	1e06      	subs	r6, r0, #0
 8003c14:	d108      	bne.n	8003c28 <__mdiff+0x28>
 8003c16:	4631      	mov	r1, r6
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff fdc3 	bl	80037a4 <_Balloc>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c28:	bfa4      	itt	ge
 8003c2a:	4623      	movge	r3, r4
 8003c2c:	462c      	movge	r4, r5
 8003c2e:	4638      	mov	r0, r7
 8003c30:	6861      	ldr	r1, [r4, #4]
 8003c32:	bfa6      	itte	ge
 8003c34:	461d      	movge	r5, r3
 8003c36:	2600      	movge	r6, #0
 8003c38:	2601      	movlt	r6, #1
 8003c3a:	f7ff fdb3 	bl	80037a4 <_Balloc>
 8003c3e:	f04f 0e00 	mov.w	lr, #0
 8003c42:	60c6      	str	r6, [r0, #12]
 8003c44:	692b      	ldr	r3, [r5, #16]
 8003c46:	6926      	ldr	r6, [r4, #16]
 8003c48:	f104 0214 	add.w	r2, r4, #20
 8003c4c:	f105 0914 	add.w	r9, r5, #20
 8003c50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003c54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003c58:	f100 0114 	add.w	r1, r0, #20
 8003c5c:	f852 ab04 	ldr.w	sl, [r2], #4
 8003c60:	f859 5b04 	ldr.w	r5, [r9], #4
 8003c64:	fa1f f38a 	uxth.w	r3, sl
 8003c68:	4473      	add	r3, lr
 8003c6a:	b2ac      	uxth	r4, r5
 8003c6c:	1b1b      	subs	r3, r3, r4
 8003c6e:	0c2c      	lsrs	r4, r5, #16
 8003c70:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003c74:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003c7e:	45c8      	cmp	r8, r9
 8003c80:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003c84:	4694      	mov	ip, r2
 8003c86:	f841 4b04 	str.w	r4, [r1], #4
 8003c8a:	d8e7      	bhi.n	8003c5c <__mdiff+0x5c>
 8003c8c:	45bc      	cmp	ip, r7
 8003c8e:	d304      	bcc.n	8003c9a <__mdiff+0x9a>
 8003c90:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003c94:	b183      	cbz	r3, 8003cb8 <__mdiff+0xb8>
 8003c96:	6106      	str	r6, [r0, #16]
 8003c98:	e7c4      	b.n	8003c24 <__mdiff+0x24>
 8003c9a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003c9e:	b2a2      	uxth	r2, r4
 8003ca0:	4472      	add	r2, lr
 8003ca2:	1413      	asrs	r3, r2, #16
 8003ca4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003cae:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003cb2:	f841 2b04 	str.w	r2, [r1], #4
 8003cb6:	e7e9      	b.n	8003c8c <__mdiff+0x8c>
 8003cb8:	3e01      	subs	r6, #1
 8003cba:	e7e9      	b.n	8003c90 <__mdiff+0x90>

08003cbc <__d2b>:
 8003cbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003cc0:	461c      	mov	r4, r3
 8003cc2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4690      	mov	r8, r2
 8003cca:	f7ff fd6b 	bl	80037a4 <_Balloc>
 8003cce:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003cd2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003cd6:	4607      	mov	r7, r0
 8003cd8:	bb34      	cbnz	r4, 8003d28 <__d2b+0x6c>
 8003cda:	9201      	str	r2, [sp, #4]
 8003cdc:	f1b8 0200 	subs.w	r2, r8, #0
 8003ce0:	d027      	beq.n	8003d32 <__d2b+0x76>
 8003ce2:	a802      	add	r0, sp, #8
 8003ce4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003ce8:	f7ff fe01 	bl	80038ee <__lo0bits>
 8003cec:	9900      	ldr	r1, [sp, #0]
 8003cee:	b1f0      	cbz	r0, 8003d2e <__d2b+0x72>
 8003cf0:	9a01      	ldr	r2, [sp, #4]
 8003cf2:	f1c0 0320 	rsb	r3, r0, #32
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	40c2      	lsrs	r2, r0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	9201      	str	r2, [sp, #4]
 8003d02:	9b01      	ldr	r3, [sp, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2102      	movne	r1, #2
 8003d0a:	2101      	moveq	r1, #1
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	6139      	str	r1, [r7, #16]
 8003d10:	b1c4      	cbz	r4, 8003d44 <__d2b+0x88>
 8003d12:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003d16:	4404      	add	r4, r0
 8003d18:	6034      	str	r4, [r6, #0]
 8003d1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003d1e:	6028      	str	r0, [r5, #0]
 8003d20:	4638      	mov	r0, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d2c:	e7d5      	b.n	8003cda <__d2b+0x1e>
 8003d2e:	6179      	str	r1, [r7, #20]
 8003d30:	e7e7      	b.n	8003d02 <__d2b+0x46>
 8003d32:	a801      	add	r0, sp, #4
 8003d34:	f7ff fddb 	bl	80038ee <__lo0bits>
 8003d38:	2101      	movs	r1, #1
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	6139      	str	r1, [r7, #16]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	3020      	adds	r0, #32
 8003d42:	e7e5      	b.n	8003d10 <__d2b+0x54>
 8003d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003d48:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003d4c:	6030      	str	r0, [r6, #0]
 8003d4e:	6918      	ldr	r0, [r3, #16]
 8003d50:	f7ff fdae 	bl	80038b0 <__hi0bits>
 8003d54:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003d58:	e7e1      	b.n	8003d1e <__d2b+0x62>
	...

08003d5c <_mprec_log10>:
 8003d5c:	2817      	cmp	r0, #23
 8003d5e:	b5d0      	push	{r4, r6, r7, lr}
 8003d60:	4604      	mov	r4, r0
 8003d62:	dc05      	bgt.n	8003d70 <_mprec_log10+0x14>
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <_mprec_log10+0x2c>)
 8003d66:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8003d6a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8003d70:	2000      	movs	r0, #0
 8003d72:	2600      	movs	r6, #0
 8003d74:	4905      	ldr	r1, [pc, #20]	; (8003d8c <_mprec_log10+0x30>)
 8003d76:	4f06      	ldr	r7, [pc, #24]	; (8003d90 <_mprec_log10+0x34>)
 8003d78:	4632      	mov	r2, r6
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	f7fc fbac 	bl	80004d8 <__aeabi_dmul>
 8003d80:	3c01      	subs	r4, #1
 8003d82:	d1f9      	bne.n	8003d78 <_mprec_log10+0x1c>
 8003d84:	e7f3      	b.n	8003d6e <_mprec_log10+0x12>
 8003d86:	bf00      	nop
 8003d88:	080062b0 	.word	0x080062b0
 8003d8c:	3ff00000 	.word	0x3ff00000
 8003d90:	40240000 	.word	0x40240000

08003d94 <_calloc_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	fb02 f401 	mul.w	r4, r2, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	f000 f808 	bl	8003db0 <_malloc_r>
 8003da0:	4605      	mov	r5, r0
 8003da2:	b118      	cbz	r0, 8003dac <_calloc_r+0x18>
 8003da4:	4622      	mov	r2, r4
 8003da6:	2100      	movs	r1, #0
 8003da8:	f7ff fb92 	bl	80034d0 <memset>
 8003dac:	4628      	mov	r0, r5
 8003dae:	bd38      	pop	{r3, r4, r5, pc}

08003db0 <_malloc_r>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	1ccd      	adds	r5, r1, #3
 8003db4:	f025 0503 	bic.w	r5, r5, #3
 8003db8:	3508      	adds	r5, #8
 8003dba:	2d0c      	cmp	r5, #12
 8003dbc:	bf38      	it	cc
 8003dbe:	250c      	movcc	r5, #12
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	db01      	blt.n	8003dca <_malloc_r+0x1a>
 8003dc6:	42a9      	cmp	r1, r5
 8003dc8:	d903      	bls.n	8003dd2 <_malloc_r+0x22>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	2000      	movs	r0, #0
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	f001 f9db 	bl	800518c <__malloc_lock>
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <_malloc_r+0xac>)
 8003dd8:	6814      	ldr	r4, [r2, #0]
 8003dda:	4621      	mov	r1, r4
 8003ddc:	b991      	cbnz	r1, 8003e04 <_malloc_r+0x54>
 8003dde:	4c20      	ldr	r4, [pc, #128]	; (8003e60 <_malloc_r+0xb0>)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	b91b      	cbnz	r3, 8003dec <_malloc_r+0x3c>
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 fb3d 	bl	8004464 <_sbrk_r>
 8003dea:	6020      	str	r0, [r4, #0]
 8003dec:	4629      	mov	r1, r5
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 fb38 	bl	8004464 <_sbrk_r>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d124      	bne.n	8003e42 <_malloc_r+0x92>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	6033      	str	r3, [r6, #0]
 8003dfe:	f001 f9c6 	bl	800518e <__malloc_unlock>
 8003e02:	e7e4      	b.n	8003dce <_malloc_r+0x1e>
 8003e04:	680b      	ldr	r3, [r1, #0]
 8003e06:	1b5b      	subs	r3, r3, r5
 8003e08:	d418      	bmi.n	8003e3c <_malloc_r+0x8c>
 8003e0a:	2b0b      	cmp	r3, #11
 8003e0c:	d90f      	bls.n	8003e2e <_malloc_r+0x7e>
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	18cc      	adds	r4, r1, r3
 8003e12:	50cd      	str	r5, [r1, r3]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f001 f9ba 	bl	800518e <__malloc_unlock>
 8003e1a:	f104 000b 	add.w	r0, r4, #11
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	f020 0007 	bic.w	r0, r0, #7
 8003e24:	1ac3      	subs	r3, r0, r3
 8003e26:	d0d3      	beq.n	8003dd0 <_malloc_r+0x20>
 8003e28:	425a      	negs	r2, r3
 8003e2a:	50e2      	str	r2, [r4, r3]
 8003e2c:	e7d0      	b.n	8003dd0 <_malloc_r+0x20>
 8003e2e:	684b      	ldr	r3, [r1, #4]
 8003e30:	428c      	cmp	r4, r1
 8003e32:	bf16      	itet	ne
 8003e34:	6063      	strne	r3, [r4, #4]
 8003e36:	6013      	streq	r3, [r2, #0]
 8003e38:	460c      	movne	r4, r1
 8003e3a:	e7eb      	b.n	8003e14 <_malloc_r+0x64>
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	6849      	ldr	r1, [r1, #4]
 8003e40:	e7cc      	b.n	8003ddc <_malloc_r+0x2c>
 8003e42:	1cc4      	adds	r4, r0, #3
 8003e44:	f024 0403 	bic.w	r4, r4, #3
 8003e48:	42a0      	cmp	r0, r4
 8003e4a:	d005      	beq.n	8003e58 <_malloc_r+0xa8>
 8003e4c:	1a21      	subs	r1, r4, r0
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f000 fb08 	bl	8004464 <_sbrk_r>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d0cf      	beq.n	8003df8 <_malloc_r+0x48>
 8003e58:	6025      	str	r5, [r4, #0]
 8003e5a:	e7db      	b.n	8003e14 <_malloc_r+0x64>
 8003e5c:	20000090 	.word	0x20000090
 8003e60:	20000094 	.word	0x20000094

08003e64 <_realloc_r>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	4607      	mov	r7, r0
 8003e68:	4614      	mov	r4, r2
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	b921      	cbnz	r1, 8003e78 <_realloc_r+0x14>
 8003e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e72:	4611      	mov	r1, r2
 8003e74:	f7ff bf9c 	b.w	8003db0 <_malloc_r>
 8003e78:	b922      	cbnz	r2, 8003e84 <_realloc_r+0x20>
 8003e7a:	f001 f989 	bl	8005190 <_free_r>
 8003e7e:	4625      	mov	r5, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e84:	f001 f9d0 	bl	8005228 <_malloc_usable_size_r>
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d20f      	bcs.n	8003eac <_realloc_r+0x48>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f7ff ff8e 	bl	8003db0 <_malloc_r>
 8003e94:	4605      	mov	r5, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d0f2      	beq.n	8003e80 <_realloc_r+0x1c>
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	f001 f951 	bl	8005144 <memcpy>
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f001 f973 	bl	8005190 <_free_r>
 8003eaa:	e7e9      	b.n	8003e80 <_realloc_r+0x1c>
 8003eac:	4635      	mov	r5, r6
 8003eae:	e7e7      	b.n	8003e80 <_realloc_r+0x1c>

08003eb0 <__ssputs_r>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	688e      	ldr	r6, [r1, #8]
 8003eb6:	4682      	mov	sl, r0
 8003eb8:	429e      	cmp	r6, r3
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4690      	mov	r8, r2
 8003ebe:	4699      	mov	r9, r3
 8003ec0:	d837      	bhi.n	8003f32 <__ssputs_r+0x82>
 8003ec2:	898a      	ldrh	r2, [r1, #12]
 8003ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ec8:	d031      	beq.n	8003f2e <__ssputs_r+0x7e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	6825      	ldr	r5, [r4, #0]
 8003ece:	6909      	ldr	r1, [r1, #16]
 8003ed0:	1a6f      	subs	r7, r5, r1
 8003ed2:	6965      	ldr	r5, [r4, #20]
 8003ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ed8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003edc:	f109 0301 	add.w	r3, r9, #1
 8003ee0:	443b      	add	r3, r7
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	bf38      	it	cc
 8003ee6:	461d      	movcc	r5, r3
 8003ee8:	0553      	lsls	r3, r2, #21
 8003eea:	d530      	bpl.n	8003f4e <__ssputs_r+0x9e>
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7ff ff5f 	bl	8003db0 <_malloc_r>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	b950      	cbnz	r0, 8003f0c <__ssputs_r+0x5c>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f8ca 3000 	str.w	r3, [sl]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	463a      	mov	r2, r7
 8003f0e:	6921      	ldr	r1, [r4, #16]
 8003f10:	f001 f918 	bl	8005144 <memcpy>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	6126      	str	r6, [r4, #16]
 8003f22:	443e      	add	r6, r7
 8003f24:	6026      	str	r6, [r4, #0]
 8003f26:	464e      	mov	r6, r9
 8003f28:	6165      	str	r5, [r4, #20]
 8003f2a:	1bed      	subs	r5, r5, r7
 8003f2c:	60a5      	str	r5, [r4, #8]
 8003f2e:	454e      	cmp	r6, r9
 8003f30:	d900      	bls.n	8003f34 <__ssputs_r+0x84>
 8003f32:	464e      	mov	r6, r9
 8003f34:	4632      	mov	r2, r6
 8003f36:	4641      	mov	r1, r8
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	f001 f90e 	bl	800515a <memmove>
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	2000      	movs	r0, #0
 8003f42:	1b9b      	subs	r3, r3, r6
 8003f44:	60a3      	str	r3, [r4, #8]
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	441e      	add	r6, r3
 8003f4a:	6026      	str	r6, [r4, #0]
 8003f4c:	e7dc      	b.n	8003f08 <__ssputs_r+0x58>
 8003f4e:	462a      	mov	r2, r5
 8003f50:	f7ff ff88 	bl	8003e64 <_realloc_r>
 8003f54:	4606      	mov	r6, r0
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d1e2      	bne.n	8003f20 <__ssputs_r+0x70>
 8003f5a:	6921      	ldr	r1, [r4, #16]
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	f001 f917 	bl	8005190 <_free_r>
 8003f62:	e7c8      	b.n	8003ef6 <__ssputs_r+0x46>

08003f64 <_svfiprintf_r>:
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	461d      	mov	r5, r3
 8003f6a:	898b      	ldrh	r3, [r1, #12]
 8003f6c:	b09d      	sub	sp, #116	; 0x74
 8003f6e:	061f      	lsls	r7, r3, #24
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	4616      	mov	r6, r2
 8003f76:	d50f      	bpl.n	8003f98 <_svfiprintf_r+0x34>
 8003f78:	690b      	ldr	r3, [r1, #16]
 8003f7a:	b96b      	cbnz	r3, 8003f98 <_svfiprintf_r+0x34>
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	f7ff ff17 	bl	8003db0 <_malloc_r>
 8003f82:	6020      	str	r0, [r4, #0]
 8003f84:	6120      	str	r0, [r4, #16]
 8003f86:	b928      	cbnz	r0, 8003f94 <_svfiprintf_r+0x30>
 8003f88:	230c      	movs	r3, #12
 8003f8a:	f8c8 3000 	str.w	r3, [r8]
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f92:	e0c8      	b.n	8004126 <_svfiprintf_r+0x1c2>
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	6163      	str	r3, [r4, #20]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fa2:	2330      	movs	r3, #48	; 0x30
 8003fa4:	f04f 0b01 	mov.w	fp, #1
 8003fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fac:	9503      	str	r5, [sp, #12]
 8003fae:	4637      	mov	r7, r6
 8003fb0:	463d      	mov	r5, r7
 8003fb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fb6:	b10b      	cbz	r3, 8003fbc <_svfiprintf_r+0x58>
 8003fb8:	2b25      	cmp	r3, #37	; 0x25
 8003fba:	d13e      	bne.n	800403a <_svfiprintf_r+0xd6>
 8003fbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fc0:	d00b      	beq.n	8003fda <_svfiprintf_r+0x76>
 8003fc2:	4653      	mov	r3, sl
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4640      	mov	r0, r8
 8003fca:	f7ff ff71 	bl	8003eb0 <__ssputs_r>
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f000 80a4 	beq.w	800411c <_svfiprintf_r+0x1b8>
 8003fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd6:	4453      	add	r3, sl
 8003fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fda:	783b      	ldrb	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 809d 	beq.w	800411c <_svfiprintf_r+0x1b8>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	9307      	str	r3, [sp, #28]
 8003ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff6:	462f      	mov	r7, r5
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ffe:	4850      	ldr	r0, [pc, #320]	; (8004140 <_svfiprintf_r+0x1dc>)
 8004000:	f001 f892 	bl	8005128 <memchr>
 8004004:	9b04      	ldr	r3, [sp, #16]
 8004006:	b9d0      	cbnz	r0, 800403e <_svfiprintf_r+0xda>
 8004008:	06d9      	lsls	r1, r3, #27
 800400a:	bf44      	itt	mi
 800400c:	2220      	movmi	r2, #32
 800400e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004012:	071a      	lsls	r2, r3, #28
 8004014:	bf44      	itt	mi
 8004016:	222b      	movmi	r2, #43	; 0x2b
 8004018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800401c:	782a      	ldrb	r2, [r5, #0]
 800401e:	2a2a      	cmp	r2, #42	; 0x2a
 8004020:	d015      	beq.n	800404e <_svfiprintf_r+0xea>
 8004022:	462f      	mov	r7, r5
 8004024:	2000      	movs	r0, #0
 8004026:	250a      	movs	r5, #10
 8004028:	9a07      	ldr	r2, [sp, #28]
 800402a:	4639      	mov	r1, r7
 800402c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004030:	3b30      	subs	r3, #48	; 0x30
 8004032:	2b09      	cmp	r3, #9
 8004034:	d94d      	bls.n	80040d2 <_svfiprintf_r+0x16e>
 8004036:	b1b8      	cbz	r0, 8004068 <_svfiprintf_r+0x104>
 8004038:	e00f      	b.n	800405a <_svfiprintf_r+0xf6>
 800403a:	462f      	mov	r7, r5
 800403c:	e7b8      	b.n	8003fb0 <_svfiprintf_r+0x4c>
 800403e:	4a40      	ldr	r2, [pc, #256]	; (8004140 <_svfiprintf_r+0x1dc>)
 8004040:	463d      	mov	r5, r7
 8004042:	1a80      	subs	r0, r0, r2
 8004044:	fa0b f000 	lsl.w	r0, fp, r0
 8004048:	4318      	orrs	r0, r3
 800404a:	9004      	str	r0, [sp, #16]
 800404c:	e7d3      	b.n	8003ff6 <_svfiprintf_r+0x92>
 800404e:	9a03      	ldr	r2, [sp, #12]
 8004050:	1d11      	adds	r1, r2, #4
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	9103      	str	r1, [sp, #12]
 8004056:	2a00      	cmp	r2, #0
 8004058:	db01      	blt.n	800405e <_svfiprintf_r+0xfa>
 800405a:	9207      	str	r2, [sp, #28]
 800405c:	e004      	b.n	8004068 <_svfiprintf_r+0x104>
 800405e:	4252      	negs	r2, r2
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	9207      	str	r2, [sp, #28]
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	783b      	ldrb	r3, [r7, #0]
 800406a:	2b2e      	cmp	r3, #46	; 0x2e
 800406c:	d10c      	bne.n	8004088 <_svfiprintf_r+0x124>
 800406e:	787b      	ldrb	r3, [r7, #1]
 8004070:	2b2a      	cmp	r3, #42	; 0x2a
 8004072:	d133      	bne.n	80040dc <_svfiprintf_r+0x178>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	3702      	adds	r7, #2
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9203      	str	r2, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfb8      	it	lt
 8004082:	f04f 33ff 	movlt.w	r3, #4294967295
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	4d2e      	ldr	r5, [pc, #184]	; (8004144 <_svfiprintf_r+0x1e0>)
 800408a:	2203      	movs	r2, #3
 800408c:	7839      	ldrb	r1, [r7, #0]
 800408e:	4628      	mov	r0, r5
 8004090:	f001 f84a 	bl	8005128 <memchr>
 8004094:	b138      	cbz	r0, 80040a6 <_svfiprintf_r+0x142>
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	1b40      	subs	r0, r0, r5
 800409a:	fa03 f000 	lsl.w	r0, r3, r0
 800409e:	9b04      	ldr	r3, [sp, #16]
 80040a0:	3701      	adds	r7, #1
 80040a2:	4303      	orrs	r3, r0
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	7839      	ldrb	r1, [r7, #0]
 80040a8:	2206      	movs	r2, #6
 80040aa:	4827      	ldr	r0, [pc, #156]	; (8004148 <_svfiprintf_r+0x1e4>)
 80040ac:	1c7e      	adds	r6, r7, #1
 80040ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b2:	f001 f839 	bl	8005128 <memchr>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d038      	beq.n	800412c <_svfiprintf_r+0x1c8>
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <_svfiprintf_r+0x1e8>)
 80040bc:	bb13      	cbnz	r3, 8004104 <_svfiprintf_r+0x1a0>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	3307      	adds	r3, #7
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	3308      	adds	r3, #8
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040cc:	444b      	add	r3, r9
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
 80040d0:	e76d      	b.n	8003fae <_svfiprintf_r+0x4a>
 80040d2:	fb05 3202 	mla	r2, r5, r2, r3
 80040d6:	2001      	movs	r0, #1
 80040d8:	460f      	mov	r7, r1
 80040da:	e7a6      	b.n	800402a <_svfiprintf_r+0xc6>
 80040dc:	2300      	movs	r3, #0
 80040de:	250a      	movs	r5, #10
 80040e0:	4619      	mov	r1, r3
 80040e2:	3701      	adds	r7, #1
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	4638      	mov	r0, r7
 80040e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ec:	3a30      	subs	r2, #48	; 0x30
 80040ee:	2a09      	cmp	r2, #9
 80040f0:	d903      	bls.n	80040fa <_svfiprintf_r+0x196>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0c8      	beq.n	8004088 <_svfiprintf_r+0x124>
 80040f6:	9105      	str	r1, [sp, #20]
 80040f8:	e7c6      	b.n	8004088 <_svfiprintf_r+0x124>
 80040fa:	fb05 2101 	mla	r1, r5, r1, r2
 80040fe:	2301      	movs	r3, #1
 8004100:	4607      	mov	r7, r0
 8004102:	e7f0      	b.n	80040e6 <_svfiprintf_r+0x182>
 8004104:	ab03      	add	r3, sp, #12
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4622      	mov	r2, r4
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <_svfiprintf_r+0x1ec>)
 800410c:	a904      	add	r1, sp, #16
 800410e:	4640      	mov	r0, r8
 8004110:	f3af 8000 	nop.w
 8004114:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004118:	4681      	mov	r9, r0
 800411a:	d1d6      	bne.n	80040ca <_svfiprintf_r+0x166>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	065b      	lsls	r3, r3, #25
 8004120:	f53f af35 	bmi.w	8003f8e <_svfiprintf_r+0x2a>
 8004124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004126:	b01d      	add	sp, #116	; 0x74
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4622      	mov	r2, r4
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <_svfiprintf_r+0x1ec>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4640      	mov	r0, r8
 8004138:	f000 f882 	bl	8004240 <_printf_i>
 800413c:	e7ea      	b.n	8004114 <_svfiprintf_r+0x1b0>
 800413e:	bf00      	nop
 8004140:	08006384 	.word	0x08006384
 8004144:	0800638a 	.word	0x0800638a
 8004148:	0800638e 	.word	0x0800638e
 800414c:	00000000 	.word	0x00000000
 8004150:	08003eb1 	.word	0x08003eb1

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4691      	mov	r9, r2
 800415a:	461f      	mov	r7, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	4606      	mov	r6, r0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfb8      	it	lt
 8004166:	4613      	movlt	r3, r2
 8004168:	f8c9 3000 	str.w	r3, [r9]
 800416c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004170:	460c      	mov	r4, r1
 8004172:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004176:	b112      	cbz	r2, 800417e <_printf_common+0x2a>
 8004178:	3301      	adds	r3, #1
 800417a:	f8c9 3000 	str.w	r3, [r9]
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0699      	lsls	r1, r3, #26
 8004182:	bf42      	ittt	mi
 8004184:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004188:	3302      	addmi	r3, #2
 800418a:	f8c9 3000 	strmi.w	r3, [r9]
 800418e:	6825      	ldr	r5, [r4, #0]
 8004190:	f015 0506 	ands.w	r5, r5, #6
 8004194:	d107      	bne.n	80041a6 <_printf_common+0x52>
 8004196:	f104 0a19 	add.w	sl, r4, #25
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	f8d9 2000 	ldr.w	r2, [r9]
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	42ab      	cmp	r3, r5
 80041a4:	dc29      	bgt.n	80041fa <_printf_common+0xa6>
 80041a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	3300      	adds	r3, #0
 80041ae:	bf18      	it	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	0692      	lsls	r2, r2, #26
 80041b4:	d42e      	bmi.n	8004214 <_printf_common+0xc0>
 80041b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ba:	4639      	mov	r1, r7
 80041bc:	4630      	mov	r0, r6
 80041be:	47c0      	blx	r8
 80041c0:	3001      	adds	r0, #1
 80041c2:	d021      	beq.n	8004208 <_printf_common+0xb4>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	68e5      	ldr	r5, [r4, #12]
 80041c8:	f003 0306 	and.w	r3, r3, #6
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	bf18      	it	ne
 80041d0:	2500      	movne	r5, #0
 80041d2:	f8d9 2000 	ldr.w	r2, [r9]
 80041d6:	f04f 0900 	mov.w	r9, #0
 80041da:	bf08      	it	eq
 80041dc:	1aad      	subeq	r5, r5, r2
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	6922      	ldr	r2, [r4, #16]
 80041e2:	bf08      	it	eq
 80041e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bfc4      	itt	gt
 80041ec:	1a9b      	subgt	r3, r3, r2
 80041ee:	18ed      	addgt	r5, r5, r3
 80041f0:	341a      	adds	r4, #26
 80041f2:	454d      	cmp	r5, r9
 80041f4:	d11a      	bne.n	800422c <_printf_common+0xd8>
 80041f6:	2000      	movs	r0, #0
 80041f8:	e008      	b.n	800420c <_printf_common+0xb8>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4639      	mov	r1, r7
 8004200:	4630      	mov	r0, r6
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d103      	bne.n	8004210 <_printf_common+0xbc>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	3501      	adds	r5, #1
 8004212:	e7c2      	b.n	800419a <_printf_common+0x46>
 8004214:	2030      	movs	r0, #48	; 0x30
 8004216:	18e1      	adds	r1, r4, r3
 8004218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004222:	4422      	add	r2, r4
 8004224:	3302      	adds	r3, #2
 8004226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800422a:	e7c4      	b.n	80041b6 <_printf_common+0x62>
 800422c:	2301      	movs	r3, #1
 800422e:	4622      	mov	r2, r4
 8004230:	4639      	mov	r1, r7
 8004232:	4630      	mov	r0, r6
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d0e6      	beq.n	8004208 <_printf_common+0xb4>
 800423a:	f109 0901 	add.w	r9, r9, #1
 800423e:	e7d8      	b.n	80041f2 <_printf_common+0x9e>

08004240 <_printf_i>:
 8004240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004244:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004248:	460c      	mov	r4, r1
 800424a:	7e09      	ldrb	r1, [r1, #24]
 800424c:	b085      	sub	sp, #20
 800424e:	296e      	cmp	r1, #110	; 0x6e
 8004250:	4617      	mov	r7, r2
 8004252:	4606      	mov	r6, r0
 8004254:	4698      	mov	r8, r3
 8004256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004258:	f000 80b3 	beq.w	80043c2 <_printf_i+0x182>
 800425c:	d822      	bhi.n	80042a4 <_printf_i+0x64>
 800425e:	2963      	cmp	r1, #99	; 0x63
 8004260:	d036      	beq.n	80042d0 <_printf_i+0x90>
 8004262:	d80a      	bhi.n	800427a <_printf_i+0x3a>
 8004264:	2900      	cmp	r1, #0
 8004266:	f000 80b9 	beq.w	80043dc <_printf_i+0x19c>
 800426a:	2958      	cmp	r1, #88	; 0x58
 800426c:	f000 8083 	beq.w	8004376 <_printf_i+0x136>
 8004270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004274:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004278:	e032      	b.n	80042e0 <_printf_i+0xa0>
 800427a:	2964      	cmp	r1, #100	; 0x64
 800427c:	d001      	beq.n	8004282 <_printf_i+0x42>
 800427e:	2969      	cmp	r1, #105	; 0x69
 8004280:	d1f6      	bne.n	8004270 <_printf_i+0x30>
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	6813      	ldr	r3, [r2, #0]
 8004286:	0605      	lsls	r5, r0, #24
 8004288:	f103 0104 	add.w	r1, r3, #4
 800428c:	d52a      	bpl.n	80042e4 <_printf_i+0xa4>
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da03      	bge.n	800429e <_printf_i+0x5e>
 8004296:	222d      	movs	r2, #45	; 0x2d
 8004298:	425b      	negs	r3, r3
 800429a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800429e:	486f      	ldr	r0, [pc, #444]	; (800445c <_printf_i+0x21c>)
 80042a0:	220a      	movs	r2, #10
 80042a2:	e039      	b.n	8004318 <_printf_i+0xd8>
 80042a4:	2973      	cmp	r1, #115	; 0x73
 80042a6:	f000 809d 	beq.w	80043e4 <_printf_i+0x1a4>
 80042aa:	d808      	bhi.n	80042be <_printf_i+0x7e>
 80042ac:	296f      	cmp	r1, #111	; 0x6f
 80042ae:	d020      	beq.n	80042f2 <_printf_i+0xb2>
 80042b0:	2970      	cmp	r1, #112	; 0x70
 80042b2:	d1dd      	bne.n	8004270 <_printf_i+0x30>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f043 0320 	orr.w	r3, r3, #32
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	e003      	b.n	80042c6 <_printf_i+0x86>
 80042be:	2975      	cmp	r1, #117	; 0x75
 80042c0:	d017      	beq.n	80042f2 <_printf_i+0xb2>
 80042c2:	2978      	cmp	r1, #120	; 0x78
 80042c4:	d1d4      	bne.n	8004270 <_printf_i+0x30>
 80042c6:	2378      	movs	r3, #120	; 0x78
 80042c8:	4865      	ldr	r0, [pc, #404]	; (8004460 <_printf_i+0x220>)
 80042ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ce:	e055      	b.n	800437c <_printf_i+0x13c>
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d6:	1d19      	adds	r1, r3, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6011      	str	r1, [r2, #0]
 80042dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e0:	2301      	movs	r3, #1
 80042e2:	e08c      	b.n	80043fe <_printf_i+0x1be>
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042ea:	6011      	str	r1, [r2, #0]
 80042ec:	bf18      	it	ne
 80042ee:	b21b      	sxthne	r3, r3
 80042f0:	e7cf      	b.n	8004292 <_printf_i+0x52>
 80042f2:	6813      	ldr	r3, [r2, #0]
 80042f4:	6825      	ldr	r5, [r4, #0]
 80042f6:	1d18      	adds	r0, r3, #4
 80042f8:	6010      	str	r0, [r2, #0]
 80042fa:	0628      	lsls	r0, r5, #24
 80042fc:	d501      	bpl.n	8004302 <_printf_i+0xc2>
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e002      	b.n	8004308 <_printf_i+0xc8>
 8004302:	0668      	lsls	r0, r5, #25
 8004304:	d5fb      	bpl.n	80042fe <_printf_i+0xbe>
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	296f      	cmp	r1, #111	; 0x6f
 800430a:	bf14      	ite	ne
 800430c:	220a      	movne	r2, #10
 800430e:	2208      	moveq	r2, #8
 8004310:	4852      	ldr	r0, [pc, #328]	; (800445c <_printf_i+0x21c>)
 8004312:	2100      	movs	r1, #0
 8004314:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004318:	6865      	ldr	r5, [r4, #4]
 800431a:	2d00      	cmp	r5, #0
 800431c:	60a5      	str	r5, [r4, #8]
 800431e:	f2c0 8095 	blt.w	800444c <_printf_i+0x20c>
 8004322:	6821      	ldr	r1, [r4, #0]
 8004324:	f021 0104 	bic.w	r1, r1, #4
 8004328:	6021      	str	r1, [r4, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d13d      	bne.n	80043aa <_printf_i+0x16a>
 800432e:	2d00      	cmp	r5, #0
 8004330:	f040 808e 	bne.w	8004450 <_printf_i+0x210>
 8004334:	4665      	mov	r5, ip
 8004336:	2a08      	cmp	r2, #8
 8004338:	d10b      	bne.n	8004352 <_printf_i+0x112>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	07db      	lsls	r3, r3, #31
 800433e:	d508      	bpl.n	8004352 <_printf_i+0x112>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	bfde      	ittt	le
 8004348:	2330      	movle	r3, #48	; 0x30
 800434a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800434e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004352:	ebac 0305 	sub.w	r3, ip, r5
 8004356:	6123      	str	r3, [r4, #16]
 8004358:	f8cd 8000 	str.w	r8, [sp]
 800435c:	463b      	mov	r3, r7
 800435e:	aa03      	add	r2, sp, #12
 8004360:	4621      	mov	r1, r4
 8004362:	4630      	mov	r0, r6
 8004364:	f7ff fef6 	bl	8004154 <_printf_common>
 8004368:	3001      	adds	r0, #1
 800436a:	d14d      	bne.n	8004408 <_printf_i+0x1c8>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	b005      	add	sp, #20
 8004372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004376:	4839      	ldr	r0, [pc, #228]	; (800445c <_printf_i+0x21c>)
 8004378:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	1d1d      	adds	r5, r3, #4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6015      	str	r5, [r2, #0]
 8004386:	060a      	lsls	r2, r1, #24
 8004388:	d50b      	bpl.n	80043a2 <_printf_i+0x162>
 800438a:	07ca      	lsls	r2, r1, #31
 800438c:	bf44      	itt	mi
 800438e:	f041 0120 	orrmi.w	r1, r1, #32
 8004392:	6021      	strmi	r1, [r4, #0]
 8004394:	b91b      	cbnz	r3, 800439e <_printf_i+0x15e>
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	f022 0220 	bic.w	r2, r2, #32
 800439c:	6022      	str	r2, [r4, #0]
 800439e:	2210      	movs	r2, #16
 80043a0:	e7b7      	b.n	8004312 <_printf_i+0xd2>
 80043a2:	064d      	lsls	r5, r1, #25
 80043a4:	bf48      	it	mi
 80043a6:	b29b      	uxthmi	r3, r3
 80043a8:	e7ef      	b.n	800438a <_printf_i+0x14a>
 80043aa:	4665      	mov	r5, ip
 80043ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80043b0:	fb02 3311 	mls	r3, r2, r1, r3
 80043b4:	5cc3      	ldrb	r3, [r0, r3]
 80043b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043ba:	460b      	mov	r3, r1
 80043bc:	2900      	cmp	r1, #0
 80043be:	d1f5      	bne.n	80043ac <_printf_i+0x16c>
 80043c0:	e7b9      	b.n	8004336 <_printf_i+0xf6>
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	6825      	ldr	r5, [r4, #0]
 80043c6:	1d18      	adds	r0, r3, #4
 80043c8:	6961      	ldr	r1, [r4, #20]
 80043ca:	6010      	str	r0, [r2, #0]
 80043cc:	0628      	lsls	r0, r5, #24
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	d501      	bpl.n	80043d6 <_printf_i+0x196>
 80043d2:	6019      	str	r1, [r3, #0]
 80043d4:	e002      	b.n	80043dc <_printf_i+0x19c>
 80043d6:	066a      	lsls	r2, r5, #25
 80043d8:	d5fb      	bpl.n	80043d2 <_printf_i+0x192>
 80043da:	8019      	strh	r1, [r3, #0]
 80043dc:	2300      	movs	r3, #0
 80043de:	4665      	mov	r5, ip
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	e7b9      	b.n	8004358 <_printf_i+0x118>
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	1d19      	adds	r1, r3, #4
 80043e8:	6011      	str	r1, [r2, #0]
 80043ea:	681d      	ldr	r5, [r3, #0]
 80043ec:	6862      	ldr	r2, [r4, #4]
 80043ee:	2100      	movs	r1, #0
 80043f0:	4628      	mov	r0, r5
 80043f2:	f000 fe99 	bl	8005128 <memchr>
 80043f6:	b108      	cbz	r0, 80043fc <_printf_i+0x1bc>
 80043f8:	1b40      	subs	r0, r0, r5
 80043fa:	6060      	str	r0, [r4, #4]
 80043fc:	6863      	ldr	r3, [r4, #4]
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	2300      	movs	r3, #0
 8004402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004406:	e7a7      	b.n	8004358 <_printf_i+0x118>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	462a      	mov	r2, r5
 800440c:	4639      	mov	r1, r7
 800440e:	4630      	mov	r0, r6
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d0aa      	beq.n	800436c <_printf_i+0x12c>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	079b      	lsls	r3, r3, #30
 800441a:	d413      	bmi.n	8004444 <_printf_i+0x204>
 800441c:	68e0      	ldr	r0, [r4, #12]
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	4298      	cmp	r0, r3
 8004422:	bfb8      	it	lt
 8004424:	4618      	movlt	r0, r3
 8004426:	e7a3      	b.n	8004370 <_printf_i+0x130>
 8004428:	2301      	movs	r3, #1
 800442a:	464a      	mov	r2, r9
 800442c:	4639      	mov	r1, r7
 800442e:	4630      	mov	r0, r6
 8004430:	47c0      	blx	r8
 8004432:	3001      	adds	r0, #1
 8004434:	d09a      	beq.n	800436c <_printf_i+0x12c>
 8004436:	3501      	adds	r5, #1
 8004438:	68e3      	ldr	r3, [r4, #12]
 800443a:	9a03      	ldr	r2, [sp, #12]
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	42ab      	cmp	r3, r5
 8004440:	dcf2      	bgt.n	8004428 <_printf_i+0x1e8>
 8004442:	e7eb      	b.n	800441c <_printf_i+0x1dc>
 8004444:	2500      	movs	r5, #0
 8004446:	f104 0919 	add.w	r9, r4, #25
 800444a:	e7f5      	b.n	8004438 <_printf_i+0x1f8>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ac      	bne.n	80043aa <_printf_i+0x16a>
 8004450:	7803      	ldrb	r3, [r0, #0]
 8004452:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445a:	e76c      	b.n	8004336 <_printf_i+0xf6>
 800445c:	08006395 	.word	0x08006395
 8004460:	080063a6 	.word	0x080063a6

08004464 <_sbrk_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	2300      	movs	r3, #0
 8004468:	4c05      	ldr	r4, [pc, #20]	; (8004480 <_sbrk_r+0x1c>)
 800446a:	4605      	mov	r5, r0
 800446c:	4608      	mov	r0, r1
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	f7fe ff5a 	bl	8003328 <_sbrk>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_sbrk_r+0x1a>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	b103      	cbz	r3, 800447e <_sbrk_r+0x1a>
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	2000017c 	.word	0x2000017c

08004484 <strcpy>:
 8004484:	4603      	mov	r3, r0
 8004486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448a:	f803 2b01 	strb.w	r2, [r3], #1
 800448e:	2a00      	cmp	r2, #0
 8004490:	d1f9      	bne.n	8004486 <strcpy+0x2>
 8004492:	4770      	bx	lr

08004494 <quorem>:
 8004494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	6903      	ldr	r3, [r0, #16]
 800449a:	690c      	ldr	r4, [r1, #16]
 800449c:	4680      	mov	r8, r0
 800449e:	42a3      	cmp	r3, r4
 80044a0:	f2c0 8084 	blt.w	80045ac <quorem+0x118>
 80044a4:	3c01      	subs	r4, #1
 80044a6:	f101 0714 	add.w	r7, r1, #20
 80044aa:	f100 0614 	add.w	r6, r0, #20
 80044ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80044b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80044b6:	3501      	adds	r5, #1
 80044b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80044bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80044c0:	eb06 030c 	add.w	r3, r6, ip
 80044c4:	eb07 090c 	add.w	r9, r7, ip
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	b39d      	cbz	r5, 8004534 <quorem+0xa0>
 80044cc:	f04f 0a00 	mov.w	sl, #0
 80044d0:	4638      	mov	r0, r7
 80044d2:	46b6      	mov	lr, r6
 80044d4:	46d3      	mov	fp, sl
 80044d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80044da:	b293      	uxth	r3, r2
 80044dc:	fb05 a303 	mla	r3, r5, r3, sl
 80044e0:	0c12      	lsrs	r2, r2, #16
 80044e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044e6:	fb05 a202 	mla	r2, r5, r2, sl
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ebab 0303 	sub.w	r3, fp, r3
 80044f0:	f8de b000 	ldr.w	fp, [lr]
 80044f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80044f8:	fa1f fb8b 	uxth.w	fp, fp
 80044fc:	445b      	add	r3, fp
 80044fe:	fa1f fb82 	uxth.w	fp, r2
 8004502:	f8de 2000 	ldr.w	r2, [lr]
 8004506:	4581      	cmp	r9, r0
 8004508:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800450c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004510:	b29b      	uxth	r3, r3
 8004512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004516:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800451a:	f84e 3b04 	str.w	r3, [lr], #4
 800451e:	d2da      	bcs.n	80044d6 <quorem+0x42>
 8004520:	f856 300c 	ldr.w	r3, [r6, ip]
 8004524:	b933      	cbnz	r3, 8004534 <quorem+0xa0>
 8004526:	9b01      	ldr	r3, [sp, #4]
 8004528:	3b04      	subs	r3, #4
 800452a:	429e      	cmp	r6, r3
 800452c:	461a      	mov	r2, r3
 800452e:	d331      	bcc.n	8004594 <quorem+0x100>
 8004530:	f8c8 4010 	str.w	r4, [r8, #16]
 8004534:	4640      	mov	r0, r8
 8004536:	f7ff fb49 	bl	8003bcc <__mcmp>
 800453a:	2800      	cmp	r0, #0
 800453c:	db26      	blt.n	800458c <quorem+0xf8>
 800453e:	4630      	mov	r0, r6
 8004540:	f04f 0c00 	mov.w	ip, #0
 8004544:	3501      	adds	r5, #1
 8004546:	f857 1b04 	ldr.w	r1, [r7], #4
 800454a:	f8d0 e000 	ldr.w	lr, [r0]
 800454e:	b28b      	uxth	r3, r1
 8004550:	ebac 0303 	sub.w	r3, ip, r3
 8004554:	fa1f f28e 	uxth.w	r2, lr
 8004558:	4413      	add	r3, r2
 800455a:	0c0a      	lsrs	r2, r1, #16
 800455c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004564:	b29b      	uxth	r3, r3
 8004566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800456a:	45b9      	cmp	r9, r7
 800456c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004570:	f840 3b04 	str.w	r3, [r0], #4
 8004574:	d2e7      	bcs.n	8004546 <quorem+0xb2>
 8004576:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800457a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800457e:	b92a      	cbnz	r2, 800458c <quorem+0xf8>
 8004580:	3b04      	subs	r3, #4
 8004582:	429e      	cmp	r6, r3
 8004584:	461a      	mov	r2, r3
 8004586:	d30b      	bcc.n	80045a0 <quorem+0x10c>
 8004588:	f8c8 4010 	str.w	r4, [r8, #16]
 800458c:	4628      	mov	r0, r5
 800458e:	b003      	add	sp, #12
 8004590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	3b04      	subs	r3, #4
 8004598:	2a00      	cmp	r2, #0
 800459a:	d1c9      	bne.n	8004530 <quorem+0x9c>
 800459c:	3c01      	subs	r4, #1
 800459e:	e7c4      	b.n	800452a <quorem+0x96>
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	3b04      	subs	r3, #4
 80045a4:	2a00      	cmp	r2, #0
 80045a6:	d1ef      	bne.n	8004588 <quorem+0xf4>
 80045a8:	3c01      	subs	r4, #1
 80045aa:	e7ea      	b.n	8004582 <quorem+0xee>
 80045ac:	2000      	movs	r0, #0
 80045ae:	e7ee      	b.n	800458e <quorem+0xfa>

080045b0 <_dtoa_r>:
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	4616      	mov	r6, r2
 80045b6:	461f      	mov	r7, r3
 80045b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80045ba:	b095      	sub	sp, #84	; 0x54
 80045bc:	4604      	mov	r4, r0
 80045be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80045c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80045c6:	b93d      	cbnz	r5, 80045d8 <_dtoa_r+0x28>
 80045c8:	2010      	movs	r0, #16
 80045ca:	f000 fda5 	bl	8005118 <malloc>
 80045ce:	6260      	str	r0, [r4, #36]	; 0x24
 80045d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045d4:	6005      	str	r5, [r0, #0]
 80045d6:	60c5      	str	r5, [r0, #12]
 80045d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	b151      	cbz	r1, 80045f4 <_dtoa_r+0x44>
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	2301      	movs	r3, #1
 80045e2:	4093      	lsls	r3, r2
 80045e4:	604a      	str	r2, [r1, #4]
 80045e6:	608b      	str	r3, [r1, #8]
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff f90f 	bl	800380c <_Bfree>
 80045ee:	2200      	movs	r2, #0
 80045f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	1e3b      	subs	r3, r7, #0
 80045f6:	bfaf      	iteee	ge
 80045f8:	2300      	movge	r3, #0
 80045fa:	2201      	movlt	r2, #1
 80045fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004600:	9303      	strlt	r3, [sp, #12]
 8004602:	bfac      	ite	ge
 8004604:	f8c8 3000 	strge.w	r3, [r8]
 8004608:	f8c8 2000 	strlt.w	r2, [r8]
 800460c:	4bae      	ldr	r3, [pc, #696]	; (80048c8 <_dtoa_r+0x318>)
 800460e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004612:	ea33 0308 	bics.w	r3, r3, r8
 8004616:	d11b      	bne.n	8004650 <_dtoa_r+0xa0>
 8004618:	f242 730f 	movw	r3, #9999	; 0x270f
 800461c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	9b02      	ldr	r3, [sp, #8]
 8004622:	b923      	cbnz	r3, 800462e <_dtoa_r+0x7e>
 8004624:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004628:	2800      	cmp	r0, #0
 800462a:	f000 8545 	beq.w	80050b8 <_dtoa_r+0xb08>
 800462e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004630:	b953      	cbnz	r3, 8004648 <_dtoa_r+0x98>
 8004632:	4ba6      	ldr	r3, [pc, #664]	; (80048cc <_dtoa_r+0x31c>)
 8004634:	e021      	b.n	800467a <_dtoa_r+0xca>
 8004636:	4ba6      	ldr	r3, [pc, #664]	; (80048d0 <_dtoa_r+0x320>)
 8004638:	9306      	str	r3, [sp, #24]
 800463a:	3308      	adds	r3, #8
 800463c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	9806      	ldr	r0, [sp, #24]
 8004642:	b015      	add	sp, #84	; 0x54
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	4ba0      	ldr	r3, [pc, #640]	; (80048cc <_dtoa_r+0x31c>)
 800464a:	9306      	str	r3, [sp, #24]
 800464c:	3303      	adds	r3, #3
 800464e:	e7f5      	b.n	800463c <_dtoa_r+0x8c>
 8004650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	4630      	mov	r0, r6
 800465a:	4639      	mov	r1, r7
 800465c:	f7fc f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8004660:	4682      	mov	sl, r0
 8004662:	b160      	cbz	r0, 800467e <_dtoa_r+0xce>
 8004664:	2301      	movs	r3, #1
 8004666:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8520 	beq.w	80050b2 <_dtoa_r+0xb02>
 8004672:	4b98      	ldr	r3, [pc, #608]	; (80048d4 <_dtoa_r+0x324>)
 8004674:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	3b01      	subs	r3, #1
 800467a:	9306      	str	r3, [sp, #24]
 800467c:	e7e0      	b.n	8004640 <_dtoa_r+0x90>
 800467e:	ab12      	add	r3, sp, #72	; 0x48
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	ab13      	add	r3, sp, #76	; 0x4c
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	4632      	mov	r2, r6
 8004688:	463b      	mov	r3, r7
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff fb16 	bl	8003cbc <__d2b>
 8004690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004694:	4683      	mov	fp, r0
 8004696:	2d00      	cmp	r5, #0
 8004698:	d07d      	beq.n	8004796 <_dtoa_r+0x1e6>
 800469a:	46b0      	mov	r8, r6
 800469c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80046a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80046a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80046a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80046ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80046b0:	2200      	movs	r2, #0
 80046b2:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <_dtoa_r+0x328>)
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fb fd56 	bl	8000168 <__aeabi_dsub>
 80046bc:	a37c      	add	r3, pc, #496	; (adr r3, 80048b0 <_dtoa_r+0x300>)
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f7fb ff09 	bl	80004d8 <__aeabi_dmul>
 80046c6:	a37c      	add	r3, pc, #496	; (adr r3, 80048b8 <_dtoa_r+0x308>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb fd4e 	bl	800016c <__adddf3>
 80046d0:	4606      	mov	r6, r0
 80046d2:	4628      	mov	r0, r5
 80046d4:	460f      	mov	r7, r1
 80046d6:	f7fb fe95 	bl	8000404 <__aeabi_i2d>
 80046da:	a379      	add	r3, pc, #484	; (adr r3, 80048c0 <_dtoa_r+0x310>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb fefa 	bl	80004d8 <__aeabi_dmul>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4630      	mov	r0, r6
 80046ea:	4639      	mov	r1, r7
 80046ec:	f7fb fd3e 	bl	800016c <__adddf3>
 80046f0:	4606      	mov	r6, r0
 80046f2:	460f      	mov	r7, r1
 80046f4:	f7fc f98a 	bl	8000a0c <__aeabi_d2iz>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4682      	mov	sl, r0
 80046fc:	2300      	movs	r3, #0
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fc f95b 	bl	80009bc <__aeabi_dcmplt>
 8004706:	b148      	cbz	r0, 800471c <_dtoa_r+0x16c>
 8004708:	4650      	mov	r0, sl
 800470a:	f7fb fe7b 	bl	8000404 <__aeabi_i2d>
 800470e:	4632      	mov	r2, r6
 8004710:	463b      	mov	r3, r7
 8004712:	f7fc f949 	bl	80009a8 <__aeabi_dcmpeq>
 8004716:	b908      	cbnz	r0, 800471c <_dtoa_r+0x16c>
 8004718:	f10a 3aff 	add.w	sl, sl, #4294967295
 800471c:	f1ba 0f16 	cmp.w	sl, #22
 8004720:	d85a      	bhi.n	80047d8 <_dtoa_r+0x228>
 8004722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004726:	496d      	ldr	r1, [pc, #436]	; (80048dc <_dtoa_r+0x32c>)
 8004728:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800472c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004730:	f7fc f962 	bl	80009f8 <__aeabi_dcmpgt>
 8004734:	2800      	cmp	r0, #0
 8004736:	d051      	beq.n	80047dc <_dtoa_r+0x22c>
 8004738:	2300      	movs	r3, #0
 800473a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800473e:	930d      	str	r3, [sp, #52]	; 0x34
 8004740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004742:	1b5d      	subs	r5, r3, r5
 8004744:	1e6b      	subs	r3, r5, #1
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	bf43      	ittte	mi
 800474a:	2300      	movmi	r3, #0
 800474c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004750:	9307      	strmi	r3, [sp, #28]
 8004752:	f04f 0900 	movpl.w	r9, #0
 8004756:	f1ba 0f00 	cmp.w	sl, #0
 800475a:	db41      	blt.n	80047e0 <_dtoa_r+0x230>
 800475c:	9b07      	ldr	r3, [sp, #28]
 800475e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004762:	4453      	add	r3, sl
 8004764:	9307      	str	r3, [sp, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	9308      	str	r3, [sp, #32]
 800476a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800476c:	2b09      	cmp	r3, #9
 800476e:	f200 808f 	bhi.w	8004890 <_dtoa_r+0x2e0>
 8004772:	2b05      	cmp	r3, #5
 8004774:	bfc4      	itt	gt
 8004776:	3b04      	subgt	r3, #4
 8004778:	931e      	strgt	r3, [sp, #120]	; 0x78
 800477a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800477c:	bfc8      	it	gt
 800477e:	2500      	movgt	r5, #0
 8004780:	f1a3 0302 	sub.w	r3, r3, #2
 8004784:	bfd8      	it	le
 8004786:	2501      	movle	r5, #1
 8004788:	2b03      	cmp	r3, #3
 800478a:	f200 808d 	bhi.w	80048a8 <_dtoa_r+0x2f8>
 800478e:	e8df f003 	tbb	[pc, r3]
 8004792:	7d7b      	.short	0x7d7b
 8004794:	6f2f      	.short	0x6f2f
 8004796:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800479a:	441d      	add	r5, r3
 800479c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80047a0:	2820      	cmp	r0, #32
 80047a2:	dd13      	ble.n	80047cc <_dtoa_r+0x21c>
 80047a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80047a8:	9b02      	ldr	r3, [sp, #8]
 80047aa:	fa08 f800 	lsl.w	r8, r8, r0
 80047ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80047b2:	fa23 f000 	lsr.w	r0, r3, r0
 80047b6:	ea48 0000 	orr.w	r0, r8, r0
 80047ba:	f7fb fe13 	bl	80003e4 <__aeabi_ui2d>
 80047be:	2301      	movs	r3, #1
 80047c0:	4680      	mov	r8, r0
 80047c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80047c6:	3d01      	subs	r5, #1
 80047c8:	9310      	str	r3, [sp, #64]	; 0x40
 80047ca:	e771      	b.n	80046b0 <_dtoa_r+0x100>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	f1c0 0020 	rsb	r0, r0, #32
 80047d2:	fa03 f000 	lsl.w	r0, r3, r0
 80047d6:	e7f0      	b.n	80047ba <_dtoa_r+0x20a>
 80047d8:	2301      	movs	r3, #1
 80047da:	e7b0      	b.n	800473e <_dtoa_r+0x18e>
 80047dc:	900d      	str	r0, [sp, #52]	; 0x34
 80047de:	e7af      	b.n	8004740 <_dtoa_r+0x190>
 80047e0:	f1ca 0300 	rsb	r3, sl, #0
 80047e4:	9308      	str	r3, [sp, #32]
 80047e6:	2300      	movs	r3, #0
 80047e8:	eba9 090a 	sub.w	r9, r9, sl
 80047ec:	930c      	str	r3, [sp, #48]	; 0x30
 80047ee:	e7bc      	b.n	800476a <_dtoa_r+0x1ba>
 80047f0:	2301      	movs	r3, #1
 80047f2:	9309      	str	r3, [sp, #36]	; 0x24
 80047f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dd74      	ble.n	80048e4 <_dtoa_r+0x334>
 80047fa:	4698      	mov	r8, r3
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	2200      	movs	r2, #0
 8004800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004802:	6072      	str	r2, [r6, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	f102 0014 	add.w	r0, r2, #20
 800480a:	4298      	cmp	r0, r3
 800480c:	6871      	ldr	r1, [r6, #4]
 800480e:	d96e      	bls.n	80048ee <_dtoa_r+0x33e>
 8004810:	4620      	mov	r0, r4
 8004812:	f7fe ffc7 	bl	80037a4 <_Balloc>
 8004816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004818:	6030      	str	r0, [r6, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b8 0f0e 	cmp.w	r8, #14
 8004820:	9306      	str	r3, [sp, #24]
 8004822:	f200 80ed 	bhi.w	8004a00 <_dtoa_r+0x450>
 8004826:	2d00      	cmp	r5, #0
 8004828:	f000 80ea 	beq.w	8004a00 <_dtoa_r+0x450>
 800482c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004830:	f1ba 0f00 	cmp.w	sl, #0
 8004834:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004838:	dd77      	ble.n	800492a <_dtoa_r+0x37a>
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <_dtoa_r+0x32c>)
 800483c:	f00a 030f 	and.w	r3, sl, #15
 8004840:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004844:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004848:	06f0      	lsls	r0, r6, #27
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004852:	d568      	bpl.n	8004926 <_dtoa_r+0x376>
 8004854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <_dtoa_r+0x330>)
 800485a:	2503      	movs	r5, #3
 800485c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004860:	f7fb ff64 	bl	800072c <__aeabi_ddiv>
 8004864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004868:	f006 060f 	and.w	r6, r6, #15
 800486c:	4f1c      	ldr	r7, [pc, #112]	; (80048e0 <_dtoa_r+0x330>)
 800486e:	e04f      	b.n	8004910 <_dtoa_r+0x360>
 8004870:	2301      	movs	r3, #1
 8004872:	9309      	str	r3, [sp, #36]	; 0x24
 8004874:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004876:	4453      	add	r3, sl
 8004878:	f103 0801 	add.w	r8, r3, #1
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	4643      	mov	r3, r8
 8004880:	2b01      	cmp	r3, #1
 8004882:	bfb8      	it	lt
 8004884:	2301      	movlt	r3, #1
 8004886:	e7ba      	b.n	80047fe <_dtoa_r+0x24e>
 8004888:	2300      	movs	r3, #0
 800488a:	e7b2      	b.n	80047f2 <_dtoa_r+0x242>
 800488c:	2300      	movs	r3, #0
 800488e:	e7f0      	b.n	8004872 <_dtoa_r+0x2c2>
 8004890:	2501      	movs	r5, #1
 8004892:	2300      	movs	r3, #0
 8004894:	9509      	str	r5, [sp, #36]	; 0x24
 8004896:	931e      	str	r3, [sp, #120]	; 0x78
 8004898:	f04f 33ff 	mov.w	r3, #4294967295
 800489c:	2200      	movs	r2, #0
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	4698      	mov	r8, r3
 80048a2:	2312      	movs	r3, #18
 80048a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80048a6:	e7aa      	b.n	80047fe <_dtoa_r+0x24e>
 80048a8:	2301      	movs	r3, #1
 80048aa:	9309      	str	r3, [sp, #36]	; 0x24
 80048ac:	e7f4      	b.n	8004898 <_dtoa_r+0x2e8>
 80048ae:	bf00      	nop
 80048b0:	636f4361 	.word	0x636f4361
 80048b4:	3fd287a7 	.word	0x3fd287a7
 80048b8:	8b60c8b3 	.word	0x8b60c8b3
 80048bc:	3fc68a28 	.word	0x3fc68a28
 80048c0:	509f79fb 	.word	0x509f79fb
 80048c4:	3fd34413 	.word	0x3fd34413
 80048c8:	7ff00000 	.word	0x7ff00000
 80048cc:	080063c0 	.word	0x080063c0
 80048d0:	080063b7 	.word	0x080063b7
 80048d4:	080063c5 	.word	0x080063c5
 80048d8:	3ff80000 	.word	0x3ff80000
 80048dc:	080062b0 	.word	0x080062b0
 80048e0:	08006288 	.word	0x08006288
 80048e4:	2301      	movs	r3, #1
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	4698      	mov	r8, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	e7da      	b.n	80048a4 <_dtoa_r+0x2f4>
 80048ee:	3101      	adds	r1, #1
 80048f0:	6071      	str	r1, [r6, #4]
 80048f2:	0052      	lsls	r2, r2, #1
 80048f4:	e787      	b.n	8004806 <_dtoa_r+0x256>
 80048f6:	07f1      	lsls	r1, r6, #31
 80048f8:	d508      	bpl.n	800490c <_dtoa_r+0x35c>
 80048fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004902:	f7fb fde9 	bl	80004d8 <__aeabi_dmul>
 8004906:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800490a:	3501      	adds	r5, #1
 800490c:	1076      	asrs	r6, r6, #1
 800490e:	3708      	adds	r7, #8
 8004910:	2e00      	cmp	r6, #0
 8004912:	d1f0      	bne.n	80048f6 <_dtoa_r+0x346>
 8004914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800491c:	f7fb ff06 	bl	800072c <__aeabi_ddiv>
 8004920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004924:	e01b      	b.n	800495e <_dtoa_r+0x3ae>
 8004926:	2502      	movs	r5, #2
 8004928:	e7a0      	b.n	800486c <_dtoa_r+0x2bc>
 800492a:	f000 80a4 	beq.w	8004a76 <_dtoa_r+0x4c6>
 800492e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004932:	f1ca 0600 	rsb	r6, sl, #0
 8004936:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <_dtoa_r+0x608>)
 8004938:	f006 020f 	and.w	r2, r6, #15
 800493c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	2502      	movs	r5, #2
 800494a:	2300      	movs	r3, #0
 800494c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004950:	4f9a      	ldr	r7, [pc, #616]	; (8004bbc <_dtoa_r+0x60c>)
 8004952:	1136      	asrs	r6, r6, #4
 8004954:	2e00      	cmp	r6, #0
 8004956:	f040 8083 	bne.w	8004a60 <_dtoa_r+0x4b0>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e0      	bne.n	8004920 <_dtoa_r+0x370>
 800495e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 808a 	beq.w	8004a7a <_dtoa_r+0x4ca>
 8004966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800496a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800496e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004972:	2200      	movs	r2, #0
 8004974:	4b92      	ldr	r3, [pc, #584]	; (8004bc0 <_dtoa_r+0x610>)
 8004976:	f7fc f821 	bl	80009bc <__aeabi_dcmplt>
 800497a:	2800      	cmp	r0, #0
 800497c:	d07d      	beq.n	8004a7a <_dtoa_r+0x4ca>
 800497e:	f1b8 0f00 	cmp.w	r8, #0
 8004982:	d07a      	beq.n	8004a7a <_dtoa_r+0x4ca>
 8004984:	9b04      	ldr	r3, [sp, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd36      	ble.n	80049f8 <_dtoa_r+0x448>
 800498a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800498e:	2200      	movs	r2, #0
 8004990:	4b8c      	ldr	r3, [pc, #560]	; (8004bc4 <_dtoa_r+0x614>)
 8004992:	f7fb fda1 	bl	80004d8 <__aeabi_dmul>
 8004996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800499a:	9e04      	ldr	r6, [sp, #16]
 800499c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80049a0:	3501      	adds	r5, #1
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fb fd2e 	bl	8000404 <__aeabi_i2d>
 80049a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049ac:	f7fb fd94 	bl	80004d8 <__aeabi_dmul>
 80049b0:	2200      	movs	r2, #0
 80049b2:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <_dtoa_r+0x618>)
 80049b4:	f7fb fbda 	bl	800016c <__adddf3>
 80049b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80049bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d15c      	bne.n	8004a80 <_dtoa_r+0x4d0>
 80049c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	4b7f      	ldr	r3, [pc, #508]	; (8004bcc <_dtoa_r+0x61c>)
 80049ce:	f7fb fbcb 	bl	8000168 <__aeabi_dsub>
 80049d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049d4:	462b      	mov	r3, r5
 80049d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049da:	f7fc f80d 	bl	80009f8 <__aeabi_dcmpgt>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f040 8281 	bne.w	8004ee6 <_dtoa_r+0x936>
 80049e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80049ee:	f7fb ffe5 	bl	80009bc <__aeabi_dcmplt>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	f040 8275 	bne.w	8004ee2 <_dtoa_r+0x932>
 80049f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80049fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f2c0 814b 	blt.w	8004c9e <_dtoa_r+0x6ee>
 8004a08:	f1ba 0f0e 	cmp.w	sl, #14
 8004a0c:	f300 8147 	bgt.w	8004c9e <_dtoa_r+0x6ee>
 8004a10:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <_dtoa_r+0x608>)
 8004a12:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f280 80d7 	bge.w	8004bd4 <_dtoa_r+0x624>
 8004a26:	f1b8 0f00 	cmp.w	r8, #0
 8004a2a:	f300 80d3 	bgt.w	8004bd4 <_dtoa_r+0x624>
 8004a2e:	f040 8257 	bne.w	8004ee0 <_dtoa_r+0x930>
 8004a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a36:	2200      	movs	r2, #0
 8004a38:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <_dtoa_r+0x61c>)
 8004a3a:	f7fb fd4d 	bl	80004d8 <__aeabi_dmul>
 8004a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a42:	f7fb ffcf 	bl	80009e4 <__aeabi_dcmpge>
 8004a46:	4646      	mov	r6, r8
 8004a48:	4647      	mov	r7, r8
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f040 822d 	bne.w	8004eaa <_dtoa_r+0x8fa>
 8004a50:	9b06      	ldr	r3, [sp, #24]
 8004a52:	9a06      	ldr	r2, [sp, #24]
 8004a54:	1c5d      	adds	r5, r3, #1
 8004a56:	2331      	movs	r3, #49	; 0x31
 8004a58:	f10a 0a01 	add.w	sl, sl, #1
 8004a5c:	7013      	strb	r3, [r2, #0]
 8004a5e:	e228      	b.n	8004eb2 <_dtoa_r+0x902>
 8004a60:	07f2      	lsls	r2, r6, #31
 8004a62:	d505      	bpl.n	8004a70 <_dtoa_r+0x4c0>
 8004a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a68:	f7fb fd36 	bl	80004d8 <__aeabi_dmul>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	3501      	adds	r5, #1
 8004a70:	1076      	asrs	r6, r6, #1
 8004a72:	3708      	adds	r7, #8
 8004a74:	e76e      	b.n	8004954 <_dtoa_r+0x3a4>
 8004a76:	2502      	movs	r5, #2
 8004a78:	e771      	b.n	800495e <_dtoa_r+0x3ae>
 8004a7a:	4657      	mov	r7, sl
 8004a7c:	4646      	mov	r6, r8
 8004a7e:	e790      	b.n	80049a2 <_dtoa_r+0x3f2>
 8004a80:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <_dtoa_r+0x608>)
 8004a82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d048      	beq.n	8004b22 <_dtoa_r+0x572>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	2000      	movs	r0, #0
 8004a96:	494e      	ldr	r1, [pc, #312]	; (8004bd0 <_dtoa_r+0x620>)
 8004a98:	f7fb fe48 	bl	800072c <__aeabi_ddiv>
 8004a9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004aa0:	f7fb fb62 	bl	8000168 <__aeabi_dsub>
 8004aa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004aa8:	9d06      	ldr	r5, [sp, #24]
 8004aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aae:	f7fb ffad 	bl	8000a0c <__aeabi_d2iz>
 8004ab2:	9011      	str	r0, [sp, #68]	; 0x44
 8004ab4:	f7fb fca6 	bl	8000404 <__aeabi_i2d>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac0:	f7fb fb52 	bl	8000168 <__aeabi_dsub>
 8004ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aca:	3330      	adds	r3, #48	; 0x30
 8004acc:	f805 3b01 	strb.w	r3, [r5], #1
 8004ad0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ad4:	f7fb ff72 	bl	80009bc <__aeabi_dcmplt>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d163      	bne.n	8004ba4 <_dtoa_r+0x5f4>
 8004adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	4937      	ldr	r1, [pc, #220]	; (8004bc0 <_dtoa_r+0x610>)
 8004ae4:	f7fb fb40 	bl	8000168 <__aeabi_dsub>
 8004ae8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004aec:	f7fb ff66 	bl	80009bc <__aeabi_dcmplt>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	f040 80b5 	bne.w	8004c60 <_dtoa_r+0x6b0>
 8004af6:	9b06      	ldr	r3, [sp, #24]
 8004af8:	1aeb      	subs	r3, r5, r3
 8004afa:	429e      	cmp	r6, r3
 8004afc:	f77f af7c 	ble.w	80049f8 <_dtoa_r+0x448>
 8004b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b04:	2200      	movs	r2, #0
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <_dtoa_r+0x614>)
 8004b08:	f7fb fce6 	bl	80004d8 <__aeabi_dmul>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <_dtoa_r+0x614>)
 8004b18:	f7fb fcde 	bl	80004d8 <__aeabi_dmul>
 8004b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b20:	e7c3      	b.n	8004aaa <_dtoa_r+0x4fa>
 8004b22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b26:	f7fb fcd7 	bl	80004d8 <__aeabi_dmul>
 8004b2a:	9b06      	ldr	r3, [sp, #24]
 8004b2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b30:	199d      	adds	r5, r3, r6
 8004b32:	461e      	mov	r6, r3
 8004b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b38:	f7fb ff68 	bl	8000a0c <__aeabi_d2iz>
 8004b3c:	9011      	str	r0, [sp, #68]	; 0x44
 8004b3e:	f7fb fc61 	bl	8000404 <__aeabi_i2d>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b4a:	f7fb fb0d 	bl	8000168 <__aeabi_dsub>
 8004b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b54:	3330      	adds	r3, #48	; 0x30
 8004b56:	f806 3b01 	strb.w	r3, [r6], #1
 8004b5a:	42ae      	cmp	r6, r5
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	d124      	bne.n	8004bac <_dtoa_r+0x5fc>
 8004b62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <_dtoa_r+0x620>)
 8004b68:	f7fb fb00 	bl	800016c <__adddf3>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb ff40 	bl	80009f8 <__aeabi_dcmpgt>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d171      	bne.n	8004c60 <_dtoa_r+0x6b0>
 8004b7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b80:	2000      	movs	r0, #0
 8004b82:	4913      	ldr	r1, [pc, #76]	; (8004bd0 <_dtoa_r+0x620>)
 8004b84:	f7fb faf0 	bl	8000168 <__aeabi_dsub>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b90:	f7fb ff14 	bl	80009bc <__aeabi_dcmplt>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f43f af2f 	beq.w	80049f8 <_dtoa_r+0x448>
 8004b9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b9e:	1e6a      	subs	r2, r5, #1
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d001      	beq.n	8004ba8 <_dtoa_r+0x5f8>
 8004ba4:	46ba      	mov	sl, r7
 8004ba6:	e04a      	b.n	8004c3e <_dtoa_r+0x68e>
 8004ba8:	4615      	mov	r5, r2
 8004baa:	e7f6      	b.n	8004b9a <_dtoa_r+0x5ea>
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <_dtoa_r+0x614>)
 8004bae:	f7fb fc93 	bl	80004d8 <__aeabi_dmul>
 8004bb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bb6:	e7bd      	b.n	8004b34 <_dtoa_r+0x584>
 8004bb8:	080062b0 	.word	0x080062b0
 8004bbc:	08006288 	.word	0x08006288
 8004bc0:	3ff00000 	.word	0x3ff00000
 8004bc4:	40240000 	.word	0x40240000
 8004bc8:	401c0000 	.word	0x401c0000
 8004bcc:	40140000 	.word	0x40140000
 8004bd0:	3fe00000 	.word	0x3fe00000
 8004bd4:	9d06      	ldr	r5, [sp, #24]
 8004bd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb fda3 	bl	800072c <__aeabi_ddiv>
 8004be6:	f7fb ff11 	bl	8000a0c <__aeabi_d2iz>
 8004bea:	4681      	mov	r9, r0
 8004bec:	f7fb fc0a 	bl	8000404 <__aeabi_i2d>
 8004bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf4:	f7fb fc70 	bl	80004d8 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f7fb fab2 	bl	8000168 <__aeabi_dsub>
 8004c04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004c08:	f805 6b01 	strb.w	r6, [r5], #1
 8004c0c:	9e06      	ldr	r6, [sp, #24]
 8004c0e:	4602      	mov	r2, r0
 8004c10:	1bae      	subs	r6, r5, r6
 8004c12:	45b0      	cmp	r8, r6
 8004c14:	460b      	mov	r3, r1
 8004c16:	d135      	bne.n	8004c84 <_dtoa_r+0x6d4>
 8004c18:	f7fb faa8 	bl	800016c <__adddf3>
 8004c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c20:	4606      	mov	r6, r0
 8004c22:	460f      	mov	r7, r1
 8004c24:	f7fb fee8 	bl	80009f8 <__aeabi_dcmpgt>
 8004c28:	b9c8      	cbnz	r0, 8004c5e <_dtoa_r+0x6ae>
 8004c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2e:	4630      	mov	r0, r6
 8004c30:	4639      	mov	r1, r7
 8004c32:	f7fb feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8004c36:	b110      	cbz	r0, 8004c3e <_dtoa_r+0x68e>
 8004c38:	f019 0f01 	tst.w	r9, #1
 8004c3c:	d10f      	bne.n	8004c5e <_dtoa_r+0x6ae>
 8004c3e:	4659      	mov	r1, fp
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7fe fde3 	bl	800380c <_Bfree>
 8004c46:	2300      	movs	r3, #0
 8004c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c4a:	702b      	strb	r3, [r5, #0]
 8004c4c:	f10a 0301 	add.w	r3, sl, #1
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f43f acf3 	beq.w	8004640 <_dtoa_r+0x90>
 8004c5a:	601d      	str	r5, [r3, #0]
 8004c5c:	e4f0      	b.n	8004640 <_dtoa_r+0x90>
 8004c5e:	4657      	mov	r7, sl
 8004c60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c64:	1e6b      	subs	r3, r5, #1
 8004c66:	2a39      	cmp	r2, #57	; 0x39
 8004c68:	d106      	bne.n	8004c78 <_dtoa_r+0x6c8>
 8004c6a:	9a06      	ldr	r2, [sp, #24]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d107      	bne.n	8004c80 <_dtoa_r+0x6d0>
 8004c70:	2330      	movs	r3, #48	; 0x30
 8004c72:	7013      	strb	r3, [r2, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	3701      	adds	r7, #1
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e791      	b.n	8004ba4 <_dtoa_r+0x5f4>
 8004c80:	461d      	mov	r5, r3
 8004c82:	e7ed      	b.n	8004c60 <_dtoa_r+0x6b0>
 8004c84:	2200      	movs	r2, #0
 8004c86:	4b99      	ldr	r3, [pc, #612]	; (8004eec <_dtoa_r+0x93c>)
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	f7fb fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d09e      	beq.n	8004bda <_dtoa_r+0x62a>
 8004c9c:	e7cf      	b.n	8004c3e <_dtoa_r+0x68e>
 8004c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	f000 8088 	beq.w	8004db6 <_dtoa_r+0x806>
 8004ca6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	dc6d      	bgt.n	8004d88 <_dtoa_r+0x7d8>
 8004cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	d066      	beq.n	8004d80 <_dtoa_r+0x7d0>
 8004cb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cb6:	464d      	mov	r5, r9
 8004cb8:	9e08      	ldr	r6, [sp, #32]
 8004cba:	9a07      	ldr	r2, [sp, #28]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	441a      	add	r2, r3
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4499      	add	r9, r3
 8004cc4:	9207      	str	r2, [sp, #28]
 8004cc6:	f7fe fe41 	bl	800394c <__i2b>
 8004cca:	4607      	mov	r7, r0
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	dd0b      	ble.n	8004ce8 <_dtoa_r+0x738>
 8004cd0:	9b07      	ldr	r3, [sp, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	dd08      	ble.n	8004ce8 <_dtoa_r+0x738>
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	bfa8      	it	ge
 8004cda:	462b      	movge	r3, r5
 8004cdc:	9a07      	ldr	r2, [sp, #28]
 8004cde:	eba9 0903 	sub.w	r9, r9, r3
 8004ce2:	1aed      	subs	r5, r5, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	9b08      	ldr	r3, [sp, #32]
 8004cea:	b1eb      	cbz	r3, 8004d28 <_dtoa_r+0x778>
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d065      	beq.n	8004dbe <_dtoa_r+0x80e>
 8004cf2:	b18e      	cbz	r6, 8004d18 <_dtoa_r+0x768>
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7fe fec5 	bl	8003a88 <__pow5mult>
 8004cfe:	465a      	mov	r2, fp
 8004d00:	4601      	mov	r1, r0
 8004d02:	4607      	mov	r7, r0
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7fe fe2a 	bl	800395e <__multiply>
 8004d0a:	4659      	mov	r1, fp
 8004d0c:	900a      	str	r0, [sp, #40]	; 0x28
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7fe fd7c 	bl	800380c <_Bfree>
 8004d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d16:	469b      	mov	fp, r3
 8004d18:	9b08      	ldr	r3, [sp, #32]
 8004d1a:	1b9a      	subs	r2, r3, r6
 8004d1c:	d004      	beq.n	8004d28 <_dtoa_r+0x778>
 8004d1e:	4659      	mov	r1, fp
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7fe feb1 	bl	8003a88 <__pow5mult>
 8004d26:	4683      	mov	fp, r0
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7fe fe0e 	bl	800394c <__i2b>
 8004d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d32:	4606      	mov	r6, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 81c6 	beq.w	80050c6 <_dtoa_r+0xb16>
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7fe fea2 	bl	8003a88 <__pow5mult>
 8004d44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d46:	4606      	mov	r6, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	dc3e      	bgt.n	8004dca <_dtoa_r+0x81a>
 8004d4c:	9b02      	ldr	r3, [sp, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d137      	bne.n	8004dc2 <_dtoa_r+0x812>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d134      	bne.n	8004dc6 <_dtoa_r+0x816>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d62:	0d1b      	lsrs	r3, r3, #20
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	b12b      	cbz	r3, 8004d74 <_dtoa_r+0x7c4>
 8004d68:	9b07      	ldr	r3, [sp, #28]
 8004d6a:	f109 0901 	add.w	r9, r9, #1
 8004d6e:	3301      	adds	r3, #1
 8004d70:	9307      	str	r3, [sp, #28]
 8004d72:	2301      	movs	r3, #1
 8004d74:	9308      	str	r3, [sp, #32]
 8004d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d128      	bne.n	8004dce <_dtoa_r+0x81e>
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	e02e      	b.n	8004dde <_dtoa_r+0x82e>
 8004d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d86:	e796      	b.n	8004cb6 <_dtoa_r+0x706>
 8004d88:	9b08      	ldr	r3, [sp, #32]
 8004d8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004d8e:	42b3      	cmp	r3, r6
 8004d90:	bfb7      	itett	lt
 8004d92:	9b08      	ldrlt	r3, [sp, #32]
 8004d94:	1b9e      	subge	r6, r3, r6
 8004d96:	1af2      	sublt	r2, r6, r3
 8004d98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004d9a:	bfbf      	itttt	lt
 8004d9c:	9608      	strlt	r6, [sp, #32]
 8004d9e:	189b      	addlt	r3, r3, r2
 8004da0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004da2:	2600      	movlt	r6, #0
 8004da4:	f1b8 0f00 	cmp.w	r8, #0
 8004da8:	bfb9      	ittee	lt
 8004daa:	eba9 0508 	sublt.w	r5, r9, r8
 8004dae:	2300      	movlt	r3, #0
 8004db0:	464d      	movge	r5, r9
 8004db2:	4643      	movge	r3, r8
 8004db4:	e781      	b.n	8004cba <_dtoa_r+0x70a>
 8004db6:	9e08      	ldr	r6, [sp, #32]
 8004db8:	464d      	mov	r5, r9
 8004dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004dbc:	e786      	b.n	8004ccc <_dtoa_r+0x71c>
 8004dbe:	9a08      	ldr	r2, [sp, #32]
 8004dc0:	e7ad      	b.n	8004d1e <_dtoa_r+0x76e>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e7d6      	b.n	8004d74 <_dtoa_r+0x7c4>
 8004dc6:	9b02      	ldr	r3, [sp, #8]
 8004dc8:	e7d4      	b.n	8004d74 <_dtoa_r+0x7c4>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9308      	str	r3, [sp, #32]
 8004dce:	6933      	ldr	r3, [r6, #16]
 8004dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004dd4:	6918      	ldr	r0, [r3, #16]
 8004dd6:	f7fe fd6b 	bl	80038b0 <__hi0bits>
 8004dda:	f1c0 0020 	rsb	r0, r0, #32
 8004dde:	9b07      	ldr	r3, [sp, #28]
 8004de0:	4418      	add	r0, r3
 8004de2:	f010 001f 	ands.w	r0, r0, #31
 8004de6:	d047      	beq.n	8004e78 <_dtoa_r+0x8c8>
 8004de8:	f1c0 0320 	rsb	r3, r0, #32
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	dd3b      	ble.n	8004e68 <_dtoa_r+0x8b8>
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	f1c0 001c 	rsb	r0, r0, #28
 8004df6:	4481      	add	r9, r0
 8004df8:	4405      	add	r5, r0
 8004dfa:	4403      	add	r3, r0
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	f1b9 0f00 	cmp.w	r9, #0
 8004e02:	dd05      	ble.n	8004e10 <_dtoa_r+0x860>
 8004e04:	4659      	mov	r1, fp
 8004e06:	464a      	mov	r2, r9
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7fe fe8b 	bl	8003b24 <__lshift>
 8004e0e:	4683      	mov	fp, r0
 8004e10:	9b07      	ldr	r3, [sp, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dd05      	ble.n	8004e22 <_dtoa_r+0x872>
 8004e16:	4631      	mov	r1, r6
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7fe fe82 	bl	8003b24 <__lshift>
 8004e20:	4606      	mov	r6, r0
 8004e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e24:	b353      	cbz	r3, 8004e7c <_dtoa_r+0x8cc>
 8004e26:	4631      	mov	r1, r6
 8004e28:	4658      	mov	r0, fp
 8004e2a:	f7fe fecf 	bl	8003bcc <__mcmp>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	da24      	bge.n	8004e7c <_dtoa_r+0x8cc>
 8004e32:	2300      	movs	r3, #0
 8004e34:	4659      	mov	r1, fp
 8004e36:	220a      	movs	r2, #10
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7fe fcfe 	bl	800383a <__multadd>
 8004e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e44:	4683      	mov	fp, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8144 	beq.w	80050d4 <_dtoa_r+0xb24>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4639      	mov	r1, r7
 8004e50:	220a      	movs	r2, #10
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7fe fcf1 	bl	800383a <__multadd>
 8004e58:	9b04      	ldr	r3, [sp, #16]
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dc4d      	bgt.n	8004efc <_dtoa_r+0x94c>
 8004e60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	dd4a      	ble.n	8004efc <_dtoa_r+0x94c>
 8004e66:	e011      	b.n	8004e8c <_dtoa_r+0x8dc>
 8004e68:	d0c9      	beq.n	8004dfe <_dtoa_r+0x84e>
 8004e6a:	9a07      	ldr	r2, [sp, #28]
 8004e6c:	331c      	adds	r3, #28
 8004e6e:	441a      	add	r2, r3
 8004e70:	4499      	add	r9, r3
 8004e72:	441d      	add	r5, r3
 8004e74:	4613      	mov	r3, r2
 8004e76:	e7c1      	b.n	8004dfc <_dtoa_r+0x84c>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	e7f6      	b.n	8004e6a <_dtoa_r+0x8ba>
 8004e7c:	f1b8 0f00 	cmp.w	r8, #0
 8004e80:	dc36      	bgt.n	8004ef0 <_dtoa_r+0x940>
 8004e82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	dd33      	ble.n	8004ef0 <_dtoa_r+0x940>
 8004e88:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	b963      	cbnz	r3, 8004eaa <_dtoa_r+0x8fa>
 8004e90:	4631      	mov	r1, r6
 8004e92:	2205      	movs	r2, #5
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fe fcd0 	bl	800383a <__multadd>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	4658      	mov	r0, fp
 8004ea0:	f7fe fe94 	bl	8003bcc <__mcmp>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f73f add3 	bgt.w	8004a50 <_dtoa_r+0x4a0>
 8004eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004eac:	9d06      	ldr	r5, [sp, #24]
 8004eae:	ea6f 0a03 	mvn.w	sl, r3
 8004eb2:	f04f 0900 	mov.w	r9, #0
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7fe fca7 	bl	800380c <_Bfree>
 8004ebe:	2f00      	cmp	r7, #0
 8004ec0:	f43f aebd 	beq.w	8004c3e <_dtoa_r+0x68e>
 8004ec4:	f1b9 0f00 	cmp.w	r9, #0
 8004ec8:	d005      	beq.n	8004ed6 <_dtoa_r+0x926>
 8004eca:	45b9      	cmp	r9, r7
 8004ecc:	d003      	beq.n	8004ed6 <_dtoa_r+0x926>
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7fe fc9b 	bl	800380c <_Bfree>
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7fe fc97 	bl	800380c <_Bfree>
 8004ede:	e6ae      	b.n	8004c3e <_dtoa_r+0x68e>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	4637      	mov	r7, r6
 8004ee4:	e7e1      	b.n	8004eaa <_dtoa_r+0x8fa>
 8004ee6:	46ba      	mov	sl, r7
 8004ee8:	4637      	mov	r7, r6
 8004eea:	e5b1      	b.n	8004a50 <_dtoa_r+0x4a0>
 8004eec:	40240000 	.word	0x40240000
 8004ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef2:	f8cd 8010 	str.w	r8, [sp, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80f3 	beq.w	80050e2 <_dtoa_r+0xb32>
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	dd05      	ble.n	8004f0c <_dtoa_r+0x95c>
 8004f00:	4639      	mov	r1, r7
 8004f02:	462a      	mov	r2, r5
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7fe fe0d 	bl	8003b24 <__lshift>
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	9b08      	ldr	r3, [sp, #32]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04c      	beq.n	8004fac <_dtoa_r+0x9fc>
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7fe fc45 	bl	80037a4 <_Balloc>
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	f107 010c 	add.w	r1, r7, #12
 8004f22:	3202      	adds	r2, #2
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	300c      	adds	r0, #12
 8004f28:	f000 f90c 	bl	8005144 <memcpy>
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7fe fdf7 	bl	8003b24 <__lshift>
 8004f36:	46b9      	mov	r9, r7
 8004f38:	4607      	mov	r7, r0
 8004f3a:	9b06      	ldr	r3, [sp, #24]
 8004f3c:	9307      	str	r3, [sp, #28]
 8004f3e:	9b02      	ldr	r3, [sp, #8]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	9308      	str	r3, [sp, #32]
 8004f46:	4631      	mov	r1, r6
 8004f48:	4658      	mov	r0, fp
 8004f4a:	f7ff faa3 	bl	8004494 <quorem>
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4605      	mov	r5, r0
 8004f52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004f56:	4658      	mov	r0, fp
 8004f58:	f7fe fe38 	bl	8003bcc <__mcmp>
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	9002      	str	r0, [sp, #8]
 8004f60:	4631      	mov	r1, r6
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fe fe4c 	bl	8003c00 <__mdiff>
 8004f68:	68c3      	ldr	r3, [r0, #12]
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	bb03      	cbnz	r3, 8004fb0 <_dtoa_r+0xa00>
 8004f6e:	4601      	mov	r1, r0
 8004f70:	9009      	str	r0, [sp, #36]	; 0x24
 8004f72:	4658      	mov	r0, fp
 8004f74:	f7fe fe2a 	bl	8003bcc <__mcmp>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4620      	mov	r0, r4
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	f7fe fc43 	bl	800380c <_Bfree>
 8004f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f88:	b9a3      	cbnz	r3, 8004fb4 <_dtoa_r+0xa04>
 8004f8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f8c:	b992      	cbnz	r2, 8004fb4 <_dtoa_r+0xa04>
 8004f8e:	9a08      	ldr	r2, [sp, #32]
 8004f90:	b982      	cbnz	r2, 8004fb4 <_dtoa_r+0xa04>
 8004f92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f96:	d029      	beq.n	8004fec <_dtoa_r+0xa3c>
 8004f98:	9b02      	ldr	r3, [sp, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd01      	ble.n	8004fa2 <_dtoa_r+0x9f2>
 8004f9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004fa2:	9b07      	ldr	r3, [sp, #28]
 8004fa4:	1c5d      	adds	r5, r3, #1
 8004fa6:	f883 8000 	strb.w	r8, [r3]
 8004faa:	e784      	b.n	8004eb6 <_dtoa_r+0x906>
 8004fac:	4638      	mov	r0, r7
 8004fae:	e7c2      	b.n	8004f36 <_dtoa_r+0x986>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e7e3      	b.n	8004f7c <_dtoa_r+0x9cc>
 8004fb4:	9a02      	ldr	r2, [sp, #8]
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	db04      	blt.n	8004fc4 <_dtoa_r+0xa14>
 8004fba:	d123      	bne.n	8005004 <_dtoa_r+0xa54>
 8004fbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004fbe:	bb0a      	cbnz	r2, 8005004 <_dtoa_r+0xa54>
 8004fc0:	9a08      	ldr	r2, [sp, #32]
 8004fc2:	b9fa      	cbnz	r2, 8005004 <_dtoa_r+0xa54>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	ddec      	ble.n	8004fa2 <_dtoa_r+0x9f2>
 8004fc8:	4659      	mov	r1, fp
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7fe fda9 	bl	8003b24 <__lshift>
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4683      	mov	fp, r0
 8004fd6:	f7fe fdf9 	bl	8003bcc <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dc03      	bgt.n	8004fe6 <_dtoa_r+0xa36>
 8004fde:	d1e0      	bne.n	8004fa2 <_dtoa_r+0x9f2>
 8004fe0:	f018 0f01 	tst.w	r8, #1
 8004fe4:	d0dd      	beq.n	8004fa2 <_dtoa_r+0x9f2>
 8004fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004fea:	d1d8      	bne.n	8004f9e <_dtoa_r+0x9ee>
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	9a07      	ldr	r2, [sp, #28]
 8004ff0:	1c5d      	adds	r5, r3, #1
 8004ff2:	2339      	movs	r3, #57	; 0x39
 8004ff4:	7013      	strb	r3, [r2, #0]
 8004ff6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ffa:	1e6a      	subs	r2, r5, #1
 8004ffc:	2b39      	cmp	r3, #57	; 0x39
 8004ffe:	d04d      	beq.n	800509c <_dtoa_r+0xaec>
 8005000:	3301      	adds	r3, #1
 8005002:	e052      	b.n	80050aa <_dtoa_r+0xafa>
 8005004:	9a07      	ldr	r2, [sp, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f102 0501 	add.w	r5, r2, #1
 800500c:	dd06      	ble.n	800501c <_dtoa_r+0xa6c>
 800500e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005012:	d0eb      	beq.n	8004fec <_dtoa_r+0xa3c>
 8005014:	f108 0801 	add.w	r8, r8, #1
 8005018:	9b07      	ldr	r3, [sp, #28]
 800501a:	e7c4      	b.n	8004fa6 <_dtoa_r+0x9f6>
 800501c:	9b06      	ldr	r3, [sp, #24]
 800501e:	9a04      	ldr	r2, [sp, #16]
 8005020:	1aeb      	subs	r3, r5, r3
 8005022:	4293      	cmp	r3, r2
 8005024:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005028:	d021      	beq.n	800506e <_dtoa_r+0xabe>
 800502a:	4659      	mov	r1, fp
 800502c:	2300      	movs	r3, #0
 800502e:	220a      	movs	r2, #10
 8005030:	4620      	mov	r0, r4
 8005032:	f7fe fc02 	bl	800383a <__multadd>
 8005036:	45b9      	cmp	r9, r7
 8005038:	4683      	mov	fp, r0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	f04f 020a 	mov.w	r2, #10
 8005042:	4649      	mov	r1, r9
 8005044:	4620      	mov	r0, r4
 8005046:	d105      	bne.n	8005054 <_dtoa_r+0xaa4>
 8005048:	f7fe fbf7 	bl	800383a <__multadd>
 800504c:	4681      	mov	r9, r0
 800504e:	4607      	mov	r7, r0
 8005050:	9507      	str	r5, [sp, #28]
 8005052:	e778      	b.n	8004f46 <_dtoa_r+0x996>
 8005054:	f7fe fbf1 	bl	800383a <__multadd>
 8005058:	4639      	mov	r1, r7
 800505a:	4681      	mov	r9, r0
 800505c:	2300      	movs	r3, #0
 800505e:	220a      	movs	r2, #10
 8005060:	4620      	mov	r0, r4
 8005062:	f7fe fbea 	bl	800383a <__multadd>
 8005066:	4607      	mov	r7, r0
 8005068:	e7f2      	b.n	8005050 <_dtoa_r+0xaa0>
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	4659      	mov	r1, fp
 8005070:	2201      	movs	r2, #1
 8005072:	4620      	mov	r0, r4
 8005074:	f7fe fd56 	bl	8003b24 <__lshift>
 8005078:	4631      	mov	r1, r6
 800507a:	4683      	mov	fp, r0
 800507c:	f7fe fda6 	bl	8003bcc <__mcmp>
 8005080:	2800      	cmp	r0, #0
 8005082:	dcb8      	bgt.n	8004ff6 <_dtoa_r+0xa46>
 8005084:	d102      	bne.n	800508c <_dtoa_r+0xadc>
 8005086:	f018 0f01 	tst.w	r8, #1
 800508a:	d1b4      	bne.n	8004ff6 <_dtoa_r+0xa46>
 800508c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005090:	1e6a      	subs	r2, r5, #1
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	f47f af0f 	bne.w	8004eb6 <_dtoa_r+0x906>
 8005098:	4615      	mov	r5, r2
 800509a:	e7f7      	b.n	800508c <_dtoa_r+0xadc>
 800509c:	9b06      	ldr	r3, [sp, #24]
 800509e:	4293      	cmp	r3, r2
 80050a0:	d105      	bne.n	80050ae <_dtoa_r+0xafe>
 80050a2:	2331      	movs	r3, #49	; 0x31
 80050a4:	9a06      	ldr	r2, [sp, #24]
 80050a6:	f10a 0a01 	add.w	sl, sl, #1
 80050aa:	7013      	strb	r3, [r2, #0]
 80050ac:	e703      	b.n	8004eb6 <_dtoa_r+0x906>
 80050ae:	4615      	mov	r5, r2
 80050b0:	e7a1      	b.n	8004ff6 <_dtoa_r+0xa46>
 80050b2:	4b17      	ldr	r3, [pc, #92]	; (8005110 <_dtoa_r+0xb60>)
 80050b4:	f7ff bae1 	b.w	800467a <_dtoa_r+0xca>
 80050b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f47f aabb 	bne.w	8004636 <_dtoa_r+0x86>
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <_dtoa_r+0xb64>)
 80050c2:	f7ff bada 	b.w	800467a <_dtoa_r+0xca>
 80050c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f77f ae3f 	ble.w	8004d4c <_dtoa_r+0x79c>
 80050ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d0:	9308      	str	r3, [sp, #32]
 80050d2:	e653      	b.n	8004d7c <_dtoa_r+0x7cc>
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dc03      	bgt.n	80050e2 <_dtoa_r+0xb32>
 80050da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f73f aed5 	bgt.w	8004e8c <_dtoa_r+0x8dc>
 80050e2:	9d06      	ldr	r5, [sp, #24]
 80050e4:	4631      	mov	r1, r6
 80050e6:	4658      	mov	r0, fp
 80050e8:	f7ff f9d4 	bl	8004494 <quorem>
 80050ec:	9b06      	ldr	r3, [sp, #24]
 80050ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80050f2:	f805 8b01 	strb.w	r8, [r5], #1
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	1aeb      	subs	r3, r5, r3
 80050fa:	429a      	cmp	r2, r3
 80050fc:	ddb5      	ble.n	800506a <_dtoa_r+0xaba>
 80050fe:	4659      	mov	r1, fp
 8005100:	2300      	movs	r3, #0
 8005102:	220a      	movs	r2, #10
 8005104:	4620      	mov	r0, r4
 8005106:	f7fe fb98 	bl	800383a <__multadd>
 800510a:	4683      	mov	fp, r0
 800510c:	e7ea      	b.n	80050e4 <_dtoa_r+0xb34>
 800510e:	bf00      	nop
 8005110:	080063c4 	.word	0x080063c4
 8005114:	080063b7 	.word	0x080063b7

08005118 <malloc>:
 8005118:	4b02      	ldr	r3, [pc, #8]	; (8005124 <malloc+0xc>)
 800511a:	4601      	mov	r1, r0
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f7fe be47 	b.w	8003db0 <_malloc_r>
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c

08005128 <memchr>:
 8005128:	b510      	push	{r4, lr}
 800512a:	b2c9      	uxtb	r1, r1
 800512c:	4402      	add	r2, r0
 800512e:	4290      	cmp	r0, r2
 8005130:	4603      	mov	r3, r0
 8005132:	d101      	bne.n	8005138 <memchr+0x10>
 8005134:	2300      	movs	r3, #0
 8005136:	e003      	b.n	8005140 <memchr+0x18>
 8005138:	781c      	ldrb	r4, [r3, #0]
 800513a:	3001      	adds	r0, #1
 800513c:	428c      	cmp	r4, r1
 800513e:	d1f6      	bne.n	800512e <memchr+0x6>
 8005140:	4618      	mov	r0, r3
 8005142:	bd10      	pop	{r4, pc}

08005144 <memcpy>:
 8005144:	b510      	push	{r4, lr}
 8005146:	1e43      	subs	r3, r0, #1
 8005148:	440a      	add	r2, r1
 800514a:	4291      	cmp	r1, r2
 800514c:	d100      	bne.n	8005150 <memcpy+0xc>
 800514e:	bd10      	pop	{r4, pc}
 8005150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005158:	e7f7      	b.n	800514a <memcpy+0x6>

0800515a <memmove>:
 800515a:	4288      	cmp	r0, r1
 800515c:	b510      	push	{r4, lr}
 800515e:	eb01 0302 	add.w	r3, r1, r2
 8005162:	d807      	bhi.n	8005174 <memmove+0x1a>
 8005164:	1e42      	subs	r2, r0, #1
 8005166:	4299      	cmp	r1, r3
 8005168:	d00a      	beq.n	8005180 <memmove+0x26>
 800516a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005172:	e7f8      	b.n	8005166 <memmove+0xc>
 8005174:	4283      	cmp	r3, r0
 8005176:	d9f5      	bls.n	8005164 <memmove+0xa>
 8005178:	1881      	adds	r1, r0, r2
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	42d3      	cmn	r3, r2
 800517e:	d100      	bne.n	8005182 <memmove+0x28>
 8005180:	bd10      	pop	{r4, pc}
 8005182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005186:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800518a:	e7f7      	b.n	800517c <memmove+0x22>

0800518c <__malloc_lock>:
 800518c:	4770      	bx	lr

0800518e <__malloc_unlock>:
 800518e:	4770      	bx	lr

08005190 <_free_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4605      	mov	r5, r0
 8005194:	2900      	cmp	r1, #0
 8005196:	d043      	beq.n	8005220 <_free_r+0x90>
 8005198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519c:	1f0c      	subs	r4, r1, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfb8      	it	lt
 80051a2:	18e4      	addlt	r4, r4, r3
 80051a4:	f7ff fff2 	bl	800518c <__malloc_lock>
 80051a8:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <_free_r+0x94>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	4610      	mov	r0, r2
 80051ae:	b933      	cbnz	r3, 80051be <_free_r+0x2e>
 80051b0:	6063      	str	r3, [r4, #4]
 80051b2:	6014      	str	r4, [r2, #0]
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ba:	f7ff bfe8 	b.w	800518e <__malloc_unlock>
 80051be:	42a3      	cmp	r3, r4
 80051c0:	d90b      	bls.n	80051da <_free_r+0x4a>
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	1862      	adds	r2, r4, r1
 80051c6:	4293      	cmp	r3, r2
 80051c8:	bf01      	itttt	eq
 80051ca:	681a      	ldreq	r2, [r3, #0]
 80051cc:	685b      	ldreq	r3, [r3, #4]
 80051ce:	1852      	addeq	r2, r2, r1
 80051d0:	6022      	streq	r2, [r4, #0]
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	6004      	str	r4, [r0, #0]
 80051d6:	e7ed      	b.n	80051b4 <_free_r+0x24>
 80051d8:	4613      	mov	r3, r2
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	b10a      	cbz	r2, 80051e2 <_free_r+0x52>
 80051de:	42a2      	cmp	r2, r4
 80051e0:	d9fa      	bls.n	80051d8 <_free_r+0x48>
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	1858      	adds	r0, r3, r1
 80051e6:	42a0      	cmp	r0, r4
 80051e8:	d10b      	bne.n	8005202 <_free_r+0x72>
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	4401      	add	r1, r0
 80051ee:	1858      	adds	r0, r3, r1
 80051f0:	4282      	cmp	r2, r0
 80051f2:	6019      	str	r1, [r3, #0]
 80051f4:	d1de      	bne.n	80051b4 <_free_r+0x24>
 80051f6:	6810      	ldr	r0, [r2, #0]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	4401      	add	r1, r0
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	e7d8      	b.n	80051b4 <_free_r+0x24>
 8005202:	d902      	bls.n	800520a <_free_r+0x7a>
 8005204:	230c      	movs	r3, #12
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	e7d4      	b.n	80051b4 <_free_r+0x24>
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	1821      	adds	r1, r4, r0
 800520e:	428a      	cmp	r2, r1
 8005210:	bf01      	itttt	eq
 8005212:	6811      	ldreq	r1, [r2, #0]
 8005214:	6852      	ldreq	r2, [r2, #4]
 8005216:	1809      	addeq	r1, r1, r0
 8005218:	6021      	streq	r1, [r4, #0]
 800521a:	6062      	str	r2, [r4, #4]
 800521c:	605c      	str	r4, [r3, #4]
 800521e:	e7c9      	b.n	80051b4 <_free_r+0x24>
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	bf00      	nop
 8005224:	20000090 	.word	0x20000090

08005228 <_malloc_usable_size_r>:
 8005228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522c:	1f18      	subs	r0, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfbc      	itt	lt
 8005232:	580b      	ldrlt	r3, [r1, r0]
 8005234:	18c0      	addlt	r0, r0, r3
 8005236:	4770      	bx	lr

08005238 <sin>:
 8005238:	b530      	push	{r4, r5, lr}
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <sin+0x6c>)
 800523c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005240:	4293      	cmp	r3, r2
 8005242:	b087      	sub	sp, #28
 8005244:	dc06      	bgt.n	8005254 <sin+0x1c>
 8005246:	2300      	movs	r3, #0
 8005248:	2200      	movs	r2, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	f000 fe27 	bl	8005ea0 <__kernel_sin>
 8005252:	e006      	b.n	8005262 <sin+0x2a>
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <sin+0x70>)
 8005256:	4293      	cmp	r3, r2
 8005258:	dd05      	ble.n	8005266 <sin+0x2e>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	f7fa ff83 	bl	8000168 <__aeabi_dsub>
 8005262:	b007      	add	sp, #28
 8005264:	bd30      	pop	{r4, r5, pc}
 8005266:	aa02      	add	r2, sp, #8
 8005268:	f000 f822 	bl	80052b0 <__ieee754_rem_pio2>
 800526c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005270:	f000 0403 	and.w	r4, r0, #3
 8005274:	2c01      	cmp	r4, #1
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	d005      	beq.n	8005288 <sin+0x50>
 800527c:	2c02      	cmp	r4, #2
 800527e:	d006      	beq.n	800528e <sin+0x56>
 8005280:	b964      	cbnz	r4, 800529c <sin+0x64>
 8005282:	2401      	movs	r4, #1
 8005284:	9400      	str	r4, [sp, #0]
 8005286:	e7e2      	b.n	800524e <sin+0x16>
 8005288:	f000 fa02 	bl	8005690 <__kernel_cos>
 800528c:	e7e9      	b.n	8005262 <sin+0x2a>
 800528e:	2401      	movs	r4, #1
 8005290:	9400      	str	r4, [sp, #0]
 8005292:	f000 fe05 	bl	8005ea0 <__kernel_sin>
 8005296:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800529a:	e7e2      	b.n	8005262 <sin+0x2a>
 800529c:	f000 f9f8 	bl	8005690 <__kernel_cos>
 80052a0:	e7f9      	b.n	8005296 <sin+0x5e>
 80052a2:	bf00      	nop
 80052a4:	3fe921fb 	.word	0x3fe921fb
 80052a8:	7fefffff 	.word	0x7fefffff
 80052ac:	00000000 	.word	0x00000000

080052b0 <__ieee754_rem_pio2>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4614      	mov	r4, r2
 80052b6:	4ac2      	ldr	r2, [pc, #776]	; (80055c0 <__ieee754_rem_pio2+0x310>)
 80052b8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80052bc:	4592      	cmp	sl, r2
 80052be:	b08d      	sub	sp, #52	; 0x34
 80052c0:	468b      	mov	fp, r1
 80052c2:	dc07      	bgt.n	80052d4 <__ieee754_rem_pio2+0x24>
 80052c4:	2200      	movs	r2, #0
 80052c6:	2300      	movs	r3, #0
 80052c8:	e9c4 0100 	strd	r0, r1, [r4]
 80052cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80052d0:	2500      	movs	r5, #0
 80052d2:	e023      	b.n	800531c <__ieee754_rem_pio2+0x6c>
 80052d4:	4abb      	ldr	r2, [pc, #748]	; (80055c4 <__ieee754_rem_pio2+0x314>)
 80052d6:	4592      	cmp	sl, r2
 80052d8:	dc71      	bgt.n	80053be <__ieee754_rem_pio2+0x10e>
 80052da:	a3ab      	add	r3, pc, #684	; (adr r3, 8005588 <__ieee754_rem_pio2+0x2d8>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	2900      	cmp	r1, #0
 80052e2:	4db9      	ldr	r5, [pc, #740]	; (80055c8 <__ieee754_rem_pio2+0x318>)
 80052e4:	dd36      	ble.n	8005354 <__ieee754_rem_pio2+0xa4>
 80052e6:	f7fa ff3f 	bl	8000168 <__aeabi_dsub>
 80052ea:	45aa      	cmp	sl, r5
 80052ec:	4606      	mov	r6, r0
 80052ee:	460f      	mov	r7, r1
 80052f0:	d018      	beq.n	8005324 <__ieee754_rem_pio2+0x74>
 80052f2:	a3a7      	add	r3, pc, #668	; (adr r3, 8005590 <__ieee754_rem_pio2+0x2e0>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f7fa ff36 	bl	8000168 <__aeabi_dsub>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4630      	mov	r0, r6
 8005302:	e9c4 2300 	strd	r2, r3, [r4]
 8005306:	4639      	mov	r1, r7
 8005308:	f7fa ff2e 	bl	8000168 <__aeabi_dsub>
 800530c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005590 <__ieee754_rem_pio2+0x2e0>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fa ff29 	bl	8000168 <__aeabi_dsub>
 8005316:	2501      	movs	r5, #1
 8005318:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800531c:	4628      	mov	r0, r5
 800531e:	b00d      	add	sp, #52	; 0x34
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	a39c      	add	r3, pc, #624	; (adr r3, 8005598 <__ieee754_rem_pio2+0x2e8>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff1d 	bl	8000168 <__aeabi_dsub>
 800532e:	a39c      	add	r3, pc, #624	; (adr r3, 80055a0 <__ieee754_rem_pio2+0x2f0>)
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	f7fa ff16 	bl	8000168 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	e9c4 2300 	strd	r2, r3, [r4]
 8005346:	4639      	mov	r1, r7
 8005348:	f7fa ff0e 	bl	8000168 <__aeabi_dsub>
 800534c:	a394      	add	r3, pc, #592	; (adr r3, 80055a0 <__ieee754_rem_pio2+0x2f0>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	e7de      	b.n	8005312 <__ieee754_rem_pio2+0x62>
 8005354:	f7fa ff0a 	bl	800016c <__adddf3>
 8005358:	45aa      	cmp	sl, r5
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	d016      	beq.n	800538e <__ieee754_rem_pio2+0xde>
 8005360:	a38b      	add	r3, pc, #556	; (adr r3, 8005590 <__ieee754_rem_pio2+0x2e0>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fa ff01 	bl	800016c <__adddf3>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4630      	mov	r0, r6
 8005370:	e9c4 2300 	strd	r2, r3, [r4]
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa fef7 	bl	8000168 <__aeabi_dsub>
 800537a:	a385      	add	r3, pc, #532	; (adr r3, 8005590 <__ieee754_rem_pio2+0x2e0>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fa fef4 	bl	800016c <__adddf3>
 8005384:	f04f 35ff 	mov.w	r5, #4294967295
 8005388:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800538c:	e7c6      	b.n	800531c <__ieee754_rem_pio2+0x6c>
 800538e:	a382      	add	r3, pc, #520	; (adr r3, 8005598 <__ieee754_rem_pio2+0x2e8>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fa feea 	bl	800016c <__adddf3>
 8005398:	a381      	add	r3, pc, #516	; (adr r3, 80055a0 <__ieee754_rem_pio2+0x2f0>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	f7fa fee3 	bl	800016c <__adddf3>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4630      	mov	r0, r6
 80053ac:	e9c4 2300 	strd	r2, r3, [r4]
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fa fed9 	bl	8000168 <__aeabi_dsub>
 80053b6:	a37a      	add	r3, pc, #488	; (adr r3, 80055a0 <__ieee754_rem_pio2+0x2f0>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	e7e0      	b.n	8005380 <__ieee754_rem_pio2+0xd0>
 80053be:	4a83      	ldr	r2, [pc, #524]	; (80055cc <__ieee754_rem_pio2+0x31c>)
 80053c0:	4592      	cmp	sl, r2
 80053c2:	f300 80d2 	bgt.w	800556a <__ieee754_rem_pio2+0x2ba>
 80053c6:	f000 fe21 	bl	800600c <fabs>
 80053ca:	a377      	add	r3, pc, #476	; (adr r3, 80055a8 <__ieee754_rem_pio2+0x2f8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	4606      	mov	r6, r0
 80053d2:	460f      	mov	r7, r1
 80053d4:	f7fb f880 	bl	80004d8 <__aeabi_dmul>
 80053d8:	2200      	movs	r2, #0
 80053da:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <__ieee754_rem_pio2+0x320>)
 80053dc:	f7fa fec6 	bl	800016c <__adddf3>
 80053e0:	f7fb fb14 	bl	8000a0c <__aeabi_d2iz>
 80053e4:	4605      	mov	r5, r0
 80053e6:	f7fb f80d 	bl	8000404 <__aeabi_i2d>
 80053ea:	a367      	add	r3, pc, #412	; (adr r3, 8005588 <__ieee754_rem_pio2+0x2d8>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f4:	f7fb f870 	bl	80004d8 <__aeabi_dmul>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fa feb2 	bl	8000168 <__aeabi_dsub>
 8005404:	a362      	add	r3, pc, #392	; (adr r3, 8005590 <__ieee754_rem_pio2+0x2e0>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005412:	f7fb f861 	bl	80004d8 <__aeabi_dmul>
 8005416:	2d1f      	cmp	r5, #31
 8005418:	4680      	mov	r8, r0
 800541a:	4689      	mov	r9, r1
 800541c:	dc0e      	bgt.n	800543c <__ieee754_rem_pio2+0x18c>
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <__ieee754_rem_pio2+0x324>)
 8005420:	1e6a      	subs	r2, r5, #1
 8005422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005426:	4553      	cmp	r3, sl
 8005428:	d008      	beq.n	800543c <__ieee754_rem_pio2+0x18c>
 800542a:	4642      	mov	r2, r8
 800542c:	464b      	mov	r3, r9
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fa fe99 	bl	8000168 <__aeabi_dsub>
 8005436:	e9c4 0100 	strd	r0, r1, [r4]
 800543a:	e011      	b.n	8005460 <__ieee754_rem_pio2+0x1b0>
 800543c:	464b      	mov	r3, r9
 800543e:	4642      	mov	r2, r8
 8005440:	4630      	mov	r0, r6
 8005442:	4639      	mov	r1, r7
 8005444:	f7fa fe90 	bl	8000168 <__aeabi_dsub>
 8005448:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800544c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005450:	ebaa 0303 	sub.w	r3, sl, r3
 8005454:	2b10      	cmp	r3, #16
 8005456:	dc1f      	bgt.n	8005498 <__ieee754_rem_pio2+0x1e8>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	e9c4 2300 	strd	r2, r3, [r4]
 8005460:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005464:	4630      	mov	r0, r6
 8005466:	4653      	mov	r3, sl
 8005468:	4639      	mov	r1, r7
 800546a:	f7fa fe7d 	bl	8000168 <__aeabi_dsub>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	f7fa fe79 	bl	8000168 <__aeabi_dsub>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	f1bb 0f00 	cmp.w	fp, #0
 800547e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005482:	f6bf af4b 	bge.w	800531c <__ieee754_rem_pio2+0x6c>
 8005486:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800548a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800548e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005492:	60e1      	str	r1, [r4, #12]
 8005494:	426d      	negs	r5, r5
 8005496:	e741      	b.n	800531c <__ieee754_rem_pio2+0x6c>
 8005498:	a33f      	add	r3, pc, #252	; (adr r3, 8005598 <__ieee754_rem_pio2+0x2e8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a2:	f7fb f819 	bl	80004d8 <__aeabi_dmul>
 80054a6:	4680      	mov	r8, r0
 80054a8:	4689      	mov	r9, r1
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fa fe59 	bl	8000168 <__aeabi_dsub>
 80054b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4630      	mov	r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	f7fa fe51 	bl	8000168 <__aeabi_dsub>
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	f7fa fe4d 	bl	8000168 <__aeabi_dsub>
 80054ce:	a334      	add	r3, pc, #208	; (adr r3, 80055a0 <__ieee754_rem_pio2+0x2f0>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	4606      	mov	r6, r0
 80054d6:	460f      	mov	r7, r1
 80054d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054dc:	f7fa fffc 	bl	80004d8 <__aeabi_dmul>
 80054e0:	4632      	mov	r2, r6
 80054e2:	463b      	mov	r3, r7
 80054e4:	f7fa fe40 	bl	8000168 <__aeabi_dsub>
 80054e8:	460b      	mov	r3, r1
 80054ea:	4602      	mov	r2, r0
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f4:	f7fa fe38 	bl	8000168 <__aeabi_dsub>
 80054f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054fc:	ebaa 0a03 	sub.w	sl, sl, r3
 8005500:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005504:	dc06      	bgt.n	8005514 <__ieee754_rem_pio2+0x264>
 8005506:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	e9c4 2300 	strd	r2, r3, [r4]
 8005512:	e7a5      	b.n	8005460 <__ieee754_rem_pio2+0x1b0>
 8005514:	a326      	add	r3, pc, #152	; (adr r3, 80055b0 <__ieee754_rem_pio2+0x300>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551e:	f7fa ffdb 	bl	80004d8 <__aeabi_dmul>
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800552e:	f7fa fe1b 	bl	8000168 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4606      	mov	r6, r0
 8005538:	460f      	mov	r7, r1
 800553a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	4642      	mov	r2, r8
 8005544:	464b      	mov	r3, r9
 8005546:	f7fa fe0f 	bl	8000168 <__aeabi_dsub>
 800554a:	a31b      	add	r3, pc, #108	; (adr r3, 80055b8 <__ieee754_rem_pio2+0x308>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005558:	f7fa ffbe 	bl	80004d8 <__aeabi_dmul>
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	f7fa fe02 	bl	8000168 <__aeabi_dsub>
 8005564:	4680      	mov	r8, r0
 8005566:	4689      	mov	r9, r1
 8005568:	e75f      	b.n	800542a <__ieee754_rem_pio2+0x17a>
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <__ieee754_rem_pio2+0x328>)
 800556c:	4592      	cmp	sl, r2
 800556e:	dd35      	ble.n	80055dc <__ieee754_rem_pio2+0x32c>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	f7fa fdf8 	bl	8000168 <__aeabi_dsub>
 8005578:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800557c:	e9c4 0100 	strd	r0, r1, [r4]
 8005580:	e6a6      	b.n	80052d0 <__ieee754_rem_pio2+0x20>
 8005582:	bf00      	nop
 8005584:	f3af 8000 	nop.w
 8005588:	54400000 	.word	0x54400000
 800558c:	3ff921fb 	.word	0x3ff921fb
 8005590:	1a626331 	.word	0x1a626331
 8005594:	3dd0b461 	.word	0x3dd0b461
 8005598:	1a600000 	.word	0x1a600000
 800559c:	3dd0b461 	.word	0x3dd0b461
 80055a0:	2e037073 	.word	0x2e037073
 80055a4:	3ba3198a 	.word	0x3ba3198a
 80055a8:	6dc9c883 	.word	0x6dc9c883
 80055ac:	3fe45f30 	.word	0x3fe45f30
 80055b0:	2e000000 	.word	0x2e000000
 80055b4:	3ba3198a 	.word	0x3ba3198a
 80055b8:	252049c1 	.word	0x252049c1
 80055bc:	397b839a 	.word	0x397b839a
 80055c0:	3fe921fb 	.word	0x3fe921fb
 80055c4:	4002d97b 	.word	0x4002d97b
 80055c8:	3ff921fb 	.word	0x3ff921fb
 80055cc:	413921fb 	.word	0x413921fb
 80055d0:	3fe00000 	.word	0x3fe00000
 80055d4:	080063c8 	.word	0x080063c8
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80055e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80055e4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80055e8:	460f      	mov	r7, r1
 80055ea:	4606      	mov	r6, r0
 80055ec:	f7fb fa0e 	bl	8000a0c <__aeabi_d2iz>
 80055f0:	f7fa ff08 	bl	8000404 <__aeabi_i2d>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005600:	f7fa fdb2 	bl	8000168 <__aeabi_dsub>
 8005604:	2200      	movs	r2, #0
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <__ieee754_rem_pio2+0x3d8>)
 8005608:	f7fa ff66 	bl	80004d8 <__aeabi_dmul>
 800560c:	460f      	mov	r7, r1
 800560e:	4606      	mov	r6, r0
 8005610:	f7fb f9fc 	bl	8000a0c <__aeabi_d2iz>
 8005614:	f7fa fef6 	bl	8000404 <__aeabi_i2d>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005624:	f7fa fda0 	bl	8000168 <__aeabi_dsub>
 8005628:	2200      	movs	r2, #0
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <__ieee754_rem_pio2+0x3d8>)
 800562c:	f7fa ff54 	bl	80004d8 <__aeabi_dmul>
 8005630:	f04f 0803 	mov.w	r8, #3
 8005634:	2600      	movs	r6, #0
 8005636:	2700      	movs	r7, #0
 8005638:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800563c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005640:	4632      	mov	r2, r6
 8005642:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005646:	463b      	mov	r3, r7
 8005648:	f108 3aff 	add.w	sl, r8, #4294967295
 800564c:	f7fb f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8005650:	b9b8      	cbnz	r0, 8005682 <__ieee754_rem_pio2+0x3d2>
 8005652:	4b0e      	ldr	r3, [pc, #56]	; (800568c <__ieee754_rem_pio2+0x3dc>)
 8005654:	462a      	mov	r2, r5
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	2302      	movs	r3, #2
 800565a:	4621      	mov	r1, r4
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	a806      	add	r0, sp, #24
 8005660:	4643      	mov	r3, r8
 8005662:	f000 f8d3 	bl	800580c <__kernel_rem_pio2>
 8005666:	f1bb 0f00 	cmp.w	fp, #0
 800566a:	4605      	mov	r5, r0
 800566c:	f6bf ae56 	bge.w	800531c <__ieee754_rem_pio2+0x6c>
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005676:	6063      	str	r3, [r4, #4]
 8005678:	68e3      	ldr	r3, [r4, #12]
 800567a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800567e:	60e3      	str	r3, [r4, #12]
 8005680:	e708      	b.n	8005494 <__ieee754_rem_pio2+0x1e4>
 8005682:	46d0      	mov	r8, sl
 8005684:	e7dc      	b.n	8005640 <__ieee754_rem_pio2+0x390>
 8005686:	bf00      	nop
 8005688:	41700000 	.word	0x41700000
 800568c:	08006448 	.word	0x08006448

08005690 <__kernel_cos>:
 8005690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005698:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800569c:	4680      	mov	r8, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	e9cd 2300 	strd	r2, r3, [sp]
 80056a4:	da04      	bge.n	80056b0 <__kernel_cos+0x20>
 80056a6:	f7fb f9b1 	bl	8000a0c <__aeabi_d2iz>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f000 8086 	beq.w	80057bc <__kernel_cos+0x12c>
 80056b0:	4642      	mov	r2, r8
 80056b2:	463b      	mov	r3, r7
 80056b4:	4640      	mov	r0, r8
 80056b6:	4639      	mov	r1, r7
 80056b8:	f7fa ff0e 	bl	80004d8 <__aeabi_dmul>
 80056bc:	2200      	movs	r2, #0
 80056be:	4b4e      	ldr	r3, [pc, #312]	; (80057f8 <__kernel_cos+0x168>)
 80056c0:	4604      	mov	r4, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	f7fa ff08 	bl	80004d8 <__aeabi_dmul>
 80056c8:	a33f      	add	r3, pc, #252	; (adr r3, 80057c8 <__kernel_cos+0x138>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	4682      	mov	sl, r0
 80056d0:	468b      	mov	fp, r1
 80056d2:	4620      	mov	r0, r4
 80056d4:	4629      	mov	r1, r5
 80056d6:	f7fa feff 	bl	80004d8 <__aeabi_dmul>
 80056da:	a33d      	add	r3, pc, #244	; (adr r3, 80057d0 <__kernel_cos+0x140>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa fd44 	bl	800016c <__adddf3>
 80056e4:	4622      	mov	r2, r4
 80056e6:	462b      	mov	r3, r5
 80056e8:	f7fa fef6 	bl	80004d8 <__aeabi_dmul>
 80056ec:	a33a      	add	r3, pc, #232	; (adr r3, 80057d8 <__kernel_cos+0x148>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fa fd39 	bl	8000168 <__aeabi_dsub>
 80056f6:	4622      	mov	r2, r4
 80056f8:	462b      	mov	r3, r5
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	a338      	add	r3, pc, #224	; (adr r3, 80057e0 <__kernel_cos+0x150>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa fd32 	bl	800016c <__adddf3>
 8005708:	4622      	mov	r2, r4
 800570a:	462b      	mov	r3, r5
 800570c:	f7fa fee4 	bl	80004d8 <__aeabi_dmul>
 8005710:	a335      	add	r3, pc, #212	; (adr r3, 80057e8 <__kernel_cos+0x158>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa fd27 	bl	8000168 <__aeabi_dsub>
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	f7fa fedb 	bl	80004d8 <__aeabi_dmul>
 8005722:	a333      	add	r3, pc, #204	; (adr r3, 80057f0 <__kernel_cos+0x160>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fd20 	bl	800016c <__adddf3>
 800572c:	4622      	mov	r2, r4
 800572e:	462b      	mov	r3, r5
 8005730:	f7fa fed2 	bl	80004d8 <__aeabi_dmul>
 8005734:	4622      	mov	r2, r4
 8005736:	462b      	mov	r3, r5
 8005738:	f7fa fece 	bl	80004d8 <__aeabi_dmul>
 800573c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	4640      	mov	r0, r8
 8005746:	4639      	mov	r1, r7
 8005748:	f7fa fec6 	bl	80004d8 <__aeabi_dmul>
 800574c:	460b      	mov	r3, r1
 800574e:	4602      	mov	r2, r0
 8005750:	4629      	mov	r1, r5
 8005752:	4620      	mov	r0, r4
 8005754:	f7fa fd08 	bl	8000168 <__aeabi_dsub>
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <__kernel_cos+0x16c>)
 800575a:	4680      	mov	r8, r0
 800575c:	429e      	cmp	r6, r3
 800575e:	4689      	mov	r9, r1
 8005760:	dc0e      	bgt.n	8005780 <__kernel_cos+0xf0>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4650      	mov	r0, sl
 8005768:	4659      	mov	r1, fp
 800576a:	f7fa fcfd 	bl	8000168 <__aeabi_dsub>
 800576e:	4602      	mov	r2, r0
 8005770:	2000      	movs	r0, #0
 8005772:	460b      	mov	r3, r1
 8005774:	4922      	ldr	r1, [pc, #136]	; (8005800 <__kernel_cos+0x170>)
 8005776:	f7fa fcf7 	bl	8000168 <__aeabi_dsub>
 800577a:	b003      	add	sp, #12
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	2400      	movs	r4, #0
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <__kernel_cos+0x174>)
 8005784:	4622      	mov	r2, r4
 8005786:	429e      	cmp	r6, r3
 8005788:	bfcc      	ite	gt
 800578a:	4d1f      	ldrgt	r5, [pc, #124]	; (8005808 <__kernel_cos+0x178>)
 800578c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005790:	462b      	mov	r3, r5
 8005792:	2000      	movs	r0, #0
 8005794:	491a      	ldr	r1, [pc, #104]	; (8005800 <__kernel_cos+0x170>)
 8005796:	f7fa fce7 	bl	8000168 <__aeabi_dsub>
 800579a:	4622      	mov	r2, r4
 800579c:	4606      	mov	r6, r0
 800579e:	460f      	mov	r7, r1
 80057a0:	462b      	mov	r3, r5
 80057a2:	4650      	mov	r0, sl
 80057a4:	4659      	mov	r1, fp
 80057a6:	f7fa fcdf 	bl	8000168 <__aeabi_dsub>
 80057aa:	4642      	mov	r2, r8
 80057ac:	464b      	mov	r3, r9
 80057ae:	f7fa fcdb 	bl	8000168 <__aeabi_dsub>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	e7dc      	b.n	8005776 <__kernel_cos+0xe6>
 80057bc:	2000      	movs	r0, #0
 80057be:	4910      	ldr	r1, [pc, #64]	; (8005800 <__kernel_cos+0x170>)
 80057c0:	e7db      	b.n	800577a <__kernel_cos+0xea>
 80057c2:	bf00      	nop
 80057c4:	f3af 8000 	nop.w
 80057c8:	be8838d4 	.word	0xbe8838d4
 80057cc:	bda8fae9 	.word	0xbda8fae9
 80057d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80057d4:	3e21ee9e 	.word	0x3e21ee9e
 80057d8:	809c52ad 	.word	0x809c52ad
 80057dc:	3e927e4f 	.word	0x3e927e4f
 80057e0:	19cb1590 	.word	0x19cb1590
 80057e4:	3efa01a0 	.word	0x3efa01a0
 80057e8:	16c15177 	.word	0x16c15177
 80057ec:	3f56c16c 	.word	0x3f56c16c
 80057f0:	5555554c 	.word	0x5555554c
 80057f4:	3fa55555 	.word	0x3fa55555
 80057f8:	3fe00000 	.word	0x3fe00000
 80057fc:	3fd33332 	.word	0x3fd33332
 8005800:	3ff00000 	.word	0x3ff00000
 8005804:	3fe90000 	.word	0x3fe90000
 8005808:	3fd20000 	.word	0x3fd20000

0800580c <__kernel_rem_pio2>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005814:	9307      	str	r3, [sp, #28]
 8005816:	9104      	str	r1, [sp, #16]
 8005818:	4bbf      	ldr	r3, [pc, #764]	; (8005b18 <__kernel_rem_pio2+0x30c>)
 800581a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800581c:	1ed4      	subs	r4, r2, #3
 800581e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005822:	2500      	movs	r5, #0
 8005824:	9302      	str	r3, [sp, #8]
 8005826:	9b07      	ldr	r3, [sp, #28]
 8005828:	9008      	str	r0, [sp, #32]
 800582a:	3b01      	subs	r3, #1
 800582c:	9306      	str	r3, [sp, #24]
 800582e:	2318      	movs	r3, #24
 8005830:	fb94 f4f3 	sdiv	r4, r4, r3
 8005834:	f06f 0317 	mvn.w	r3, #23
 8005838:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800583c:	fb04 3303 	mla	r3, r4, r3, r3
 8005840:	eb03 0a02 	add.w	sl, r3, r2
 8005844:	9a06      	ldr	r2, [sp, #24]
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	1aa7      	subs	r7, r4, r2
 800584a:	eb03 0802 	add.w	r8, r3, r2
 800584e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005850:	2200      	movs	r2, #0
 8005852:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005856:	2300      	movs	r3, #0
 8005858:	ae1e      	add	r6, sp, #120	; 0x78
 800585a:	4545      	cmp	r5, r8
 800585c:	dd14      	ble.n	8005888 <__kernel_rem_pio2+0x7c>
 800585e:	2600      	movs	r6, #0
 8005860:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	429e      	cmp	r6, r3
 8005868:	dc39      	bgt.n	80058de <__kernel_rem_pio2+0xd2>
 800586a:	9b08      	ldr	r3, [sp, #32]
 800586c:	f04f 0800 	mov.w	r8, #0
 8005870:	3b08      	subs	r3, #8
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	9b07      	ldr	r3, [sp, #28]
 8005876:	f04f 0900 	mov.w	r9, #0
 800587a:	199d      	adds	r5, r3, r6
 800587c:	ab20      	add	r3, sp, #128	; 0x80
 800587e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	2700      	movs	r7, #0
 8005886:	e023      	b.n	80058d0 <__kernel_rem_pio2+0xc4>
 8005888:	42ef      	cmn	r7, r5
 800588a:	d40b      	bmi.n	80058a4 <__kernel_rem_pio2+0x98>
 800588c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005890:	e9cd 2300 	strd	r2, r3, [sp]
 8005894:	f7fa fdb6 	bl	8000404 <__aeabi_i2d>
 8005898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7da      	b.n	800585a <__kernel_rem_pio2+0x4e>
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	e7f8      	b.n	800589c <__kernel_rem_pio2+0x90>
 80058aa:	9905      	ldr	r1, [sp, #20]
 80058ac:	9d00      	ldr	r5, [sp, #0]
 80058ae:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80058b2:	9105      	str	r1, [sp, #20]
 80058b4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80058b8:	9500      	str	r5, [sp, #0]
 80058ba:	f7fa fe0d 	bl	80004d8 <__aeabi_dmul>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa fc51 	bl	800016c <__adddf3>
 80058ca:	4680      	mov	r8, r0
 80058cc:	4689      	mov	r9, r1
 80058ce:	3701      	adds	r7, #1
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	429f      	cmp	r7, r3
 80058d4:	dde9      	ble.n	80058aa <__kernel_rem_pio2+0x9e>
 80058d6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80058da:	3601      	adds	r6, #1
 80058dc:	e7c2      	b.n	8005864 <__kernel_rem_pio2+0x58>
 80058de:	9b02      	ldr	r3, [sp, #8]
 80058e0:	aa0c      	add	r2, sp, #48	; 0x30
 80058e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80058ea:	9f02      	ldr	r7, [sp, #8]
 80058ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80058f0:	930a      	str	r3, [sp, #40]	; 0x28
 80058f2:	2600      	movs	r6, #0
 80058f4:	ab98      	add	r3, sp, #608	; 0x260
 80058f6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80058fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005902:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005906:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800590a:	ab98      	add	r3, sp, #608	; 0x260
 800590c:	445b      	add	r3, fp
 800590e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8005912:	1bbb      	subs	r3, r7, r6
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc71      	bgt.n	80059fc <__kernel_rem_pio2+0x1f0>
 8005918:	4652      	mov	r2, sl
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f000 fbff 	bl	8006120 <scalbn>
 8005922:	2200      	movs	r2, #0
 8005924:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	f7fa fdd4 	bl	80004d8 <__aeabi_dmul>
 8005930:	f000 fb72 	bl	8006018 <floor>
 8005934:	2200      	movs	r2, #0
 8005936:	4b79      	ldr	r3, [pc, #484]	; (8005b1c <__kernel_rem_pio2+0x310>)
 8005938:	f7fa fdce 	bl	80004d8 <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4620      	mov	r0, r4
 8005942:	4629      	mov	r1, r5
 8005944:	f7fa fc10 	bl	8000168 <__aeabi_dsub>
 8005948:	460d      	mov	r5, r1
 800594a:	4604      	mov	r4, r0
 800594c:	f7fb f85e 	bl	8000a0c <__aeabi_d2iz>
 8005950:	9005      	str	r0, [sp, #20]
 8005952:	f7fa fd57 	bl	8000404 <__aeabi_i2d>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4620      	mov	r0, r4
 800595c:	4629      	mov	r1, r5
 800595e:	f7fa fc03 	bl	8000168 <__aeabi_dsub>
 8005962:	f1ba 0f00 	cmp.w	sl, #0
 8005966:	4680      	mov	r8, r0
 8005968:	4689      	mov	r9, r1
 800596a:	dd6c      	ble.n	8005a46 <__kernel_rem_pio2+0x23a>
 800596c:	1e7a      	subs	r2, r7, #1
 800596e:	ab0c      	add	r3, sp, #48	; 0x30
 8005970:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005974:	f1ca 0118 	rsb	r1, sl, #24
 8005978:	9c05      	ldr	r4, [sp, #20]
 800597a:	fa40 f301 	asr.w	r3, r0, r1
 800597e:	441c      	add	r4, r3
 8005980:	408b      	lsls	r3, r1
 8005982:	1ac0      	subs	r0, r0, r3
 8005984:	ab0c      	add	r3, sp, #48	; 0x30
 8005986:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800598a:	f1ca 0317 	rsb	r3, sl, #23
 800598e:	9405      	str	r4, [sp, #20]
 8005990:	fa40 f303 	asr.w	r3, r0, r3
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	9b00      	ldr	r3, [sp, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	dd62      	ble.n	8005a62 <__kernel_rem_pio2+0x256>
 800599c:	2200      	movs	r2, #0
 800599e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80059a2:	4614      	mov	r4, r2
 80059a4:	9b05      	ldr	r3, [sp, #20]
 80059a6:	3301      	adds	r3, #1
 80059a8:	9305      	str	r3, [sp, #20]
 80059aa:	4297      	cmp	r7, r2
 80059ac:	f300 809f 	bgt.w	8005aee <__kernel_rem_pio2+0x2e2>
 80059b0:	f1ba 0f00 	cmp.w	sl, #0
 80059b4:	dd07      	ble.n	80059c6 <__kernel_rem_pio2+0x1ba>
 80059b6:	f1ba 0f01 	cmp.w	sl, #1
 80059ba:	f000 80bb 	beq.w	8005b34 <__kernel_rem_pio2+0x328>
 80059be:	f1ba 0f02 	cmp.w	sl, #2
 80059c2:	f000 80c1 	beq.w	8005b48 <__kernel_rem_pio2+0x33c>
 80059c6:	9b00      	ldr	r3, [sp, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d14a      	bne.n	8005a62 <__kernel_rem_pio2+0x256>
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	2000      	movs	r0, #0
 80059d2:	4953      	ldr	r1, [pc, #332]	; (8005b20 <__kernel_rem_pio2+0x314>)
 80059d4:	f7fa fbc8 	bl	8000168 <__aeabi_dsub>
 80059d8:	4680      	mov	r8, r0
 80059da:	4689      	mov	r9, r1
 80059dc:	2c00      	cmp	r4, #0
 80059de:	d040      	beq.n	8005a62 <__kernel_rem_pio2+0x256>
 80059e0:	4652      	mov	r2, sl
 80059e2:	2000      	movs	r0, #0
 80059e4:	494e      	ldr	r1, [pc, #312]	; (8005b20 <__kernel_rem_pio2+0x314>)
 80059e6:	f000 fb9b 	bl	8006120 <scalbn>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4640      	mov	r0, r8
 80059f0:	4649      	mov	r1, r9
 80059f2:	f7fa fbb9 	bl	8000168 <__aeabi_dsub>
 80059f6:	4680      	mov	r8, r0
 80059f8:	4689      	mov	r9, r1
 80059fa:	e032      	b.n	8005a62 <__kernel_rem_pio2+0x256>
 80059fc:	2200      	movs	r2, #0
 80059fe:	4b49      	ldr	r3, [pc, #292]	; (8005b24 <__kernel_rem_pio2+0x318>)
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	f7fb f800 	bl	8000a0c <__aeabi_d2iz>
 8005a0c:	f7fa fcfa 	bl	8000404 <__aeabi_i2d>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <__kernel_rem_pio2+0x31c>)
 8005a14:	e9cd 0100 	strd	r0, r1, [sp]
 8005a18:	f7fa fd5e 	bl	80004d8 <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fa fba0 	bl	8000168 <__aeabi_dsub>
 8005a28:	f7fa fff0 	bl	8000a0c <__aeabi_d2iz>
 8005a2c:	ab0c      	add	r3, sp, #48	; 0x30
 8005a2e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005a32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3a:	f7fa fb97 	bl	800016c <__adddf3>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	4680      	mov	r8, r0
 8005a42:	4689      	mov	r9, r1
 8005a44:	e765      	b.n	8005912 <__kernel_rem_pio2+0x106>
 8005a46:	d105      	bne.n	8005a54 <__kernel_rem_pio2+0x248>
 8005a48:	1e7b      	subs	r3, r7, #1
 8005a4a:	aa0c      	add	r2, sp, #48	; 0x30
 8005a4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a50:	15c3      	asrs	r3, r0, #23
 8005a52:	e79f      	b.n	8005994 <__kernel_rem_pio2+0x188>
 8005a54:	2200      	movs	r2, #0
 8005a56:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <__kernel_rem_pio2+0x320>)
 8005a58:	f7fa ffc4 	bl	80009e4 <__aeabi_dcmpge>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d143      	bne.n	8005ae8 <__kernel_rem_pio2+0x2dc>
 8005a60:	9000      	str	r0, [sp, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	4640      	mov	r0, r8
 8005a68:	4649      	mov	r1, r9
 8005a6a:	f7fa ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f000 80c3 	beq.w	8005bfa <__kernel_rem_pio2+0x3ee>
 8005a74:	1e7c      	subs	r4, r7, #1
 8005a76:	4623      	mov	r3, r4
 8005a78:	2200      	movs	r2, #0
 8005a7a:	9902      	ldr	r1, [sp, #8]
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	da6a      	bge.n	8005b56 <__kernel_rem_pio2+0x34a>
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	f000 8084 	beq.w	8005b8e <__kernel_rem_pio2+0x382>
 8005a86:	ab0c      	add	r3, sp, #48	; 0x30
 8005a88:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005a8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80b0 	beq.w	8005bf6 <__kernel_rem_pio2+0x3ea>
 8005a96:	4652      	mov	r2, sl
 8005a98:	2000      	movs	r0, #0
 8005a9a:	4921      	ldr	r1, [pc, #132]	; (8005b20 <__kernel_rem_pio2+0x314>)
 8005a9c:	f000 fb40 	bl	8006120 <scalbn>
 8005aa0:	4625      	mov	r5, r4
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	f04f 0a00 	mov.w	sl, #0
 8005aaa:	00e3      	lsls	r3, r4, #3
 8005aac:	aa98      	add	r2, sp, #608	; 0x260
 8005aae:	eb02 0803 	add.w	r8, r2, r3
 8005ab2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8005b24 <__kernel_rem_pio2+0x318>
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	f280 80d2 	bge.w	8005c66 <__kernel_rem_pio2+0x45a>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	9a06      	ldr	r2, [sp, #24]
 8005ac6:	ab98      	add	r3, sp, #608	; 0x260
 8005ac8:	189e      	adds	r6, r3, r2
 8005aca:	3ea8      	subs	r6, #168	; 0xa8
 8005acc:	1b63      	subs	r3, r4, r5
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f2c0 80f9 	blt.w	8005cc6 <__kernel_rem_pio2+0x4ba>
 8005ad4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005b30 <__kernel_rem_pio2+0x324>
 8005ad8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8005adc:	f04f 0a00 	mov.w	sl, #0
 8005ae0:	f04f 0b00 	mov.w	fp, #0
 8005ae4:	2700      	movs	r7, #0
 8005ae6:	e0e2      	b.n	8005cae <__kernel_rem_pio2+0x4a2>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	e756      	b.n	800599c <__kernel_rem_pio2+0x190>
 8005aee:	ab0c      	add	r3, sp, #48	; 0x30
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	b94c      	cbnz	r4, 8005b0a <__kernel_rem_pio2+0x2fe>
 8005af6:	b12b      	cbz	r3, 8005b04 <__kernel_rem_pio2+0x2f8>
 8005af8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005afc:	a80c      	add	r0, sp, #48	; 0x30
 8005afe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005b02:	2301      	movs	r3, #1
 8005b04:	3201      	adds	r2, #1
 8005b06:	461c      	mov	r4, r3
 8005b08:	e74f      	b.n	80059aa <__kernel_rem_pio2+0x19e>
 8005b0a:	1acb      	subs	r3, r1, r3
 8005b0c:	a80c      	add	r0, sp, #48	; 0x30
 8005b0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005b12:	4623      	mov	r3, r4
 8005b14:	e7f6      	b.n	8005b04 <__kernel_rem_pio2+0x2f8>
 8005b16:	bf00      	nop
 8005b18:	08006590 	.word	0x08006590
 8005b1c:	40200000 	.word	0x40200000
 8005b20:	3ff00000 	.word	0x3ff00000
 8005b24:	3e700000 	.word	0x3e700000
 8005b28:	41700000 	.word	0x41700000
 8005b2c:	3fe00000 	.word	0x3fe00000
 8005b30:	08006548 	.word	0x08006548
 8005b34:	1e7a      	subs	r2, r7, #1
 8005b36:	ab0c      	add	r3, sp, #48	; 0x30
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b40:	a90c      	add	r1, sp, #48	; 0x30
 8005b42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b46:	e73e      	b.n	80059c6 <__kernel_rem_pio2+0x1ba>
 8005b48:	1e7a      	subs	r2, r7, #1
 8005b4a:	ab0c      	add	r3, sp, #48	; 0x30
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b54:	e7f4      	b.n	8005b40 <__kernel_rem_pio2+0x334>
 8005b56:	a90c      	add	r1, sp, #48	; 0x30
 8005b58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	e78b      	b.n	8005a7a <__kernel_rem_pio2+0x26e>
 8005b62:	3401      	adds	r4, #1
 8005b64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	d0fa      	beq.n	8005b62 <__kernel_rem_pio2+0x356>
 8005b6c:	ab98      	add	r3, sp, #608	; 0x260
 8005b6e:	449b      	add	fp, r3
 8005b70:	9b07      	ldr	r3, [sp, #28]
 8005b72:	1c7e      	adds	r6, r7, #1
 8005b74:	19dd      	adds	r5, r3, r7
 8005b76:	ab98      	add	r3, sp, #608	; 0x260
 8005b78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005b7c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8005b80:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8005b84:	443c      	add	r4, r7
 8005b86:	42b4      	cmp	r4, r6
 8005b88:	da04      	bge.n	8005b94 <__kernel_rem_pio2+0x388>
 8005b8a:	4627      	mov	r7, r4
 8005b8c:	e6b1      	b.n	80058f2 <__kernel_rem_pio2+0xe6>
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	2401      	movs	r4, #1
 8005b92:	e7e7      	b.n	8005b64 <__kernel_rem_pio2+0x358>
 8005b94:	f105 0308 	add.w	r3, r5, #8
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9c:	2700      	movs	r7, #0
 8005b9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ba2:	f7fa fc2f 	bl	8000404 <__aeabi_i2d>
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	f04f 0900 	mov.w	r9, #0
 8005bae:	9b08      	ldr	r3, [sp, #32]
 8005bb0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005bb4:	3b08      	subs	r3, #8
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f105 0310 	add.w	r3, r5, #16
 8005bbc:	9305      	str	r3, [sp, #20]
 8005bbe:	9b06      	ldr	r3, [sp, #24]
 8005bc0:	429f      	cmp	r7, r3
 8005bc2:	dd04      	ble.n	8005bce <__kernel_rem_pio2+0x3c2>
 8005bc4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005bc8:	3601      	adds	r6, #1
 8005bca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bcc:	e7db      	b.n	8005b86 <__kernel_rem_pio2+0x37a>
 8005bce:	9905      	ldr	r1, [sp, #20]
 8005bd0:	9d00      	ldr	r5, [sp, #0]
 8005bd2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005bd6:	9105      	str	r1, [sp, #20]
 8005bd8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005bdc:	9500      	str	r5, [sp, #0]
 8005bde:	f7fa fc7b 	bl	80004d8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4640      	mov	r0, r8
 8005be8:	4649      	mov	r1, r9
 8005bea:	f7fa fabf 	bl	800016c <__adddf3>
 8005bee:	3701      	adds	r7, #1
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	4689      	mov	r9, r1
 8005bf4:	e7e3      	b.n	8005bbe <__kernel_rem_pio2+0x3b2>
 8005bf6:	3c01      	subs	r4, #1
 8005bf8:	e745      	b.n	8005a86 <__kernel_rem_pio2+0x27a>
 8005bfa:	f1ca 0200 	rsb	r2, sl, #0
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f000 fa8d 	bl	8006120 <scalbn>
 8005c06:	2200      	movs	r2, #0
 8005c08:	4ba3      	ldr	r3, [pc, #652]	; (8005e98 <__kernel_rem_pio2+0x68c>)
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	f7fa fee9 	bl	80009e4 <__aeabi_dcmpge>
 8005c12:	b1f8      	cbz	r0, 8005c54 <__kernel_rem_pio2+0x448>
 8005c14:	2200      	movs	r2, #0
 8005c16:	4ba1      	ldr	r3, [pc, #644]	; (8005e9c <__kernel_rem_pio2+0x690>)
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa fc5c 	bl	80004d8 <__aeabi_dmul>
 8005c20:	f7fa fef4 	bl	8000a0c <__aeabi_d2iz>
 8005c24:	4606      	mov	r6, r0
 8005c26:	f7fa fbed 	bl	8000404 <__aeabi_i2d>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4b9a      	ldr	r3, [pc, #616]	; (8005e98 <__kernel_rem_pio2+0x68c>)
 8005c2e:	f7fa fc53 	bl	80004d8 <__aeabi_dmul>
 8005c32:	460b      	mov	r3, r1
 8005c34:	4602      	mov	r2, r0
 8005c36:	4629      	mov	r1, r5
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7fa fa95 	bl	8000168 <__aeabi_dsub>
 8005c3e:	f7fa fee5 	bl	8000a0c <__aeabi_d2iz>
 8005c42:	1c7c      	adds	r4, r7, #1
 8005c44:	ab0c      	add	r3, sp, #48	; 0x30
 8005c46:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005c4a:	f10a 0a18 	add.w	sl, sl, #24
 8005c4e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005c52:	e720      	b.n	8005a96 <__kernel_rem_pio2+0x28a>
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fed8 	bl	8000a0c <__aeabi_d2iz>
 8005c5c:	ab0c      	add	r3, sp, #48	; 0x30
 8005c5e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005c62:	463c      	mov	r4, r7
 8005c64:	e717      	b.n	8005a96 <__kernel_rem_pio2+0x28a>
 8005c66:	ab0c      	add	r3, sp, #48	; 0x30
 8005c68:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c6c:	f7fa fbca 	bl	8000404 <__aeabi_i2d>
 8005c70:	4632      	mov	r2, r6
 8005c72:	463b      	mov	r3, r7
 8005c74:	f7fa fc30 	bl	80004d8 <__aeabi_dmul>
 8005c78:	4652      	mov	r2, sl
 8005c7a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	3d01      	subs	r5, #1
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460f      	mov	r7, r1
 8005c8e:	e715      	b.n	8005abc <__kernel_rem_pio2+0x2b0>
 8005c90:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8005c94:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005c98:	f7fa fc1e 	bl	80004d8 <__aeabi_dmul>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	f7fa fa62 	bl	800016c <__adddf3>
 8005ca8:	4682      	mov	sl, r0
 8005caa:	468b      	mov	fp, r1
 8005cac:	3701      	adds	r7, #1
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	429f      	cmp	r7, r3
 8005cb2:	dc01      	bgt.n	8005cb8 <__kernel_rem_pio2+0x4ac>
 8005cb4:	42bd      	cmp	r5, r7
 8005cb6:	daeb      	bge.n	8005c90 <__kernel_rem_pio2+0x484>
 8005cb8:	ab48      	add	r3, sp, #288	; 0x120
 8005cba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005cbe:	e9c3 ab00 	strd	sl, fp, [r3]
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	e702      	b.n	8005acc <__kernel_rem_pio2+0x2c0>
 8005cc6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d86c      	bhi.n	8005da6 <__kernel_rem_pio2+0x59a>
 8005ccc:	e8df f003 	tbb	[pc, r3]
 8005cd0:	022f2f59 	.word	0x022f2f59
 8005cd4:	9a06      	ldr	r2, [sp, #24]
 8005cd6:	ab48      	add	r3, sp, #288	; 0x120
 8005cd8:	189d      	adds	r5, r3, r2
 8005cda:	46aa      	mov	sl, r5
 8005cdc:	46a3      	mov	fp, r4
 8005cde:	f1bb 0f00 	cmp.w	fp, #0
 8005ce2:	f300 8087 	bgt.w	8005df4 <__kernel_rem_pio2+0x5e8>
 8005ce6:	46a2      	mov	sl, r4
 8005ce8:	f1ba 0f01 	cmp.w	sl, #1
 8005cec:	f300 809f 	bgt.w	8005e2e <__kernel_rem_pio2+0x622>
 8005cf0:	2700      	movs	r7, #0
 8005cf2:	463e      	mov	r6, r7
 8005cf4:	9d06      	ldr	r5, [sp, #24]
 8005cf6:	ab48      	add	r3, sp, #288	; 0x120
 8005cf8:	3508      	adds	r5, #8
 8005cfa:	441d      	add	r5, r3
 8005cfc:	2c01      	cmp	r4, #1
 8005cfe:	f300 80b3 	bgt.w	8005e68 <__kernel_rem_pio2+0x65c>
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8005d06:	9849      	ldr	r0, [sp, #292]	; 0x124
 8005d08:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8005d0a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 80b5 	bne.w	8005e7c <__kernel_rem_pio2+0x670>
 8005d12:	4603      	mov	r3, r0
 8005d14:	462a      	mov	r2, r5
 8005d16:	9804      	ldr	r0, [sp, #16]
 8005d18:	e9c0 2300 	strd	r2, r3, [r0]
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005d24:	463a      	mov	r2, r7
 8005d26:	4633      	mov	r3, r6
 8005d28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005d2c:	e03b      	b.n	8005da6 <__kernel_rem_pio2+0x59a>
 8005d2e:	f04f 0c00 	mov.w	ip, #0
 8005d32:	4626      	mov	r6, r4
 8005d34:	4667      	mov	r7, ip
 8005d36:	9d06      	ldr	r5, [sp, #24]
 8005d38:	ab48      	add	r3, sp, #288	; 0x120
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	441d      	add	r5, r3
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	da42      	bge.n	8005dc8 <__kernel_rem_pio2+0x5bc>
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d049      	beq.n	8005ddc <__kernel_rem_pio2+0x5d0>
 8005d48:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8005d4c:	4662      	mov	r2, ip
 8005d4e:	460b      	mov	r3, r1
 8005d50:	9904      	ldr	r1, [sp, #16]
 8005d52:	2601      	movs	r6, #1
 8005d54:	e9c1 2300 	strd	r2, r3, [r1]
 8005d58:	a948      	add	r1, sp, #288	; 0x120
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d60:	f7fa fa02 	bl	8000168 <__aeabi_dsub>
 8005d64:	4684      	mov	ip, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	ad48      	add	r5, sp, #288	; 0x120
 8005d6a:	42b4      	cmp	r4, r6
 8005d6c:	da38      	bge.n	8005de0 <__kernel_rem_pio2+0x5d4>
 8005d6e:	9b00      	ldr	r3, [sp, #0]
 8005d70:	b10b      	cbz	r3, 8005d76 <__kernel_rem_pio2+0x56a>
 8005d72:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005d76:	4662      	mov	r2, ip
 8005d78:	463b      	mov	r3, r7
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005d80:	e011      	b.n	8005da6 <__kernel_rem_pio2+0x59a>
 8005d82:	2700      	movs	r7, #0
 8005d84:	463d      	mov	r5, r7
 8005d86:	9b06      	ldr	r3, [sp, #24]
 8005d88:	aa98      	add	r2, sp, #608	; 0x260
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	da0f      	bge.n	8005db4 <__kernel_rem_pio2+0x5a8>
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	b10b      	cbz	r3, 8005d9c <__kernel_rem_pio2+0x590>
 8005d98:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	462b      	mov	r3, r5
 8005da0:	9904      	ldr	r1, [sp, #16]
 8005da2:	e9c1 2300 	strd	r2, r3, [r1]
 8005da6:	9b05      	ldr	r3, [sp, #20]
 8005da8:	f003 0007 	and.w	r0, r3, #7
 8005dac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	4638      	mov	r0, r7
 8005db6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa f9d6 	bl	800016c <__adddf3>
 8005dc0:	3c01      	subs	r4, #1
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	e7e3      	b.n	8005d90 <__kernel_rem_pio2+0x584>
 8005dc8:	4660      	mov	r0, ip
 8005dca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa f9cc 	bl	800016c <__adddf3>
 8005dd4:	3e01      	subs	r6, #1
 8005dd6:	4684      	mov	ip, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	e7b0      	b.n	8005d3e <__kernel_rem_pio2+0x532>
 8005ddc:	4639      	mov	r1, r7
 8005dde:	e7b5      	b.n	8005d4c <__kernel_rem_pio2+0x540>
 8005de0:	4660      	mov	r0, ip
 8005de2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa f9c0 	bl	800016c <__adddf3>
 8005dec:	3601      	adds	r6, #1
 8005dee:	4684      	mov	ip, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	e7ba      	b.n	8005d6a <__kernel_rem_pio2+0x55e>
 8005df4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8005df8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e04:	f7fa f9b2 	bl	800016c <__adddf3>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa f9a8 	bl	8000168 <__aeabi_dsub>
 8005e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e1c:	f7fa f9a6 	bl	800016c <__adddf3>
 8005e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e28:	e9ca 6700 	strd	r6, r7, [sl]
 8005e2c:	e757      	b.n	8005cde <__kernel_rem_pio2+0x4d2>
 8005e2e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8005e32:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e3e:	f7fa f995 	bl	800016c <__adddf3>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4680      	mov	r8, r0
 8005e48:	4689      	mov	r9, r1
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	f7fa f98b 	bl	8000168 <__aeabi_dsub>
 8005e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e56:	f7fa f989 	bl	800016c <__adddf3>
 8005e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e5e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005e62:	e9c5 8900 	strd	r8, r9, [r5]
 8005e66:	e73f      	b.n	8005ce8 <__kernel_rem_pio2+0x4dc>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e6e:	4631      	mov	r1, r6
 8005e70:	f7fa f97c 	bl	800016c <__adddf3>
 8005e74:	3c01      	subs	r4, #1
 8005e76:	4607      	mov	r7, r0
 8005e78:	460e      	mov	r6, r1
 8005e7a:	e73f      	b.n	8005cfc <__kernel_rem_pio2+0x4f0>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005e82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005e86:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005e8a:	601d      	str	r5, [r3, #0]
 8005e8c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005e90:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005e94:	615e      	str	r6, [r3, #20]
 8005e96:	e786      	b.n	8005da6 <__kernel_rem_pio2+0x59a>
 8005e98:	41700000 	.word	0x41700000
 8005e9c:	3e700000 	.word	0x3e700000

08005ea0 <__kernel_sin>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8005eaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005eae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005eb8:	da03      	bge.n	8005ec2 <__kernel_sin+0x22>
 8005eba:	f7fa fda7 	bl	8000a0c <__aeabi_d2iz>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d050      	beq.n	8005f64 <__kernel_sin+0xc4>
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f7fa fb05 	bl	80004d8 <__aeabi_dmul>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	4621      	mov	r1, r4
 8005eda:	f7fa fafd 	bl	80004d8 <__aeabi_dmul>
 8005ede:	a33e      	add	r3, pc, #248	; (adr r3, 8005fd8 <__kernel_sin+0x138>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4689      	mov	r9, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa faf4 	bl	80004d8 <__aeabi_dmul>
 8005ef0:	a33b      	add	r3, pc, #236	; (adr r3, 8005fe0 <__kernel_sin+0x140>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa f937 	bl	8000168 <__aeabi_dsub>
 8005efa:	4632      	mov	r2, r6
 8005efc:	463b      	mov	r3, r7
 8005efe:	f7fa faeb 	bl	80004d8 <__aeabi_dmul>
 8005f02:	a339      	add	r3, pc, #228	; (adr r3, 8005fe8 <__kernel_sin+0x148>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa f930 	bl	800016c <__adddf3>
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	f7fa fae2 	bl	80004d8 <__aeabi_dmul>
 8005f14:	a336      	add	r3, pc, #216	; (adr r3, 8005ff0 <__kernel_sin+0x150>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa f925 	bl	8000168 <__aeabi_dsub>
 8005f1e:	4632      	mov	r2, r6
 8005f20:	463b      	mov	r3, r7
 8005f22:	f7fa fad9 	bl	80004d8 <__aeabi_dmul>
 8005f26:	a334      	add	r3, pc, #208	; (adr r3, 8005ff8 <__kernel_sin+0x158>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa f91e 	bl	800016c <__adddf3>
 8005f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f34:	b9dd      	cbnz	r5, 8005f6e <__kernel_sin+0xce>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	f7fa facb 	bl	80004d8 <__aeabi_dmul>
 8005f42:	a32f      	add	r3, pc, #188	; (adr r3, 8006000 <__kernel_sin+0x160>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f90e 	bl	8000168 <__aeabi_dsub>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7fa fac2 	bl	80004d8 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4650      	mov	r0, sl
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	f7fa f906 	bl	800016c <__adddf3>
 8005f60:	4682      	mov	sl, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	4650      	mov	r0, sl
 8005f66:	4621      	mov	r1, r4
 8005f68:	b006      	add	sp, #24
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	2200      	movs	r2, #0
 8005f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <__kernel_sin+0x168>)
 8005f76:	f7fa faaf 	bl	80004d8 <__aeabi_dmul>
 8005f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa faa7 	bl	80004d8 <__aeabi_dmul>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f92:	f7fa f8e9 	bl	8000168 <__aeabi_dsub>
 8005f96:	4632      	mov	r2, r6
 8005f98:	463b      	mov	r3, r7
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa2:	f7fa f8e1 	bl	8000168 <__aeabi_dsub>
 8005fa6:	a316      	add	r3, pc, #88	; (adr r3, 8006000 <__kernel_sin+0x160>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	4606      	mov	r6, r0
 8005fae:	460f      	mov	r7, r1
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fa fa90 	bl	80004d8 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa f8d4 	bl	800016c <__adddf3>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4650      	mov	r0, sl
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f7fa f8cc 	bl	8000168 <__aeabi_dsub>
 8005fd0:	e7c6      	b.n	8005f60 <__kernel_sin+0xc0>
 8005fd2:	bf00      	nop
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	5acfd57c 	.word	0x5acfd57c
 8005fdc:	3de5d93a 	.word	0x3de5d93a
 8005fe0:	8a2b9ceb 	.word	0x8a2b9ceb
 8005fe4:	3e5ae5e6 	.word	0x3e5ae5e6
 8005fe8:	57b1fe7d 	.word	0x57b1fe7d
 8005fec:	3ec71de3 	.word	0x3ec71de3
 8005ff0:	19c161d5 	.word	0x19c161d5
 8005ff4:	3f2a01a0 	.word	0x3f2a01a0
 8005ff8:	1110f8a6 	.word	0x1110f8a6
 8005ffc:	3f811111 	.word	0x3f811111
 8006000:	55555549 	.word	0x55555549
 8006004:	3fc55555 	.word	0x3fc55555
 8006008:	3fe00000 	.word	0x3fe00000

0800600c <fabs>:
 800600c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006010:	4619      	mov	r1, r3
 8006012:	4770      	bx	lr
 8006014:	0000      	movs	r0, r0
	...

08006018 <floor>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006020:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006024:	2e13      	cmp	r6, #19
 8006026:	4607      	mov	r7, r0
 8006028:	460b      	mov	r3, r1
 800602a:	460c      	mov	r4, r1
 800602c:	4605      	mov	r5, r0
 800602e:	dc35      	bgt.n	800609c <floor+0x84>
 8006030:	2e00      	cmp	r6, #0
 8006032:	da16      	bge.n	8006062 <floor+0x4a>
 8006034:	a336      	add	r3, pc, #216	; (adr r3, 8006110 <floor+0xf8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f897 	bl	800016c <__adddf3>
 800603e:	2200      	movs	r2, #0
 8006040:	2300      	movs	r3, #0
 8006042:	f7fa fcd9 	bl	80009f8 <__aeabi_dcmpgt>
 8006046:	b148      	cbz	r0, 800605c <floor+0x44>
 8006048:	2c00      	cmp	r4, #0
 800604a:	da5b      	bge.n	8006104 <floor+0xec>
 800604c:	2500      	movs	r5, #0
 800604e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006052:	4a31      	ldr	r2, [pc, #196]	; (8006118 <floor+0x100>)
 8006054:	433b      	orrs	r3, r7
 8006056:	42ab      	cmp	r3, r5
 8006058:	bf18      	it	ne
 800605a:	4614      	movne	r4, r2
 800605c:	4623      	mov	r3, r4
 800605e:	462f      	mov	r7, r5
 8006060:	e026      	b.n	80060b0 <floor+0x98>
 8006062:	4a2e      	ldr	r2, [pc, #184]	; (800611c <floor+0x104>)
 8006064:	fa42 f806 	asr.w	r8, r2, r6
 8006068:	ea01 0208 	and.w	r2, r1, r8
 800606c:	4302      	orrs	r2, r0
 800606e:	d01f      	beq.n	80060b0 <floor+0x98>
 8006070:	a327      	add	r3, pc, #156	; (adr r3, 8006110 <floor+0xf8>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa f879 	bl	800016c <__adddf3>
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	f7fa fcbb 	bl	80009f8 <__aeabi_dcmpgt>
 8006082:	2800      	cmp	r0, #0
 8006084:	d0ea      	beq.n	800605c <floor+0x44>
 8006086:	2c00      	cmp	r4, #0
 8006088:	bfbe      	ittt	lt
 800608a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800608e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006092:	19a4      	addlt	r4, r4, r6
 8006094:	ea24 0408 	bic.w	r4, r4, r8
 8006098:	2500      	movs	r5, #0
 800609a:	e7df      	b.n	800605c <floor+0x44>
 800609c:	2e33      	cmp	r6, #51	; 0x33
 800609e:	dd0b      	ble.n	80060b8 <floor+0xa0>
 80060a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060a4:	d104      	bne.n	80060b0 <floor+0x98>
 80060a6:	4602      	mov	r2, r0
 80060a8:	f7fa f860 	bl	800016c <__adddf3>
 80060ac:	4607      	mov	r7, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4638      	mov	r0, r7
 80060b2:	4619      	mov	r1, r3
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80060c0:	fa22 f808 	lsr.w	r8, r2, r8
 80060c4:	ea18 0f00 	tst.w	r8, r0
 80060c8:	d0f2      	beq.n	80060b0 <floor+0x98>
 80060ca:	a311      	add	r3, pc, #68	; (adr r3, 8006110 <floor+0xf8>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f84c 	bl	800016c <__adddf3>
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f7fa fc8e 	bl	80009f8 <__aeabi_dcmpgt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0bd      	beq.n	800605c <floor+0x44>
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	da02      	bge.n	80060ea <floor+0xd2>
 80060e4:	2e14      	cmp	r6, #20
 80060e6:	d103      	bne.n	80060f0 <floor+0xd8>
 80060e8:	3401      	adds	r4, #1
 80060ea:	ea25 0508 	bic.w	r5, r5, r8
 80060ee:	e7b5      	b.n	800605c <floor+0x44>
 80060f0:	2301      	movs	r3, #1
 80060f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060f6:	fa03 f606 	lsl.w	r6, r3, r6
 80060fa:	4435      	add	r5, r6
 80060fc:	42bd      	cmp	r5, r7
 80060fe:	bf38      	it	cc
 8006100:	18e4      	addcc	r4, r4, r3
 8006102:	e7f2      	b.n	80060ea <floor+0xd2>
 8006104:	2500      	movs	r5, #0
 8006106:	462c      	mov	r4, r5
 8006108:	e7a8      	b.n	800605c <floor+0x44>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	8800759c 	.word	0x8800759c
 8006114:	7e37e43c 	.word	0x7e37e43c
 8006118:	bff00000 	.word	0xbff00000
 800611c:	000fffff 	.word	0x000fffff

08006120 <scalbn>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	4616      	mov	r6, r2
 8006124:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	460b      	mov	r3, r1
 800612e:	b982      	cbnz	r2, 8006152 <scalbn+0x32>
 8006130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006134:	4303      	orrs	r3, r0
 8006136:	d034      	beq.n	80061a2 <scalbn+0x82>
 8006138:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <scalbn+0xd0>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa f9cc 	bl	80004d8 <__aeabi_dmul>
 8006140:	4b2c      	ldr	r3, [pc, #176]	; (80061f4 <scalbn+0xd4>)
 8006142:	4604      	mov	r4, r0
 8006144:	429e      	cmp	r6, r3
 8006146:	460d      	mov	r5, r1
 8006148:	da0d      	bge.n	8006166 <scalbn+0x46>
 800614a:	a325      	add	r3, pc, #148	; (adr r3, 80061e0 <scalbn+0xc0>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	e01c      	b.n	800618c <scalbn+0x6c>
 8006152:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006156:	42ba      	cmp	r2, r7
 8006158:	d109      	bne.n	800616e <scalbn+0x4e>
 800615a:	4602      	mov	r2, r0
 800615c:	f7fa f806 	bl	800016c <__adddf3>
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	e01d      	b.n	80061a2 <scalbn+0x82>
 8006166:	460b      	mov	r3, r1
 8006168:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800616c:	3a36      	subs	r2, #54	; 0x36
 800616e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006172:	4432      	add	r2, r6
 8006174:	428a      	cmp	r2, r1
 8006176:	dd0c      	ble.n	8006192 <scalbn+0x72>
 8006178:	4622      	mov	r2, r4
 800617a:	462b      	mov	r3, r5
 800617c:	a11a      	add	r1, pc, #104	; (adr r1, 80061e8 <scalbn+0xc8>)
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	f000 f83b 	bl	80061fc <copysign>
 8006186:	a318      	add	r3, pc, #96	; (adr r3, 80061e8 <scalbn+0xc8>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f7fa f9a4 	bl	80004d8 <__aeabi_dmul>
 8006190:	e7e6      	b.n	8006160 <scalbn+0x40>
 8006192:	2a00      	cmp	r2, #0
 8006194:	dd08      	ble.n	80061a8 <scalbn+0x88>
 8006196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800619a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800619e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061ac:	da0b      	bge.n	80061c6 <scalbn+0xa6>
 80061ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061b2:	429e      	cmp	r6, r3
 80061b4:	4622      	mov	r2, r4
 80061b6:	462b      	mov	r3, r5
 80061b8:	dce0      	bgt.n	800617c <scalbn+0x5c>
 80061ba:	a109      	add	r1, pc, #36	; (adr r1, 80061e0 <scalbn+0xc0>)
 80061bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c0:	f000 f81c 	bl	80061fc <copysign>
 80061c4:	e7c1      	b.n	800614a <scalbn+0x2a>
 80061c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061ca:	3236      	adds	r2, #54	; 0x36
 80061cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061d4:	4620      	mov	r0, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	2200      	movs	r2, #0
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <scalbn+0xd8>)
 80061dc:	e7d6      	b.n	800618c <scalbn+0x6c>
 80061de:	bf00      	nop
 80061e0:	c2f8f359 	.word	0xc2f8f359
 80061e4:	01a56e1f 	.word	0x01a56e1f
 80061e8:	8800759c 	.word	0x8800759c
 80061ec:	7e37e43c 	.word	0x7e37e43c
 80061f0:	43500000 	.word	0x43500000
 80061f4:	ffff3cb0 	.word	0xffff3cb0
 80061f8:	3c900000 	.word	0x3c900000

080061fc <copysign>:
 80061fc:	b530      	push	{r4, r5, lr}
 80061fe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006206:	ea42 0503 	orr.w	r5, r2, r3
 800620a:	4629      	mov	r1, r5
 800620c:	bd30      	pop	{r4, r5, pc}
	...

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
