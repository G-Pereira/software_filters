
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08003a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003a78  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c09e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c62  00000000  00000000  0002c137  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015312  00000000  00000000  0002ead8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007649  00000000  00000000  00043dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000701ff  00000000  00000000  0004b433  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff8  00000000  00000000  000bb6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003950 	.word	0x08003950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003950 	.word	0x08003950

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_frsub>:
 8000998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800099c:	e002      	b.n	80009a4 <__addsf3>
 800099e:	bf00      	nop

080009a0 <__aeabi_fsub>:
 80009a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a4 <__addsf3>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	bf1f      	itttt	ne
 80009a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ac:	ea92 0f03 	teqne	r2, r3
 80009b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b8:	d06a      	beq.n	8000a90 <__addsf3+0xec>
 80009ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c2:	bfc1      	itttt	gt
 80009c4:	18d2      	addgt	r2, r2, r3
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	4048      	eorgt	r0, r1
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	bf88      	it	hi
 80009d4:	4770      	bxhi	lr
 80009d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4249      	negne	r1, r1
 80009f6:	ea92 0f03 	teq	r2, r3
 80009fa:	d03f      	beq.n	8000a7c <__addsf3+0xd8>
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	fa41 fc03 	asr.w	ip, r1, r3
 8000a04:	eb10 000c 	adds.w	r0, r0, ip
 8000a08:	f1c3 0320 	rsb	r3, r3, #32
 8000a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a14:	d502      	bpl.n	8000a1c <__addsf3+0x78>
 8000a16:	4249      	negs	r1, r1
 8000a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a20:	d313      	bcc.n	8000a4a <__addsf3+0xa6>
 8000a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a26:	d306      	bcc.n	8000a36 <__addsf3+0x92>
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	d251      	bcs.n	8000ada <__addsf3+0x136>
 8000a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3e:	bf08      	it	eq
 8000a40:	f020 0001 	biceq.w	r0, r0, #1
 8000a44:	ea40 0003 	orr.w	r0, r0, r3
 8000a48:	4770      	bx	lr
 8000a4a:	0049      	lsls	r1, r1, #1
 8000a4c:	eb40 0000 	adc.w	r0, r0, r0
 8000a50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a54:	f1a2 0201 	sub.w	r2, r2, #1
 8000a58:	d1ed      	bne.n	8000a36 <__addsf3+0x92>
 8000a5a:	fab0 fc80 	clz	ip, r0
 8000a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a62:	ebb2 020c 	subs.w	r2, r2, ip
 8000a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6a:	bfaa      	itet	ge
 8000a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a70:	4252      	neglt	r2, r2
 8000a72:	4318      	orrge	r0, r3
 8000a74:	bfbc      	itt	lt
 8000a76:	40d0      	lsrlt	r0, r2
 8000a78:	4318      	orrlt	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	f092 0f00 	teq	r2, #0
 8000a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a84:	bf06      	itte	eq
 8000a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8a:	3201      	addeq	r2, #1
 8000a8c:	3b01      	subne	r3, #1
 8000a8e:	e7b5      	b.n	80009fc <__addsf3+0x58>
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d021      	beq.n	8000ae4 <__addsf3+0x140>
 8000aa0:	ea92 0f03 	teq	r2, r3
 8000aa4:	d004      	beq.n	8000ab0 <__addsf3+0x10c>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	bf08      	it	eq
 8000aac:	4608      	moveq	r0, r1
 8000aae:	4770      	bx	lr
 8000ab0:	ea90 0f01 	teq	r0, r1
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2000      	movne	r0, #0
 8000ab8:	4770      	bxne	lr
 8000aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000abe:	d104      	bne.n	8000aca <__addsf3+0x126>
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ace:	bf3c      	itt	cc
 8000ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bxcc	lr
 8000ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae8:	bf16      	itet	ne
 8000aea:	4608      	movne	r0, r1
 8000aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af0:	4601      	movne	r1, r0
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	bf06      	itte	eq
 8000af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afa:	ea90 0f01 	teqeq	r0, r1
 8000afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_ui2f>:
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e004      	b.n	8000b14 <__aeabi_i2f+0x8>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_i2f>:
 8000b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	bf48      	it	mi
 8000b12:	4240      	negmi	r0, r0
 8000b14:	ea5f 0c00 	movs.w	ip, r0
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b20:	4601      	mov	r1, r0
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	e01c      	b.n	8000b62 <__aeabi_l2f+0x2a>

08000b28 <__aeabi_ul2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e00a      	b.n	8000b4c <__aeabi_l2f+0x14>
 8000b36:	bf00      	nop

08000b38 <__aeabi_l2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_l2f+0x14>
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	ea5f 0c01 	movs.w	ip, r1
 8000b50:	bf02      	ittt	eq
 8000b52:	4684      	moveq	ip, r0
 8000b54:	4601      	moveq	r1, r0
 8000b56:	2000      	moveq	r0, #0
 8000b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b66:	fabc f28c 	clz	r2, ip
 8000b6a:	3a08      	subs	r2, #8
 8000b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b70:	db10      	blt.n	8000b94 <__aeabi_l2f+0x5c>
 8000b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7c:	f1c2 0220 	rsb	r2, r2, #32
 8000b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b84:	fa20 f202 	lsr.w	r2, r0, r2
 8000b88:	eb43 0002 	adc.w	r0, r3, r2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f102 0220 	add.w	r2, r2, #32
 8000b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_fmul>:
 8000bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc2:	ea92 0f0c 	teqne	r2, ip
 8000bc6:	ea93 0f0c 	teqne	r3, ip
 8000bca:	d06f      	beq.n	8000cac <__aeabi_fmul+0xf8>
 8000bcc:	441a      	add	r2, r3
 8000bce:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd2:	0240      	lsls	r0, r0, #9
 8000bd4:	bf18      	it	ne
 8000bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bda:	d01e      	beq.n	8000c1a <__aeabi_fmul+0x66>
 8000bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf4:	bf3e      	ittt	cc
 8000bf6:	0049      	lslcc	r1, r1, #1
 8000bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	ea40 0001 	orr.w	r0, r0, r1
 8000c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c06:	2afd      	cmp	r2, #253	; 0xfd
 8000c08:	d81d      	bhi.n	8000c46 <__aeabi_fmul+0x92>
 8000c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	0249      	lsleq	r1, r1, #9
 8000c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2e:	3a7f      	subs	r2, #127	; 0x7f
 8000c30:	bfc2      	ittt	gt
 8000c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3a:	4770      	bxgt	lr
 8000c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	3a01      	subs	r2, #1
 8000c46:	dc5d      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000c48:	f112 0f19 	cmn.w	r2, #25
 8000c4c:	bfdc      	itt	le
 8000c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	4770      	bxle	lr
 8000c54:	f1c2 0200 	rsb	r2, r2, #0
 8000c58:	0041      	lsls	r1, r0, #1
 8000c5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5e:	f1c2 0220 	rsb	r2, r2, #32
 8000c62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6a:	f140 0000 	adc.w	r0, r0, #0
 8000c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c72:	bf08      	it	eq
 8000c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c78:	4770      	bx	lr
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xce>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e78f      	b.n	8000bcc <__aeabi_fmul+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	bf18      	it	ne
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d00a      	beq.n	8000cd2 <__aeabi_fmul+0x11e>
 8000cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc0:	bf18      	it	ne
 8000cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	d1d8      	bne.n	8000c7a <__aeabi_fmul+0xc6>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f090 0f00 	teq	r0, #0
 8000cd6:	bf17      	itett	ne
 8000cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	f091 0f00 	teqne	r1, #0
 8000ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce6:	d014      	beq.n	8000d12 <__aeabi_fmul+0x15e>
 8000ce8:	ea92 0f0c 	teq	r2, ip
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fmul+0x13e>
 8000cee:	0242      	lsls	r2, r0, #9
 8000cf0:	d10f      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000cf2:	ea93 0f0c 	teq	r3, ip
 8000cf6:	d103      	bne.n	8000d00 <__aeabi_fmul+0x14c>
 8000cf8:	024b      	lsls	r3, r1, #9
 8000cfa:	bf18      	it	ne
 8000cfc:	4608      	movne	r0, r1
 8000cfe:	d108      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000d00:	ea80 0001 	eor.w	r0, r0, r1
 8000d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	4770      	bx	lr
 8000d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fdiv>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d069      	beq.n	8000e08 <__aeabi_fdiv+0xec>
 8000d34:	eba2 0203 	sub.w	r2, r2, r3
 8000d38:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3c:	0249      	lsls	r1, r1, #9
 8000d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d42:	d037      	beq.n	8000db4 <__aeabi_fdiv+0x98>
 8000d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf38      	it	cc
 8000d58:	005b      	lslcc	r3, r3, #1
 8000d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d62:	428b      	cmp	r3, r1
 8000d64:	bf24      	itt	cs
 8000d66:	1a5b      	subcs	r3, r3, r1
 8000d68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7e:	bf24      	itt	cs
 8000d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	bf18      	it	ne
 8000d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9e:	d1e0      	bne.n	8000d62 <__aeabi_fdiv+0x46>
 8000da0:	2afd      	cmp	r2, #253	; 0xfd
 8000da2:	f63f af50 	bhi.w	8000c46 <__aeabi_fmul+0x92>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbc:	327f      	adds	r2, #127	; 0x7f
 8000dbe:	bfc2      	ittt	gt
 8000dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc8:	4770      	bxgt	lr
 8000dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	e737      	b.n	8000c46 <__aeabi_fmul+0x92>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0040      	lsleq	r0, r0, #1
 8000de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de6:	3a01      	subeq	r2, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xc2>
 8000dea:	ea40 000c 	orr.w	r0, r0, ip
 8000dee:	f093 0f00 	teq	r3, #0
 8000df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0049      	lsleq	r1, r1, #1
 8000dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfe:	3b01      	subeq	r3, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xda>
 8000e02:	ea41 010c 	orr.w	r1, r1, ip
 8000e06:	e795      	b.n	8000d34 <__aeabi_fdiv+0x18>
 8000e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d108      	bne.n	8000e24 <__aeabi_fdiv+0x108>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	f47f af7d 	bne.w	8000d12 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	f47f af70 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e776      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	d104      	bne.n	8000e34 <__aeabi_fdiv+0x118>
 8000e2a:	024b      	lsls	r3, r1, #9
 8000e2c:	f43f af4c 	beq.w	8000cc8 <__aeabi_fmul+0x114>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e76e      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1ca      	bne.n	8000dd6 <__aeabi_fdiv+0xba>
 8000e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e44:	f47f af5c 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	f47f af3c 	bne.w	8000cc8 <__aeabi_fmul+0x114>
 8000e50:	e75f      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e52:	bf00      	nop

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x28>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fd17 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f001 ffe0 	bl	8002e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd21 	bl	80018e6 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 fcf7 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	20000000 	.word	0x20000000

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000004 	.word	0x20000004
 8000f00:	20000098 	.word	0x20000098

08000f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000098 	.word	0x20000098

08000f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0be      	b.n	80010b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 ff9e 	bl	8002e98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fbb1 	bl	80016c4 <ADC_ConversionStop_Disable>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 8099 	bne.w	80010a6 <HAL_ADC_Init+0x18e>
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 8095 	bne.w	80010a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f84:	f023 0302 	bic.w	r3, r3, #2
 8000f88:	f043 0202 	orr.w	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000fa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb0:	d003      	beq.n	8000fba <HAL_ADC_Init+0xa2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_ADC_Init+0xa8>
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	e000      	b.n	8000fc2 <HAL_ADC_Init+0xaa>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d119      	bne.n	8001004 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	035a      	lsls	r2, r3, #13
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e00b      	b.n	8001004 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	f043 0220 	orr.w	r2, r3, #32
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_ADC_Init+0x1a8>)
 8001020:	4013      	ands	r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	430b      	orrs	r3, r1
 800102a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001034:	d003      	beq.n	800103e <HAL_ADC_Init+0x126>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d104      	bne.n	8001048 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	3b01      	subs	r3, #1
 8001044:	051b      	lsls	r3, r3, #20
 8001046:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_ADC_Init+0x1ac>)
 8001064:	4013      	ands	r3, r2
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	429a      	cmp	r2, r3
 800106a:	d10b      	bne.n	8001084 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001082:	e018      	b.n	80010b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f023 0312 	bic.w	r3, r3, #18
 800108c:	f043 0210 	orr.w	r2, r3, #16
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010a4:	e007      	b.n	80010b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f043 0210 	orr.w	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	ffe1f7fd 	.word	0xffe1f7fd
 80010c4:	ff1f0efe 	.word	0xff1f0efe

080010c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start+0x1a>
 80010de:	2302      	movs	r3, #2
 80010e0:	e098      	b.n	8001214 <HAL_ADC_Start+0x14c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fa98 	bl	8001620 <ADC_Enable>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8087 	bne.w	800120a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a41      	ldr	r2, [pc, #260]	; (800121c <HAL_ADC_Start+0x154>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d105      	bne.n	8001126 <HAL_ADC_Start+0x5e>
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_ADC_Start+0x158>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d115      	bne.n	8001152 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d026      	beq.n	800118e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001150:	e01d      	b.n	800118e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <HAL_ADC_Start+0x158>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d004      	beq.n	8001172 <HAL_ADC_Start+0xaa>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_ADC_Start+0x154>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10d      	bne.n	800118e <HAL_ADC_Start+0xc6>
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <HAL_ADC_Start+0x158>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001186:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	f023 0206 	bic.w	r2, r3, #6
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a6:	e002      	b.n	80011ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f06f 0202 	mvn.w	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ce:	d113      	bne.n	80011f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011d4:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_ADC_Start+0x154>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d105      	bne.n	80011e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_ADC_Start+0x158>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d108      	bne.n	80011f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e00c      	b.n	8001212 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	e003      	b.n	8001212 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40012800 	.word	0x40012800
 8001220:	40012400 	.word	0x40012400

08001224 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800123a:	f7ff fe63 	bl	8000f04 <HAL_GetTick>
 800123e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	f043 0220 	orr.w	r2, r3, #32
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0c8      	b.n	80013f8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12a      	bne.n	80012ca <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800127e:	2b00      	cmp	r3, #0
 8001280:	d123      	bne.n	80012ca <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001282:	e01a      	b.n	80012ba <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d016      	beq.n	80012ba <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_ADC_PollForConversion+0x7e>
 8001292:	f7ff fe37 	bl	8000f04 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20b      	bcs.n	80012ba <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e09e      	b.n	80013f8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0dd      	beq.n	8001284 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012c8:	e06c      	b.n	80013a4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012ca:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <HAL_ADC_PollForConversion+0x1dc>)
 80012cc:	681c      	ldr	r4, [r3, #0]
 80012ce:	2002      	movs	r0, #2
 80012d0:	f001 f94c 	bl	800256c <HAL_RCCEx_GetPeriphCLKFreq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	4b48      	ldr	r3, [pc, #288]	; (8001404 <HAL_ADC_PollForConversion+0x1e0>)
 80012e2:	400b      	ands	r3, r1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <HAL_ADC_PollForConversion+0xf6>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_ADC_PollForConversion+0x1e4>)
 80012f0:	400b      	ands	r3, r1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d111      	bne.n	800131a <HAL_ADC_PollForConversion+0xf6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6919      	ldr	r1, [r3, #16]
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_ADC_PollForConversion+0x1e8>)
 80012fe:	400b      	ands	r3, r1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d108      	bne.n	8001316 <HAL_ADC_PollForConversion+0xf2>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68d9      	ldr	r1, [r3, #12]
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_ADC_PollForConversion+0x1ec>)
 800130c:	400b      	ands	r3, r1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_PollForConversion+0xf2>
 8001312:	2314      	movs	r3, #20
 8001314:	e020      	b.n	8001358 <HAL_ADC_PollForConversion+0x134>
 8001316:	2329      	movs	r3, #41	; 0x29
 8001318:	e01e      	b.n	8001358 <HAL_ADC_PollForConversion+0x134>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6919      	ldr	r1, [r3, #16]
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_ADC_PollForConversion+0x1e8>)
 8001322:	400b      	ands	r3, r1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <HAL_ADC_PollForConversion+0x112>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_ADC_PollForConversion+0x1ec>)
 8001330:	400b      	ands	r3, r1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <HAL_ADC_PollForConversion+0x12e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6919      	ldr	r1, [r3, #16]
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_ADC_PollForConversion+0x1f0>)
 800133e:	400b      	ands	r3, r1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <HAL_ADC_PollForConversion+0x132>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_ADC_PollForConversion+0x1f0>)
 800134c:	400b      	ands	r3, r1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_PollForConversion+0x132>
 8001352:	2354      	movs	r3, #84	; 0x54
 8001354:	e000      	b.n	8001358 <HAL_ADC_PollForConversion+0x134>
 8001356:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800135e:	e01d      	b.n	800139c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d016      	beq.n	8001396 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_PollForConversion+0x15a>
 800136e:	f7ff fdc9 	bl	8000f04 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d20b      	bcs.n	8001396 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f043 0204 	orr.w	r2, r3, #4
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e030      	b.n	80013f8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8dd      	bhi.n	8001360 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0212 	mvn.w	r2, #18
 80013ac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013c8:	d115      	bne.n	80013f6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d111      	bne.n	80013f6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	20000008 	.word	0x20000008
 8001404:	24924924 	.word	0x24924924
 8001408:	00924924 	.word	0x00924924
 800140c:	12492492 	.word	0x12492492
 8001410:	00492492 	.word	0x00492492
 8001414:	00249249 	.word	0x00249249

08001418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x20>
 800144c:	2302      	movs	r3, #2
 800144e:	e0dc      	b.n	800160a <HAL_ADC_ConfigChannel+0x1da>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d81c      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b05      	subs	r3, #5
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b05      	subs	r3, #5
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
 8001498:	e03c      	b.n	8001514 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d81c      	bhi.n	80014dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	3b23      	subs	r3, #35	; 0x23
 80014b4:	221f      	movs	r2, #31
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4019      	ands	r1, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b23      	subs	r3, #35	; 0x23
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
 80014da:	e01b      	b.n	8001514 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b41      	subs	r3, #65	; 0x41
 80014ee:	221f      	movs	r2, #31
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4019      	ands	r1, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3b41      	subs	r3, #65	; 0x41
 8001508:	fa00 f203 	lsl.w	r2, r0, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d91c      	bls.n	8001556 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68d9      	ldr	r1, [r3, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1e      	subs	r3, #30
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	4019      	ands	r1, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6898      	ldr	r0, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	3b1e      	subs	r3, #30
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	e019      	b.n	800158a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	2207      	movs	r2, #7
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	4019      	ands	r1, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6898      	ldr	r0, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	fa00 f203 	lsl.w	r2, r0, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d003      	beq.n	800159a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001596:	2b11      	cmp	r3, #17
 8001598:	d132      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_ADC_ConfigChannel+0x1e4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d125      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d126      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015c0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d11a      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_ConfigChannel+0x1e8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <HAL_ADC_ConfigChannel+0x1ec>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	0c9a      	lsrs	r2, r3, #18
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x1b2>
 80015ee:	e007      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f043 0220 	orr.w	r2, r3, #32
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40012400 	.word	0x40012400
 8001618:	20000008 	.word	0x20000008
 800161c:	431bde83 	.word	0x431bde83

08001620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d039      	beq.n	80016b2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <ADC_Enable+0x9c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <ADC_Enable+0xa0>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9b      	lsrs	r3, r3, #18
 800165a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800165c:	e002      	b.n	8001664 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800166a:	f7ff fc4b 	bl	8000f04 <HAL_GetTick>
 800166e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001670:	e018      	b.n	80016a4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001672:	f7ff fc47 	bl	8000f04 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d911      	bls.n	80016a4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e007      	b.n	80016b4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1df      	bne.n	8001672 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000008 	.word	0x20000008
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d127      	bne.n	800172e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ee:	f7ff fc09 	bl	8000f04 <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f4:	e014      	b.n	8001720 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f6:	f7ff fc05 	bl	8000f04 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d90d      	bls.n	8001720 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e007      	b.n	8001730 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d0e3      	beq.n	80016f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <NVIC_SetPriorityGrouping+0x44>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <NVIC_SetPriorityGrouping+0x44>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da0b      	bge.n	80017c8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <NVIC_SetPriority+0x4c>)
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	3b04      	subs	r3, #4
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c6:	e009      	b.n	80017dc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <NVIC_SetPriority+0x50>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff90 	bl	800179c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff49 	bl	8001738 <NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff5e 	bl	8001780 <NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffb0 	bl	8001854 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b08b      	sub	sp, #44	; 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
 8001922:	e127      	b.n	8001b74 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8116 	bne.w	8001b6e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b12      	cmp	r3, #18
 8001948:	d034      	beq.n	80019b4 <HAL_GPIO_Init+0xb4>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d80d      	bhi.n	800196a <HAL_GPIO_Init+0x6a>
 800194e:	2b02      	cmp	r3, #2
 8001950:	d02b      	beq.n	80019aa <HAL_GPIO_Init+0xaa>
 8001952:	2b02      	cmp	r3, #2
 8001954:	d804      	bhi.n	8001960 <HAL_GPIO_Init+0x60>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d031      	beq.n	80019be <HAL_GPIO_Init+0xbe>
 800195a:	2b01      	cmp	r3, #1
 800195c:	d01c      	beq.n	8001998 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e048      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001960:	2b03      	cmp	r3, #3
 8001962:	d043      	beq.n	80019ec <HAL_GPIO_Init+0xec>
 8001964:	2b11      	cmp	r3, #17
 8001966:	d01b      	beq.n	80019a0 <HAL_GPIO_Init+0xa0>
          break;
 8001968:	e043      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800196a:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <HAL_GPIO_Init+0x288>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d026      	beq.n	80019be <HAL_GPIO_Init+0xbe>
 8001970:	4a85      	ldr	r2, [pc, #532]	; (8001b88 <HAL_GPIO_Init+0x288>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d806      	bhi.n	8001984 <HAL_GPIO_Init+0x84>
 8001976:	4a85      	ldr	r2, [pc, #532]	; (8001b8c <HAL_GPIO_Init+0x28c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d020      	beq.n	80019be <HAL_GPIO_Init+0xbe>
 800197c:	4a84      	ldr	r2, [pc, #528]	; (8001b90 <HAL_GPIO_Init+0x290>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01d      	beq.n	80019be <HAL_GPIO_Init+0xbe>
          break;
 8001982:	e036      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001984:	4a83      	ldr	r2, [pc, #524]	; (8001b94 <HAL_GPIO_Init+0x294>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0xbe>
 800198a:	4a83      	ldr	r2, [pc, #524]	; (8001b98 <HAL_GPIO_Init+0x298>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d016      	beq.n	80019be <HAL_GPIO_Init+0xbe>
 8001990:	4a82      	ldr	r2, [pc, #520]	; (8001b9c <HAL_GPIO_Init+0x29c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0xbe>
          break;
 8001996:	e02c      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e028      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e023      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	3308      	adds	r3, #8
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e01e      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	330c      	adds	r3, #12
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e019      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e012      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e008      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	d801      	bhi.n	80019fc <HAL_GPIO_Init+0xfc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e001      	b.n	8001a00 <HAL_GPIO_Init+0x100>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2bff      	cmp	r3, #255	; 0xff
 8001a06:	d802      	bhi.n	8001a0e <HAL_GPIO_Init+0x10e>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x114>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3b08      	subs	r3, #8
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	401a      	ands	r2, r3
 8001a26:	6a39      	ldr	r1, [r7, #32]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8096 	beq.w	8001b6e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b54      	ldr	r3, [pc, #336]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001a5a:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1ae>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1aa>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1a6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_GPIO_Init+0x2b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1a2>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x1b0>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x1b0>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x1b0>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x1b0>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001ac0:	4938      	ldr	r1, [pc, #224]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4931      	ldr	r1, [pc, #196]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4927      	ldr	r1, [pc, #156]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	491d      	ldr	r1, [pc, #116]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60cb      	str	r3, [r1, #12]
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4913      	ldr	r1, [pc, #76]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	f67f aed4 	bls.w	8001924 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	372c      	adds	r7, #44	; 0x2c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	10210000 	.word	0x10210000
 8001b8c:	10110000 	.word	0x10110000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10220000 	.word	0x10220000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8087 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be2:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x58>
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d06c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x126>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d168      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e22d      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x70>
 8001c1e:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e02e      	b.n	8001c8a <HAL_RCC_OscConfig+0xce>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x92>
 8001c34:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a76      	ldr	r2, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e01d      	b.n	8001c8a <HAL_RCC_OscConfig+0xce>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0xb6>
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6d      	ldr	r2, [pc, #436]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0xce>
 8001c72:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d013      	beq.n	8001cba <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff f937 	bl	8000f04 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9a:	f7ff f933 	bl	8000f04 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	; 0x64
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1e1      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0xde>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff f923 	bl	8000f04 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc2:	f7ff f91f 	bl	8000f04 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1cd      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x106>
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d063      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfc:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d11c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x186>
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d116      	bne.n	8001d42 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x170>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e1a1      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4939      	ldr	r1, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d40:	e03a      	b.n	8001db8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d020      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x268>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f8d8 	bl	8000f04 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f8d4 	bl	8000f04 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e182      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4926      	ldr	r1, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
 8001d8a:	e015      	b.n	8001db8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_OscConfig+0x268>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff f8b7 	bl	8000f04 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f8b3 	bl	8000f04 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e161      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d039      	beq.n	8001e38 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d019      	beq.n	8001e00 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f897 	bl	8000f04 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff f893 	bl	8000f04 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e141      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x264>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f000 fae3 	bl	80023c4 <RCC_Delay>
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f87d 	bl	8000f04 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00e      	b.n	8001e2c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f879 	bl	8000f04 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d907      	bls.n	8001e2c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e127      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ea      	bne.n	8001e0e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCC_OscConfig+0x4c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x4c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x4c0>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f83b 	bl	8000f04 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff f837 	bl	8000f04 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0e5      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x4c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x30a>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x366>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x32c>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x366>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x34e>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x366>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe ffeb 	bl	8000f04 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe ffe7 	bl	8000f04 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e093      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe ffd5 	bl	8000f04 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe ffd1 	bl	8000f04 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e07d      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d069      	beq.n	800206e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d061      	beq.n	800206a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d146      	bne.n	800203c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ffa6 	bl	8000f04 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ffa2 	bl	8000f04 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e050      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe2:	d108      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4921      	ldr	r1, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a19      	ldr	r1, [r3, #32]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	430b      	orrs	r3, r1
 8002008:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff76 	bl	8000f04 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff72 	bl	8000f04 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e020      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x460>
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff5f 	bl	8000f04 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ff5b 	bl	8000f04 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x4bc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x48e>
 8002068:	e001      	b.n	800206e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060

08002084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002092:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d910      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a0:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 0207 	bic.w	r2, r3, #7
 80020a8:	4978      	ldr	r1, [pc, #480]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b0:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e0      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d020      	beq.n	8002110 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80020e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80020f8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4961      	ldr	r1, [pc, #388]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d06a      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d115      	bne.n	800215c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0a7      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d107      	bne.n	800214c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e09b      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e093      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4949      	ldr	r1, [pc, #292]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216e:	f7fe fec9 	bl	8000f04 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe fec1 	bl	8000f04 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e077      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_ClockConfig+0xfa>
 80021a0:	e027      	b.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d11d      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe feaa 	bl	8000f04 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e060      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_ClockConfig+0x128>
 80021ce:	e010      	b.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fe98 	bl	8000f04 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e04e      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d210      	bcs.n	8002222 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 0207 	bic.w	r2, r3, #7
 8002208:	4920      	ldr	r1, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_ClockConfig+0x208>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e030      	b.n	8002284 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4915      	ldr	r1, [pc, #84]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002260:	f000 f81c 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x20c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_RCC_ClockConfig+0x210>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_RCC_ClockConfig+0x214>)
 800227a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fdff 	bl	8000e80 <HAL_InitTick>
  
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	080039b4 	.word	0x080039b4
 8002298:	20000008 	.word	0x20000008

0800229c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b490      	push	{r4, r7}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a4:	1d3c      	adds	r4, r7, #4
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x46>
 80022da:	e02d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022de:	623b      	str	r3, [r7, #32]
      break;
 80022e0:	e02d      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ee:	4413      	add	r3, r2
 80022f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800230e:	4413      	add	r3, r2
 8002310:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002314:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xc0>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	623b      	str	r3, [r7, #32]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800233a:	623b      	str	r3, [r7, #32]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6a3b      	ldr	r3, [r7, #32]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc90      	pop	{r4, r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08003968 	.word	0x08003968
 8002350:	08003978 	.word	0x08003978
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000008 	.word	0x20000008

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	080039c4 	.word	0x080039c4

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	080039c4 	.word	0x080039c4

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80023e0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d07d      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002420:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	61d3      	str	r3, [r2, #28]
 8002438:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d118      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002460:	f7fe fd50 	bl	8000f04 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	e008      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fd4c 	bl	8000f04 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e06d      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d02e      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d027      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ba:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d014      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd1b 	bl	8000f04 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe fd17 	bl	8000f04 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e036      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4917      	ldr	r1, [pc, #92]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	4313      	orrs	r3, r2
 8002504:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	490b      	ldr	r1, [pc, #44]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4904      	ldr	r1, [pc, #16]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	42420440 	.word	0x42420440

0800256c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b08d      	sub	sp, #52	; 0x34
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002576:	f107 040c 	add.w	r4, r7, #12
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002580:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	f000 8084 	beq.w	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d002      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d049      	beq.n	800263e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 80025aa:	e08d      	b.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8083 	beq.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025cc:	4413      	add	r3, r2
 80025ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025d2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c5b      	lsrs	r3, r3, #17
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025ec:	4413      	add	r3, r2
 80025ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025fe:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	fbb2 f2f3 	udiv	r2, r2, r3
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260e:	e004      	b.n	800261a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002626:	d102      	bne.n	800262e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800262c:	e04b      	b.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800263c:	e043      	b.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 800263e:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d108      	bne.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 800265a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	e022      	b.n	80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266c:	d109      	bne.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 800267a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	e012      	b.n	80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800268c:	d109      	bne.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 800269a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a0:	e002      	b.n	80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026a6:	e00f      	b.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 80026a8:	e00e      	b.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026aa:	f7ff fe77 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0b9b      	lsrs	r3, r3, #14
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 80026c6:	bf00      	nop
    }
  }
  return(frequency);
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3734      	adds	r7, #52	; 0x34
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0800397c 	.word	0x0800397c
 80026d8:	0800398c 	.word	0x0800398c
 80026dc:	40021000 	.word	0x40021000
 80026e0:	007a1200 	.word	0x007a1200
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	aaaaaaab 	.word	0xaaaaaaab

080026ec <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e03f      	b.n	800277e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fbde 	bl	8002ed4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f90b 	bl	800294c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002754:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002764:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af02      	add	r7, sp, #8
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 8083 	bne.w	80028ae <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Transmit+0x2e>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e07b      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Transmit+0x40>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e074      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027dc:	f7fe fb92 	bl	8000f04 <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80027ee:	e042      	b.n	8002876 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	d122      	bne.n	800284e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f850 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e046      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002834:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3302      	adds	r3, #2
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	e017      	b.n	8002876 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3301      	adds	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e013      	b.n	8002876 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f82d 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e023      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	60ba      	str	r2, [r7, #8]
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1b7      	bne.n	80027f0 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f814 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00a      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80028c8:	e02c      	b.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d028      	beq.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d8:	f7fe fb14 	bl	8000f04 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d21d      	bcs.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e00f      	b.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	429a      	cmp	r2, r3
 8002940:	d0c3      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800298e:	f023 030c 	bic.w	r3, r3, #12
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	430b      	orrs	r3, r1
 800299a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6f      	ldr	r2, [pc, #444]	; (8002b74 <UART_SetConfig+0x228>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d16b      	bne.n	8002a94 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029bc:	f7ff fcee 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	441a      	add	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4a68      	ldr	r2, [pc, #416]	; (8002b78 <UART_SetConfig+0x22c>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	011c      	lsls	r4, r3, #4
 80029e0:	f7ff fcdc 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	441a      	add	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80029fa:	f7ff fccf 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <UART_SetConfig+0x22c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1aeb      	subs	r3, r5, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	; 0x32
 8002a28:	4a53      	ldr	r2, [pc, #332]	; (8002b78 <UART_SetConfig+0x22c>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	441c      	add	r4, r3
 8002a36:	f7ff fcb1 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a50:	f7ff fca4 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009a      	lsls	r2, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4a43      	ldr	r2, [pc, #268]	; (8002b78 <UART_SetConfig+0x22c>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2264      	movs	r2, #100	; 0x64
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	1aeb      	subs	r3, r5, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a3e      	ldr	r2, [pc, #248]	; (8002b78 <UART_SetConfig+0x22c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4422      	add	r2, r4
 8002a90:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002a92:	e06a      	b.n	8002b6a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a94:	f7ff fc6e 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009a      	lsls	r2, r3, #2
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <UART_SetConfig+0x22c>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	011c      	lsls	r4, r3, #4
 8002ab8:	f7ff fc5c 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ad2:	f7ff fc4f 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <UART_SetConfig+0x22c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2264      	movs	r2, #100	; 0x64
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	1aeb      	subs	r3, r5, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <UART_SetConfig+0x22c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0c:	441c      	add	r4, r3
 8002b0e:	f7ff fc31 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009a      	lsls	r2, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b28:	f7ff fc24 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	009a      	lsls	r2, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <UART_SetConfig+0x22c>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2264      	movs	r2, #100	; 0x64
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	1aeb      	subs	r3, r5, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	3332      	adds	r3, #50	; 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <UART_SetConfig+0x22c>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4422      	add	r2, r4
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40013800 	.word	0x40013800
 8002b78:	51eb851f 	.word	0x51eb851f

08002b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b82:	f7fe f967 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b86:	f000 f881 	bl	8002c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b8a:	f000 f937 	bl	8002dfc <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b8e:	f000 f8cd 	bl	8002d2c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002b92:	f000 f909 	bl	8002da8 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start(&hadc1);
 8002b96:	4834      	ldr	r0, [pc, #208]	; (8002c68 <main+0xec>)
 8002b98:	f7fe fa96 	bl	80010c8 <HAL_ADC_Start>
    /* USER CODE BEGIN 3 */
	  char msg[20];
	  uint16_t rawValue;
	  float temp;

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	4831      	ldr	r0, [pc, #196]	; (8002c68 <main+0xec>)
 8002ba2:	f7fe fb3f 	bl	8001224 <HAL_ADC_PollForConversion>

	  rawValue = HAL_ADC_GetValue(&hadc1);
 8002ba6:	4830      	ldr	r0, [pc, #192]	; (8002c68 <main+0xec>)
 8002ba8:	f7fe fc36 	bl	8001418 <HAL_ADC_GetValue>
 8002bac:	4603      	mov	r3, r0
 8002bae:	83fb      	strh	r3, [r7, #30]
	  temp = ((float)rawValue) / 4095 * 3300;
 8002bb0:	8bfb      	ldrh	r3, [r7, #30]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd ffa6 	bl	8000b04 <__aeabi_ui2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	492c      	ldr	r1, [pc, #176]	; (8002c6c <main+0xf0>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f8ad 	bl	8000d1c <__aeabi_fdiv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	492a      	ldr	r1, [pc, #168]	; (8002c70 <main+0xf4>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fff4 	bl	8000bb4 <__aeabi_fmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	61bb      	str	r3, [r7, #24]
	  temp = ((temp - 760.0) / 2.5) + 25;
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	f7fd fc27 	bl	8000424 <__aeabi_f2d>
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <main+0xf8>)
 8002bdc:	f7fd fac2 	bl	8000164 <__aeabi_dsub>
 8002be0:	4603      	mov	r3, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	4618      	mov	r0, r3
 8002be6:	4621      	mov	r1, r4
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <main+0xfc>)
 8002bee:	f7fd fd9b 	bl	8000728 <__aeabi_ddiv>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <main+0x100>)
 8002c00:	f7fd fab2 	bl	8000168 <__adddf3>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	f7fd fe74 	bl	80008f8 <__aeabi_d2f>
 8002c10:	4603      	mov	r3, r0
 8002c12:	61bb      	str	r3, [r7, #24]

	  sprintf(msg, "rawValue: %hu\r\n", rawValue);
 8002c14:	8bfa      	ldrh	r2, [r7, #30]
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4919      	ldr	r1, [pc, #100]	; (8002c80 <main+0x104>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fa86 	bl	800312c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fa92 	bl	800014c <strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	1d39      	adds	r1, r7, #4
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	4814      	ldr	r0, [pc, #80]	; (8002c84 <main+0x108>)
 8002c34:	f7ff fda7 	bl	8002786 <HAL_UART_Transmit>

	  sprintf(msg, "Temperature: %f\r\n", temp);
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7fd fbf3 	bl	8000424 <__aeabi_f2d>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	1d38      	adds	r0, r7, #4
 8002c44:	461a      	mov	r2, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	490f      	ldr	r1, [pc, #60]	; (8002c88 <main+0x10c>)
 8002c4a:	f000 fa6f 	bl	800312c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fa7b 	bl	800014c <strlen>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	1d39      	adds	r1, r7, #4
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	4808      	ldr	r0, [pc, #32]	; (8002c84 <main+0x108>)
 8002c62:	f7ff fd90 	bl	8002786 <HAL_UART_Transmit>
  {
 8002c66:	e799      	b.n	8002b9c <main+0x20>
 8002c68:	2000009c 	.word	0x2000009c
 8002c6c:	457ff000 	.word	0x457ff000
 8002c70:	454e4000 	.word	0x454e4000
 8002c74:	4087c000 	.word	0x4087c000
 8002c78:	40040000 	.word	0x40040000
 8002c7c:	40390000 	.word	0x40390000
 8002c80:	08003990 	.word	0x08003990
 8002c84:	200000cc 	.word	0x200000cc
 8002c88:	080039a0 	.word	0x080039a0

08002c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b094      	sub	sp, #80	; 0x50
 8002c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c96:	2228      	movs	r2, #40	; 0x28
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa3e 	bl	800311c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe ff73 	bl	8001bbc <HAL_RCC_OscConfig>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002cdc:	f000 f8a4 	bl	8002e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9c2 	bl	8002084 <HAL_RCC_ClockConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002d06:	f000 f88f 	bl	8002e28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fb73 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002d20:	f000 f882 	bl	8002e28 <Error_Handler>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d3e:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <MX_ADC1_Init+0x78>)
 8002d40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d68:	480d      	ldr	r0, [pc, #52]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d6a:	f7fe f8d5 	bl	8000f18 <HAL_ADC_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002d74:	f000 f858 	bl	8002e28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002d78:	2310      	movs	r3, #16
 8002d7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_ADC1_Init+0x74>)
 8002d8a:	f7fe fb51 	bl	8001430 <HAL_ADC_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d94:	f000 f848 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	2000009c 	.word	0x2000009c
 8002da4:	40012400 	.word	0x40012400

08002da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <MX_USART2_UART_Init+0x50>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002de0:	f7ff fc84 	bl	80026ec <HAL_UART_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dea:	f000 f81d 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200000cc 	.word	0x200000cc
 8002df8:	40004400 	.word	0x40004400

08002dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <MX_GPIO_Init+0x28>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <MX_GPIO_Init+0x28>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6193      	str	r3, [r2, #24]
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <MX_GPIO_Init+0x28>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]

}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40021000 	.word	0x40021000

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6193      	str	r3, [r2, #24]
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	61d3      	str	r3, [r2, #28]
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_MspInit+0x5c>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_MspInit+0x60>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_MspInit+0x60>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000

08002e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_ADC_MspInit+0x34>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_ADC_MspInit+0x38>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <HAL_ADC_MspInit+0x38>)
 8002eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb4:	6193      	str	r3, [r2, #24]
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_ADC_MspInit+0x38>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012400 	.word	0x40012400
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_UART_MspInit+0x88>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d12f      	bne.n	8002f54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efe:	61d3      	str	r3, [r2, #28]
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_UART_MspInit+0x8c>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f24:	2304      	movs	r3, #4
 8002f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4619      	mov	r1, r3
 8002f36:	480b      	ldr	r0, [pc, #44]	; (8002f64 <HAL_UART_MspInit+0x90>)
 8002f38:	f7fe fce2 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <HAL_UART_MspInit+0x90>)
 8002f50:	f7fe fcd6 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010800 	.word	0x40010800

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <HardFault_Handler+0x4>

08002f7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <MemManage_Handler+0x4>

08002f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <BusFault_Handler+0x4>

08002f86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <UsageFault_Handler+0x4>

08002f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb4:	f7fd ff94 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <_sbrk+0x50>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <_sbrk+0x16>
		heap_end = &end;
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <_sbrk+0x50>)
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <_sbrk+0x54>)
 8002fd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <_sbrk+0x50>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <_sbrk+0x50>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	466a      	mov	r2, sp
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d907      	bls.n	8002ff6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fe6:	f000 f86f 	bl	80030c8 <__errno>
 8002fea:	4602      	mov	r2, r0
 8002fec:	230c      	movs	r3, #12
 8002fee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e006      	b.n	8003004 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <_sbrk+0x50>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a03      	ldr	r2, [pc, #12]	; (800300c <_sbrk+0x50>)
 8003000:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	2000008c 	.word	0x2000008c
 8003010:	20000110 	.word	0x20000110

08003014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <SystemInit+0x5c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <SystemInit+0x5c>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <SystemInit+0x5c>)
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4911      	ldr	r1, [pc, #68]	; (8003070 <SystemInit+0x5c>)
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <SystemInit+0x60>)
 800302c:	4013      	ands	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <SystemInit+0x5c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <SystemInit+0x5c>)
 8003036:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <SystemInit+0x5c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <SystemInit+0x5c>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <SystemInit+0x5c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <SystemInit+0x5c>)
 8003052:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003056:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SystemInit+0x5c>)
 800305a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800305e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <SystemInit+0x64>)
 8003062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003066:	609a      	str	r2, [r3, #8]
#endif 
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40021000 	.word	0x40021000
 8003074:	f8ff0000 	.word	0xf8ff0000
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800307c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800307e:	e003      	b.n	8003088 <LoopCopyDataInit>

08003080 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003082:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003084:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003086:	3104      	adds	r1, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003088:	480a      	ldr	r0, [pc, #40]	; (80030b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800308c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800308e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003090:	d3f6      	bcc.n	8003080 <CopyDataInit>
  ldr r2, =_sbss
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003094:	e002      	b.n	800309c <LoopFillZerobss>

08003096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003098:	f842 3b04 	str.w	r3, [r2], #4

0800309c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800309e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030a0:	d3f9      	bcc.n	8003096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030a2:	f7ff ffb7 	bl	8003014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a6:	f000 f815 	bl	80030d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030aa:	f7ff fd67 	bl	8002b7c <main>
  bx lr
 80030ae:	4770      	bx	lr
  ldr r3, =_sidata
 80030b0:	08003a08 	.word	0x08003a08
  ldr r0, =_sdata
 80030b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030b8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80030bc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80030c0:	20000110 	.word	0x20000110

080030c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC1_2_IRQHandler>
	...

080030c8 <__errno>:
 80030c8:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <__errno+0x8>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000000c 	.word	0x2000000c

080030d4 <__libc_init_array>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	2500      	movs	r5, #0
 80030d8:	4e0c      	ldr	r6, [pc, #48]	; (800310c <__libc_init_array+0x38>)
 80030da:	4c0d      	ldr	r4, [pc, #52]	; (8003110 <__libc_init_array+0x3c>)
 80030dc:	1ba4      	subs	r4, r4, r6
 80030de:	10a4      	asrs	r4, r4, #2
 80030e0:	42a5      	cmp	r5, r4
 80030e2:	d109      	bne.n	80030f8 <__libc_init_array+0x24>
 80030e4:	f000 fc34 	bl	8003950 <_init>
 80030e8:	2500      	movs	r5, #0
 80030ea:	4e0a      	ldr	r6, [pc, #40]	; (8003114 <__libc_init_array+0x40>)
 80030ec:	4c0a      	ldr	r4, [pc, #40]	; (8003118 <__libc_init_array+0x44>)
 80030ee:	1ba4      	subs	r4, r4, r6
 80030f0:	10a4      	asrs	r4, r4, #2
 80030f2:	42a5      	cmp	r5, r4
 80030f4:	d105      	bne.n	8003102 <__libc_init_array+0x2e>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030fc:	4798      	blx	r3
 80030fe:	3501      	adds	r5, #1
 8003100:	e7ee      	b.n	80030e0 <__libc_init_array+0xc>
 8003102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003106:	4798      	blx	r3
 8003108:	3501      	adds	r5, #1
 800310a:	e7f2      	b.n	80030f2 <__libc_init_array+0x1e>
 800310c:	08003a00 	.word	0x08003a00
 8003110:	08003a00 	.word	0x08003a00
 8003114:	08003a00 	.word	0x08003a00
 8003118:	08003a04 	.word	0x08003a04

0800311c <memset>:
 800311c:	4603      	mov	r3, r0
 800311e:	4402      	add	r2, r0
 8003120:	4293      	cmp	r3, r2
 8003122:	d100      	bne.n	8003126 <memset+0xa>
 8003124:	4770      	bx	lr
 8003126:	f803 1b01 	strb.w	r1, [r3], #1
 800312a:	e7f9      	b.n	8003120 <memset+0x4>

0800312c <siprintf>:
 800312c:	b40e      	push	{r1, r2, r3}
 800312e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003132:	b500      	push	{lr}
 8003134:	b09c      	sub	sp, #112	; 0x70
 8003136:	ab1d      	add	r3, sp, #116	; 0x74
 8003138:	9002      	str	r0, [sp, #8]
 800313a:	9006      	str	r0, [sp, #24]
 800313c:	9107      	str	r1, [sp, #28]
 800313e:	9104      	str	r1, [sp, #16]
 8003140:	4808      	ldr	r0, [pc, #32]	; (8003164 <siprintf+0x38>)
 8003142:	4909      	ldr	r1, [pc, #36]	; (8003168 <siprintf+0x3c>)
 8003144:	f853 2b04 	ldr.w	r2, [r3], #4
 8003148:	9105      	str	r1, [sp, #20]
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	a902      	add	r1, sp, #8
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	f000 f866 	bl	8003220 <_svfiprintf_r>
 8003154:	2200      	movs	r2, #0
 8003156:	9b02      	ldr	r3, [sp, #8]
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	b01c      	add	sp, #112	; 0x70
 800315c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003160:	b003      	add	sp, #12
 8003162:	4770      	bx	lr
 8003164:	2000000c 	.word	0x2000000c
 8003168:	ffff0208 	.word	0xffff0208

0800316c <__ssputs_r>:
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	688e      	ldr	r6, [r1, #8]
 8003172:	4682      	mov	sl, r0
 8003174:	429e      	cmp	r6, r3
 8003176:	460c      	mov	r4, r1
 8003178:	4690      	mov	r8, r2
 800317a:	4699      	mov	r9, r3
 800317c:	d837      	bhi.n	80031ee <__ssputs_r+0x82>
 800317e:	898a      	ldrh	r2, [r1, #12]
 8003180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003184:	d031      	beq.n	80031ea <__ssputs_r+0x7e>
 8003186:	2302      	movs	r3, #2
 8003188:	6825      	ldr	r5, [r4, #0]
 800318a:	6909      	ldr	r1, [r1, #16]
 800318c:	1a6f      	subs	r7, r5, r1
 800318e:	6965      	ldr	r5, [r4, #20]
 8003190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003194:	fb95 f5f3 	sdiv	r5, r5, r3
 8003198:	f109 0301 	add.w	r3, r9, #1
 800319c:	443b      	add	r3, r7
 800319e:	429d      	cmp	r5, r3
 80031a0:	bf38      	it	cc
 80031a2:	461d      	movcc	r5, r3
 80031a4:	0553      	lsls	r3, r2, #21
 80031a6:	d530      	bpl.n	800320a <__ssputs_r+0x9e>
 80031a8:	4629      	mov	r1, r5
 80031aa:	f000 fb37 	bl	800381c <_malloc_r>
 80031ae:	4606      	mov	r6, r0
 80031b0:	b950      	cbnz	r0, 80031c8 <__ssputs_r+0x5c>
 80031b2:	230c      	movs	r3, #12
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f8ca 3000 	str.w	r3, [sl]
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c8:	463a      	mov	r2, r7
 80031ca:	6921      	ldr	r1, [r4, #16]
 80031cc:	f000 fab6 	bl	800373c <memcpy>
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	6126      	str	r6, [r4, #16]
 80031de:	443e      	add	r6, r7
 80031e0:	6026      	str	r6, [r4, #0]
 80031e2:	464e      	mov	r6, r9
 80031e4:	6165      	str	r5, [r4, #20]
 80031e6:	1bed      	subs	r5, r5, r7
 80031e8:	60a5      	str	r5, [r4, #8]
 80031ea:	454e      	cmp	r6, r9
 80031ec:	d900      	bls.n	80031f0 <__ssputs_r+0x84>
 80031ee:	464e      	mov	r6, r9
 80031f0:	4632      	mov	r2, r6
 80031f2:	4641      	mov	r1, r8
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	f000 faac 	bl	8003752 <memmove>
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	2000      	movs	r0, #0
 80031fe:	1b9b      	subs	r3, r3, r6
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	441e      	add	r6, r3
 8003206:	6026      	str	r6, [r4, #0]
 8003208:	e7dc      	b.n	80031c4 <__ssputs_r+0x58>
 800320a:	462a      	mov	r2, r5
 800320c:	f000 fb60 	bl	80038d0 <_realloc_r>
 8003210:	4606      	mov	r6, r0
 8003212:	2800      	cmp	r0, #0
 8003214:	d1e2      	bne.n	80031dc <__ssputs_r+0x70>
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	4650      	mov	r0, sl
 800321a:	f000 fab3 	bl	8003784 <_free_r>
 800321e:	e7c8      	b.n	80031b2 <__ssputs_r+0x46>

08003220 <_svfiprintf_r>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	461d      	mov	r5, r3
 8003226:	898b      	ldrh	r3, [r1, #12]
 8003228:	b09d      	sub	sp, #116	; 0x74
 800322a:	061f      	lsls	r7, r3, #24
 800322c:	4680      	mov	r8, r0
 800322e:	460c      	mov	r4, r1
 8003230:	4616      	mov	r6, r2
 8003232:	d50f      	bpl.n	8003254 <_svfiprintf_r+0x34>
 8003234:	690b      	ldr	r3, [r1, #16]
 8003236:	b96b      	cbnz	r3, 8003254 <_svfiprintf_r+0x34>
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	f000 faef 	bl	800381c <_malloc_r>
 800323e:	6020      	str	r0, [r4, #0]
 8003240:	6120      	str	r0, [r4, #16]
 8003242:	b928      	cbnz	r0, 8003250 <_svfiprintf_r+0x30>
 8003244:	230c      	movs	r3, #12
 8003246:	f8c8 3000 	str.w	r3, [r8]
 800324a:	f04f 30ff 	mov.w	r0, #4294967295
 800324e:	e0c8      	b.n	80033e2 <_svfiprintf_r+0x1c2>
 8003250:	2340      	movs	r3, #64	; 0x40
 8003252:	6163      	str	r3, [r4, #20]
 8003254:	2300      	movs	r3, #0
 8003256:	9309      	str	r3, [sp, #36]	; 0x24
 8003258:	2320      	movs	r3, #32
 800325a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800325e:	2330      	movs	r3, #48	; 0x30
 8003260:	f04f 0b01 	mov.w	fp, #1
 8003264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003268:	9503      	str	r5, [sp, #12]
 800326a:	4637      	mov	r7, r6
 800326c:	463d      	mov	r5, r7
 800326e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003272:	b10b      	cbz	r3, 8003278 <_svfiprintf_r+0x58>
 8003274:	2b25      	cmp	r3, #37	; 0x25
 8003276:	d13e      	bne.n	80032f6 <_svfiprintf_r+0xd6>
 8003278:	ebb7 0a06 	subs.w	sl, r7, r6
 800327c:	d00b      	beq.n	8003296 <_svfiprintf_r+0x76>
 800327e:	4653      	mov	r3, sl
 8003280:	4632      	mov	r2, r6
 8003282:	4621      	mov	r1, r4
 8003284:	4640      	mov	r0, r8
 8003286:	f7ff ff71 	bl	800316c <__ssputs_r>
 800328a:	3001      	adds	r0, #1
 800328c:	f000 80a4 	beq.w	80033d8 <_svfiprintf_r+0x1b8>
 8003290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003292:	4453      	add	r3, sl
 8003294:	9309      	str	r3, [sp, #36]	; 0x24
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 809d 	beq.w	80033d8 <_svfiprintf_r+0x1b8>
 800329e:	2300      	movs	r3, #0
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a8:	9304      	str	r3, [sp, #16]
 80032aa:	9307      	str	r3, [sp, #28]
 80032ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032b0:	931a      	str	r3, [sp, #104]	; 0x68
 80032b2:	462f      	mov	r7, r5
 80032b4:	2205      	movs	r2, #5
 80032b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032ba:	4850      	ldr	r0, [pc, #320]	; (80033fc <_svfiprintf_r+0x1dc>)
 80032bc:	f000 fa30 	bl	8003720 <memchr>
 80032c0:	9b04      	ldr	r3, [sp, #16]
 80032c2:	b9d0      	cbnz	r0, 80032fa <_svfiprintf_r+0xda>
 80032c4:	06d9      	lsls	r1, r3, #27
 80032c6:	bf44      	itt	mi
 80032c8:	2220      	movmi	r2, #32
 80032ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ce:	071a      	lsls	r2, r3, #28
 80032d0:	bf44      	itt	mi
 80032d2:	222b      	movmi	r2, #43	; 0x2b
 80032d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032d8:	782a      	ldrb	r2, [r5, #0]
 80032da:	2a2a      	cmp	r2, #42	; 0x2a
 80032dc:	d015      	beq.n	800330a <_svfiprintf_r+0xea>
 80032de:	462f      	mov	r7, r5
 80032e0:	2000      	movs	r0, #0
 80032e2:	250a      	movs	r5, #10
 80032e4:	9a07      	ldr	r2, [sp, #28]
 80032e6:	4639      	mov	r1, r7
 80032e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ec:	3b30      	subs	r3, #48	; 0x30
 80032ee:	2b09      	cmp	r3, #9
 80032f0:	d94d      	bls.n	800338e <_svfiprintf_r+0x16e>
 80032f2:	b1b8      	cbz	r0, 8003324 <_svfiprintf_r+0x104>
 80032f4:	e00f      	b.n	8003316 <_svfiprintf_r+0xf6>
 80032f6:	462f      	mov	r7, r5
 80032f8:	e7b8      	b.n	800326c <_svfiprintf_r+0x4c>
 80032fa:	4a40      	ldr	r2, [pc, #256]	; (80033fc <_svfiprintf_r+0x1dc>)
 80032fc:	463d      	mov	r5, r7
 80032fe:	1a80      	subs	r0, r0, r2
 8003300:	fa0b f000 	lsl.w	r0, fp, r0
 8003304:	4318      	orrs	r0, r3
 8003306:	9004      	str	r0, [sp, #16]
 8003308:	e7d3      	b.n	80032b2 <_svfiprintf_r+0x92>
 800330a:	9a03      	ldr	r2, [sp, #12]
 800330c:	1d11      	adds	r1, r2, #4
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	9103      	str	r1, [sp, #12]
 8003312:	2a00      	cmp	r2, #0
 8003314:	db01      	blt.n	800331a <_svfiprintf_r+0xfa>
 8003316:	9207      	str	r2, [sp, #28]
 8003318:	e004      	b.n	8003324 <_svfiprintf_r+0x104>
 800331a:	4252      	negs	r2, r2
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	9207      	str	r2, [sp, #28]
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	783b      	ldrb	r3, [r7, #0]
 8003326:	2b2e      	cmp	r3, #46	; 0x2e
 8003328:	d10c      	bne.n	8003344 <_svfiprintf_r+0x124>
 800332a:	787b      	ldrb	r3, [r7, #1]
 800332c:	2b2a      	cmp	r3, #42	; 0x2a
 800332e:	d133      	bne.n	8003398 <_svfiprintf_r+0x178>
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	3702      	adds	r7, #2
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	9203      	str	r2, [sp, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	bfb8      	it	lt
 800333e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003342:	9305      	str	r3, [sp, #20]
 8003344:	4d2e      	ldr	r5, [pc, #184]	; (8003400 <_svfiprintf_r+0x1e0>)
 8003346:	2203      	movs	r2, #3
 8003348:	7839      	ldrb	r1, [r7, #0]
 800334a:	4628      	mov	r0, r5
 800334c:	f000 f9e8 	bl	8003720 <memchr>
 8003350:	b138      	cbz	r0, 8003362 <_svfiprintf_r+0x142>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	1b40      	subs	r0, r0, r5
 8003356:	fa03 f000 	lsl.w	r0, r3, r0
 800335a:	9b04      	ldr	r3, [sp, #16]
 800335c:	3701      	adds	r7, #1
 800335e:	4303      	orrs	r3, r0
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	7839      	ldrb	r1, [r7, #0]
 8003364:	2206      	movs	r2, #6
 8003366:	4827      	ldr	r0, [pc, #156]	; (8003404 <_svfiprintf_r+0x1e4>)
 8003368:	1c7e      	adds	r6, r7, #1
 800336a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800336e:	f000 f9d7 	bl	8003720 <memchr>
 8003372:	2800      	cmp	r0, #0
 8003374:	d038      	beq.n	80033e8 <_svfiprintf_r+0x1c8>
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <_svfiprintf_r+0x1e8>)
 8003378:	bb13      	cbnz	r3, 80033c0 <_svfiprintf_r+0x1a0>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3307      	adds	r3, #7
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	3308      	adds	r3, #8
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003388:	444b      	add	r3, r9
 800338a:	9309      	str	r3, [sp, #36]	; 0x24
 800338c:	e76d      	b.n	800326a <_svfiprintf_r+0x4a>
 800338e:	fb05 3202 	mla	r2, r5, r2, r3
 8003392:	2001      	movs	r0, #1
 8003394:	460f      	mov	r7, r1
 8003396:	e7a6      	b.n	80032e6 <_svfiprintf_r+0xc6>
 8003398:	2300      	movs	r3, #0
 800339a:	250a      	movs	r5, #10
 800339c:	4619      	mov	r1, r3
 800339e:	3701      	adds	r7, #1
 80033a0:	9305      	str	r3, [sp, #20]
 80033a2:	4638      	mov	r0, r7
 80033a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033a8:	3a30      	subs	r2, #48	; 0x30
 80033aa:	2a09      	cmp	r2, #9
 80033ac:	d903      	bls.n	80033b6 <_svfiprintf_r+0x196>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0c8      	beq.n	8003344 <_svfiprintf_r+0x124>
 80033b2:	9105      	str	r1, [sp, #20]
 80033b4:	e7c6      	b.n	8003344 <_svfiprintf_r+0x124>
 80033b6:	fb05 2101 	mla	r1, r5, r1, r2
 80033ba:	2301      	movs	r3, #1
 80033bc:	4607      	mov	r7, r0
 80033be:	e7f0      	b.n	80033a2 <_svfiprintf_r+0x182>
 80033c0:	ab03      	add	r3, sp, #12
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4622      	mov	r2, r4
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <_svfiprintf_r+0x1ec>)
 80033c8:	a904      	add	r1, sp, #16
 80033ca:	4640      	mov	r0, r8
 80033cc:	f3af 8000 	nop.w
 80033d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033d4:	4681      	mov	r9, r0
 80033d6:	d1d6      	bne.n	8003386 <_svfiprintf_r+0x166>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	065b      	lsls	r3, r3, #25
 80033dc:	f53f af35 	bmi.w	800324a <_svfiprintf_r+0x2a>
 80033e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033e2:	b01d      	add	sp, #116	; 0x74
 80033e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e8:	ab03      	add	r3, sp, #12
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4622      	mov	r2, r4
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <_svfiprintf_r+0x1ec>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	4640      	mov	r0, r8
 80033f4:	f000 f882 	bl	80034fc <_printf_i>
 80033f8:	e7ea      	b.n	80033d0 <_svfiprintf_r+0x1b0>
 80033fa:	bf00      	nop
 80033fc:	080039cc 	.word	0x080039cc
 8003400:	080039d2 	.word	0x080039d2
 8003404:	080039d6 	.word	0x080039d6
 8003408:	00000000 	.word	0x00000000
 800340c:	0800316d 	.word	0x0800316d

08003410 <_printf_common>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	4691      	mov	r9, r2
 8003416:	461f      	mov	r7, r3
 8003418:	688a      	ldr	r2, [r1, #8]
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	4606      	mov	r6, r0
 800341e:	4293      	cmp	r3, r2
 8003420:	bfb8      	it	lt
 8003422:	4613      	movlt	r3, r2
 8003424:	f8c9 3000 	str.w	r3, [r9]
 8003428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800342c:	460c      	mov	r4, r1
 800342e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003432:	b112      	cbz	r2, 800343a <_printf_common+0x2a>
 8003434:	3301      	adds	r3, #1
 8003436:	f8c9 3000 	str.w	r3, [r9]
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	0699      	lsls	r1, r3, #26
 800343e:	bf42      	ittt	mi
 8003440:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003444:	3302      	addmi	r3, #2
 8003446:	f8c9 3000 	strmi.w	r3, [r9]
 800344a:	6825      	ldr	r5, [r4, #0]
 800344c:	f015 0506 	ands.w	r5, r5, #6
 8003450:	d107      	bne.n	8003462 <_printf_common+0x52>
 8003452:	f104 0a19 	add.w	sl, r4, #25
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	f8d9 2000 	ldr.w	r2, [r9]
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	42ab      	cmp	r3, r5
 8003460:	dc29      	bgt.n	80034b6 <_printf_common+0xa6>
 8003462:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003466:	6822      	ldr	r2, [r4, #0]
 8003468:	3300      	adds	r3, #0
 800346a:	bf18      	it	ne
 800346c:	2301      	movne	r3, #1
 800346e:	0692      	lsls	r2, r2, #26
 8003470:	d42e      	bmi.n	80034d0 <_printf_common+0xc0>
 8003472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003476:	4639      	mov	r1, r7
 8003478:	4630      	mov	r0, r6
 800347a:	47c0      	blx	r8
 800347c:	3001      	adds	r0, #1
 800347e:	d021      	beq.n	80034c4 <_printf_common+0xb4>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	68e5      	ldr	r5, [r4, #12]
 8003484:	f003 0306 	and.w	r3, r3, #6
 8003488:	2b04      	cmp	r3, #4
 800348a:	bf18      	it	ne
 800348c:	2500      	movne	r5, #0
 800348e:	f8d9 2000 	ldr.w	r2, [r9]
 8003492:	f04f 0900 	mov.w	r9, #0
 8003496:	bf08      	it	eq
 8003498:	1aad      	subeq	r5, r5, r2
 800349a:	68a3      	ldr	r3, [r4, #8]
 800349c:	6922      	ldr	r2, [r4, #16]
 800349e:	bf08      	it	eq
 80034a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bfc4      	itt	gt
 80034a8:	1a9b      	subgt	r3, r3, r2
 80034aa:	18ed      	addgt	r5, r5, r3
 80034ac:	341a      	adds	r4, #26
 80034ae:	454d      	cmp	r5, r9
 80034b0:	d11a      	bne.n	80034e8 <_printf_common+0xd8>
 80034b2:	2000      	movs	r0, #0
 80034b4:	e008      	b.n	80034c8 <_printf_common+0xb8>
 80034b6:	2301      	movs	r3, #1
 80034b8:	4652      	mov	r2, sl
 80034ba:	4639      	mov	r1, r7
 80034bc:	4630      	mov	r0, r6
 80034be:	47c0      	blx	r8
 80034c0:	3001      	adds	r0, #1
 80034c2:	d103      	bne.n	80034cc <_printf_common+0xbc>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034cc:	3501      	adds	r5, #1
 80034ce:	e7c2      	b.n	8003456 <_printf_common+0x46>
 80034d0:	2030      	movs	r0, #48	; 0x30
 80034d2:	18e1      	adds	r1, r4, r3
 80034d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034de:	4422      	add	r2, r4
 80034e0:	3302      	adds	r3, #2
 80034e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034e6:	e7c4      	b.n	8003472 <_printf_common+0x62>
 80034e8:	2301      	movs	r3, #1
 80034ea:	4622      	mov	r2, r4
 80034ec:	4639      	mov	r1, r7
 80034ee:	4630      	mov	r0, r6
 80034f0:	47c0      	blx	r8
 80034f2:	3001      	adds	r0, #1
 80034f4:	d0e6      	beq.n	80034c4 <_printf_common+0xb4>
 80034f6:	f109 0901 	add.w	r9, r9, #1
 80034fa:	e7d8      	b.n	80034ae <_printf_common+0x9e>

080034fc <_printf_i>:
 80034fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003500:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003504:	460c      	mov	r4, r1
 8003506:	7e09      	ldrb	r1, [r1, #24]
 8003508:	b085      	sub	sp, #20
 800350a:	296e      	cmp	r1, #110	; 0x6e
 800350c:	4617      	mov	r7, r2
 800350e:	4606      	mov	r6, r0
 8003510:	4698      	mov	r8, r3
 8003512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003514:	f000 80b3 	beq.w	800367e <_printf_i+0x182>
 8003518:	d822      	bhi.n	8003560 <_printf_i+0x64>
 800351a:	2963      	cmp	r1, #99	; 0x63
 800351c:	d036      	beq.n	800358c <_printf_i+0x90>
 800351e:	d80a      	bhi.n	8003536 <_printf_i+0x3a>
 8003520:	2900      	cmp	r1, #0
 8003522:	f000 80b9 	beq.w	8003698 <_printf_i+0x19c>
 8003526:	2958      	cmp	r1, #88	; 0x58
 8003528:	f000 8083 	beq.w	8003632 <_printf_i+0x136>
 800352c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003530:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003534:	e032      	b.n	800359c <_printf_i+0xa0>
 8003536:	2964      	cmp	r1, #100	; 0x64
 8003538:	d001      	beq.n	800353e <_printf_i+0x42>
 800353a:	2969      	cmp	r1, #105	; 0x69
 800353c:	d1f6      	bne.n	800352c <_printf_i+0x30>
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	6813      	ldr	r3, [r2, #0]
 8003542:	0605      	lsls	r5, r0, #24
 8003544:	f103 0104 	add.w	r1, r3, #4
 8003548:	d52a      	bpl.n	80035a0 <_printf_i+0xa4>
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	da03      	bge.n	800355a <_printf_i+0x5e>
 8003552:	222d      	movs	r2, #45	; 0x2d
 8003554:	425b      	negs	r3, r3
 8003556:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800355a:	486f      	ldr	r0, [pc, #444]	; (8003718 <_printf_i+0x21c>)
 800355c:	220a      	movs	r2, #10
 800355e:	e039      	b.n	80035d4 <_printf_i+0xd8>
 8003560:	2973      	cmp	r1, #115	; 0x73
 8003562:	f000 809d 	beq.w	80036a0 <_printf_i+0x1a4>
 8003566:	d808      	bhi.n	800357a <_printf_i+0x7e>
 8003568:	296f      	cmp	r1, #111	; 0x6f
 800356a:	d020      	beq.n	80035ae <_printf_i+0xb2>
 800356c:	2970      	cmp	r1, #112	; 0x70
 800356e:	d1dd      	bne.n	800352c <_printf_i+0x30>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	f043 0320 	orr.w	r3, r3, #32
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	e003      	b.n	8003582 <_printf_i+0x86>
 800357a:	2975      	cmp	r1, #117	; 0x75
 800357c:	d017      	beq.n	80035ae <_printf_i+0xb2>
 800357e:	2978      	cmp	r1, #120	; 0x78
 8003580:	d1d4      	bne.n	800352c <_printf_i+0x30>
 8003582:	2378      	movs	r3, #120	; 0x78
 8003584:	4865      	ldr	r0, [pc, #404]	; (800371c <_printf_i+0x220>)
 8003586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800358a:	e055      	b.n	8003638 <_printf_i+0x13c>
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003592:	1d19      	adds	r1, r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6011      	str	r1, [r2, #0]
 8003598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800359c:	2301      	movs	r3, #1
 800359e:	e08c      	b.n	80036ba <_printf_i+0x1be>
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	bf18      	it	ne
 80035aa:	b21b      	sxthne	r3, r3
 80035ac:	e7cf      	b.n	800354e <_printf_i+0x52>
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	1d18      	adds	r0, r3, #4
 80035b4:	6010      	str	r0, [r2, #0]
 80035b6:	0628      	lsls	r0, r5, #24
 80035b8:	d501      	bpl.n	80035be <_printf_i+0xc2>
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	e002      	b.n	80035c4 <_printf_i+0xc8>
 80035be:	0668      	lsls	r0, r5, #25
 80035c0:	d5fb      	bpl.n	80035ba <_printf_i+0xbe>
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	296f      	cmp	r1, #111	; 0x6f
 80035c6:	bf14      	ite	ne
 80035c8:	220a      	movne	r2, #10
 80035ca:	2208      	moveq	r2, #8
 80035cc:	4852      	ldr	r0, [pc, #328]	; (8003718 <_printf_i+0x21c>)
 80035ce:	2100      	movs	r1, #0
 80035d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035d4:	6865      	ldr	r5, [r4, #4]
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	60a5      	str	r5, [r4, #8]
 80035da:	f2c0 8095 	blt.w	8003708 <_printf_i+0x20c>
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	f021 0104 	bic.w	r1, r1, #4
 80035e4:	6021      	str	r1, [r4, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d13d      	bne.n	8003666 <_printf_i+0x16a>
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	f040 808e 	bne.w	800370c <_printf_i+0x210>
 80035f0:	4665      	mov	r5, ip
 80035f2:	2a08      	cmp	r2, #8
 80035f4:	d10b      	bne.n	800360e <_printf_i+0x112>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	07db      	lsls	r3, r3, #31
 80035fa:	d508      	bpl.n	800360e <_printf_i+0x112>
 80035fc:	6923      	ldr	r3, [r4, #16]
 80035fe:	6862      	ldr	r2, [r4, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	bfde      	ittt	le
 8003604:	2330      	movle	r3, #48	; 0x30
 8003606:	f805 3c01 	strble.w	r3, [r5, #-1]
 800360a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800360e:	ebac 0305 	sub.w	r3, ip, r5
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	f8cd 8000 	str.w	r8, [sp]
 8003618:	463b      	mov	r3, r7
 800361a:	aa03      	add	r2, sp, #12
 800361c:	4621      	mov	r1, r4
 800361e:	4630      	mov	r0, r6
 8003620:	f7ff fef6 	bl	8003410 <_printf_common>
 8003624:	3001      	adds	r0, #1
 8003626:	d14d      	bne.n	80036c4 <_printf_i+0x1c8>
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	b005      	add	sp, #20
 800362e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003632:	4839      	ldr	r0, [pc, #228]	; (8003718 <_printf_i+0x21c>)
 8003634:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	6821      	ldr	r1, [r4, #0]
 800363c:	1d1d      	adds	r5, r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6015      	str	r5, [r2, #0]
 8003642:	060a      	lsls	r2, r1, #24
 8003644:	d50b      	bpl.n	800365e <_printf_i+0x162>
 8003646:	07ca      	lsls	r2, r1, #31
 8003648:	bf44      	itt	mi
 800364a:	f041 0120 	orrmi.w	r1, r1, #32
 800364e:	6021      	strmi	r1, [r4, #0]
 8003650:	b91b      	cbnz	r3, 800365a <_printf_i+0x15e>
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	f022 0220 	bic.w	r2, r2, #32
 8003658:	6022      	str	r2, [r4, #0]
 800365a:	2210      	movs	r2, #16
 800365c:	e7b7      	b.n	80035ce <_printf_i+0xd2>
 800365e:	064d      	lsls	r5, r1, #25
 8003660:	bf48      	it	mi
 8003662:	b29b      	uxthmi	r3, r3
 8003664:	e7ef      	b.n	8003646 <_printf_i+0x14a>
 8003666:	4665      	mov	r5, ip
 8003668:	fbb3 f1f2 	udiv	r1, r3, r2
 800366c:	fb02 3311 	mls	r3, r2, r1, r3
 8003670:	5cc3      	ldrb	r3, [r0, r3]
 8003672:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003676:	460b      	mov	r3, r1
 8003678:	2900      	cmp	r1, #0
 800367a:	d1f5      	bne.n	8003668 <_printf_i+0x16c>
 800367c:	e7b9      	b.n	80035f2 <_printf_i+0xf6>
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	6825      	ldr	r5, [r4, #0]
 8003682:	1d18      	adds	r0, r3, #4
 8003684:	6961      	ldr	r1, [r4, #20]
 8003686:	6010      	str	r0, [r2, #0]
 8003688:	0628      	lsls	r0, r5, #24
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	d501      	bpl.n	8003692 <_printf_i+0x196>
 800368e:	6019      	str	r1, [r3, #0]
 8003690:	e002      	b.n	8003698 <_printf_i+0x19c>
 8003692:	066a      	lsls	r2, r5, #25
 8003694:	d5fb      	bpl.n	800368e <_printf_i+0x192>
 8003696:	8019      	strh	r1, [r3, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	4665      	mov	r5, ip
 800369c:	6123      	str	r3, [r4, #16]
 800369e:	e7b9      	b.n	8003614 <_printf_i+0x118>
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	1d19      	adds	r1, r3, #4
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	681d      	ldr	r5, [r3, #0]
 80036a8:	6862      	ldr	r2, [r4, #4]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 f837 	bl	8003720 <memchr>
 80036b2:	b108      	cbz	r0, 80036b8 <_printf_i+0x1bc>
 80036b4:	1b40      	subs	r0, r0, r5
 80036b6:	6060      	str	r0, [r4, #4]
 80036b8:	6863      	ldr	r3, [r4, #4]
 80036ba:	6123      	str	r3, [r4, #16]
 80036bc:	2300      	movs	r3, #0
 80036be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c2:	e7a7      	b.n	8003614 <_printf_i+0x118>
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	462a      	mov	r2, r5
 80036c8:	4639      	mov	r1, r7
 80036ca:	4630      	mov	r0, r6
 80036cc:	47c0      	blx	r8
 80036ce:	3001      	adds	r0, #1
 80036d0:	d0aa      	beq.n	8003628 <_printf_i+0x12c>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	079b      	lsls	r3, r3, #30
 80036d6:	d413      	bmi.n	8003700 <_printf_i+0x204>
 80036d8:	68e0      	ldr	r0, [r4, #12]
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	4298      	cmp	r0, r3
 80036de:	bfb8      	it	lt
 80036e0:	4618      	movlt	r0, r3
 80036e2:	e7a3      	b.n	800362c <_printf_i+0x130>
 80036e4:	2301      	movs	r3, #1
 80036e6:	464a      	mov	r2, r9
 80036e8:	4639      	mov	r1, r7
 80036ea:	4630      	mov	r0, r6
 80036ec:	47c0      	blx	r8
 80036ee:	3001      	adds	r0, #1
 80036f0:	d09a      	beq.n	8003628 <_printf_i+0x12c>
 80036f2:	3501      	adds	r5, #1
 80036f4:	68e3      	ldr	r3, [r4, #12]
 80036f6:	9a03      	ldr	r2, [sp, #12]
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	42ab      	cmp	r3, r5
 80036fc:	dcf2      	bgt.n	80036e4 <_printf_i+0x1e8>
 80036fe:	e7eb      	b.n	80036d8 <_printf_i+0x1dc>
 8003700:	2500      	movs	r5, #0
 8003702:	f104 0919 	add.w	r9, r4, #25
 8003706:	e7f5      	b.n	80036f4 <_printf_i+0x1f8>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ac      	bne.n	8003666 <_printf_i+0x16a>
 800370c:	7803      	ldrb	r3, [r0, #0]
 800370e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003716:	e76c      	b.n	80035f2 <_printf_i+0xf6>
 8003718:	080039dd 	.word	0x080039dd
 800371c:	080039ee 	.word	0x080039ee

08003720 <memchr>:
 8003720:	b510      	push	{r4, lr}
 8003722:	b2c9      	uxtb	r1, r1
 8003724:	4402      	add	r2, r0
 8003726:	4290      	cmp	r0, r2
 8003728:	4603      	mov	r3, r0
 800372a:	d101      	bne.n	8003730 <memchr+0x10>
 800372c:	2300      	movs	r3, #0
 800372e:	e003      	b.n	8003738 <memchr+0x18>
 8003730:	781c      	ldrb	r4, [r3, #0]
 8003732:	3001      	adds	r0, #1
 8003734:	428c      	cmp	r4, r1
 8003736:	d1f6      	bne.n	8003726 <memchr+0x6>
 8003738:	4618      	mov	r0, r3
 800373a:	bd10      	pop	{r4, pc}

0800373c <memcpy>:
 800373c:	b510      	push	{r4, lr}
 800373e:	1e43      	subs	r3, r0, #1
 8003740:	440a      	add	r2, r1
 8003742:	4291      	cmp	r1, r2
 8003744:	d100      	bne.n	8003748 <memcpy+0xc>
 8003746:	bd10      	pop	{r4, pc}
 8003748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800374c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003750:	e7f7      	b.n	8003742 <memcpy+0x6>

08003752 <memmove>:
 8003752:	4288      	cmp	r0, r1
 8003754:	b510      	push	{r4, lr}
 8003756:	eb01 0302 	add.w	r3, r1, r2
 800375a:	d807      	bhi.n	800376c <memmove+0x1a>
 800375c:	1e42      	subs	r2, r0, #1
 800375e:	4299      	cmp	r1, r3
 8003760:	d00a      	beq.n	8003778 <memmove+0x26>
 8003762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003766:	f802 4f01 	strb.w	r4, [r2, #1]!
 800376a:	e7f8      	b.n	800375e <memmove+0xc>
 800376c:	4283      	cmp	r3, r0
 800376e:	d9f5      	bls.n	800375c <memmove+0xa>
 8003770:	1881      	adds	r1, r0, r2
 8003772:	1ad2      	subs	r2, r2, r3
 8003774:	42d3      	cmn	r3, r2
 8003776:	d100      	bne.n	800377a <memmove+0x28>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800377e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003782:	e7f7      	b.n	8003774 <memmove+0x22>

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d043      	beq.n	8003814 <_free_r+0x90>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f8d0 	bl	800393c <__malloc_lock>
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <_free_r+0x94>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	4610      	mov	r0, r2
 80037a2:	b933      	cbnz	r3, 80037b2 <_free_r+0x2e>
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	6014      	str	r4, [r2, #0]
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ae:	f000 b8c6 	b.w	800393e <__malloc_unlock>
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	d90b      	bls.n	80037ce <_free_r+0x4a>
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	1862      	adds	r2, r4, r1
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bf01      	itttt	eq
 80037be:	681a      	ldreq	r2, [r3, #0]
 80037c0:	685b      	ldreq	r3, [r3, #4]
 80037c2:	1852      	addeq	r2, r2, r1
 80037c4:	6022      	streq	r2, [r4, #0]
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	6004      	str	r4, [r0, #0]
 80037ca:	e7ed      	b.n	80037a8 <_free_r+0x24>
 80037cc:	4613      	mov	r3, r2
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	b10a      	cbz	r2, 80037d6 <_free_r+0x52>
 80037d2:	42a2      	cmp	r2, r4
 80037d4:	d9fa      	bls.n	80037cc <_free_r+0x48>
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	1858      	adds	r0, r3, r1
 80037da:	42a0      	cmp	r0, r4
 80037dc:	d10b      	bne.n	80037f6 <_free_r+0x72>
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	4401      	add	r1, r0
 80037e2:	1858      	adds	r0, r3, r1
 80037e4:	4282      	cmp	r2, r0
 80037e6:	6019      	str	r1, [r3, #0]
 80037e8:	d1de      	bne.n	80037a8 <_free_r+0x24>
 80037ea:	6810      	ldr	r0, [r2, #0]
 80037ec:	6852      	ldr	r2, [r2, #4]
 80037ee:	4401      	add	r1, r0
 80037f0:	6019      	str	r1, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	e7d8      	b.n	80037a8 <_free_r+0x24>
 80037f6:	d902      	bls.n	80037fe <_free_r+0x7a>
 80037f8:	230c      	movs	r3, #12
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	e7d4      	b.n	80037a8 <_free_r+0x24>
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	1821      	adds	r1, r4, r0
 8003802:	428a      	cmp	r2, r1
 8003804:	bf01      	itttt	eq
 8003806:	6811      	ldreq	r1, [r2, #0]
 8003808:	6852      	ldreq	r2, [r2, #4]
 800380a:	1809      	addeq	r1, r1, r0
 800380c:	6021      	streq	r1, [r4, #0]
 800380e:	6062      	str	r2, [r4, #4]
 8003810:	605c      	str	r4, [r3, #4]
 8003812:	e7c9      	b.n	80037a8 <_free_r+0x24>
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	20000090 	.word	0x20000090

0800381c <_malloc_r>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	1ccd      	adds	r5, r1, #3
 8003820:	f025 0503 	bic.w	r5, r5, #3
 8003824:	3508      	adds	r5, #8
 8003826:	2d0c      	cmp	r5, #12
 8003828:	bf38      	it	cc
 800382a:	250c      	movcc	r5, #12
 800382c:	2d00      	cmp	r5, #0
 800382e:	4606      	mov	r6, r0
 8003830:	db01      	blt.n	8003836 <_malloc_r+0x1a>
 8003832:	42a9      	cmp	r1, r5
 8003834:	d903      	bls.n	800383e <_malloc_r+0x22>
 8003836:	230c      	movs	r3, #12
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	2000      	movs	r0, #0
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	f000 f87d 	bl	800393c <__malloc_lock>
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <_malloc_r+0xac>)
 8003844:	6814      	ldr	r4, [r2, #0]
 8003846:	4621      	mov	r1, r4
 8003848:	b991      	cbnz	r1, 8003870 <_malloc_r+0x54>
 800384a:	4c20      	ldr	r4, [pc, #128]	; (80038cc <_malloc_r+0xb0>)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	b91b      	cbnz	r3, 8003858 <_malloc_r+0x3c>
 8003850:	4630      	mov	r0, r6
 8003852:	f000 f863 	bl	800391c <_sbrk_r>
 8003856:	6020      	str	r0, [r4, #0]
 8003858:	4629      	mov	r1, r5
 800385a:	4630      	mov	r0, r6
 800385c:	f000 f85e 	bl	800391c <_sbrk_r>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d124      	bne.n	80038ae <_malloc_r+0x92>
 8003864:	230c      	movs	r3, #12
 8003866:	4630      	mov	r0, r6
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	f000 f868 	bl	800393e <__malloc_unlock>
 800386e:	e7e4      	b.n	800383a <_malloc_r+0x1e>
 8003870:	680b      	ldr	r3, [r1, #0]
 8003872:	1b5b      	subs	r3, r3, r5
 8003874:	d418      	bmi.n	80038a8 <_malloc_r+0x8c>
 8003876:	2b0b      	cmp	r3, #11
 8003878:	d90f      	bls.n	800389a <_malloc_r+0x7e>
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	18cc      	adds	r4, r1, r3
 800387e:	50cd      	str	r5, [r1, r3]
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f85c 	bl	800393e <__malloc_unlock>
 8003886:	f104 000b 	add.w	r0, r4, #11
 800388a:	1d23      	adds	r3, r4, #4
 800388c:	f020 0007 	bic.w	r0, r0, #7
 8003890:	1ac3      	subs	r3, r0, r3
 8003892:	d0d3      	beq.n	800383c <_malloc_r+0x20>
 8003894:	425a      	negs	r2, r3
 8003896:	50e2      	str	r2, [r4, r3]
 8003898:	e7d0      	b.n	800383c <_malloc_r+0x20>
 800389a:	684b      	ldr	r3, [r1, #4]
 800389c:	428c      	cmp	r4, r1
 800389e:	bf16      	itet	ne
 80038a0:	6063      	strne	r3, [r4, #4]
 80038a2:	6013      	streq	r3, [r2, #0]
 80038a4:	460c      	movne	r4, r1
 80038a6:	e7eb      	b.n	8003880 <_malloc_r+0x64>
 80038a8:	460c      	mov	r4, r1
 80038aa:	6849      	ldr	r1, [r1, #4]
 80038ac:	e7cc      	b.n	8003848 <_malloc_r+0x2c>
 80038ae:	1cc4      	adds	r4, r0, #3
 80038b0:	f024 0403 	bic.w	r4, r4, #3
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d005      	beq.n	80038c4 <_malloc_r+0xa8>
 80038b8:	1a21      	subs	r1, r4, r0
 80038ba:	4630      	mov	r0, r6
 80038bc:	f000 f82e 	bl	800391c <_sbrk_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0cf      	beq.n	8003864 <_malloc_r+0x48>
 80038c4:	6025      	str	r5, [r4, #0]
 80038c6:	e7db      	b.n	8003880 <_malloc_r+0x64>
 80038c8:	20000090 	.word	0x20000090
 80038cc:	20000094 	.word	0x20000094

080038d0 <_realloc_r>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	4607      	mov	r7, r0
 80038d4:	4614      	mov	r4, r2
 80038d6:	460e      	mov	r6, r1
 80038d8:	b921      	cbnz	r1, 80038e4 <_realloc_r+0x14>
 80038da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038de:	4611      	mov	r1, r2
 80038e0:	f7ff bf9c 	b.w	800381c <_malloc_r>
 80038e4:	b922      	cbnz	r2, 80038f0 <_realloc_r+0x20>
 80038e6:	f7ff ff4d 	bl	8003784 <_free_r>
 80038ea:	4625      	mov	r5, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f0:	f000 f826 	bl	8003940 <_malloc_usable_size_r>
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d20f      	bcs.n	8003918 <_realloc_r+0x48>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4638      	mov	r0, r7
 80038fc:	f7ff ff8e 	bl	800381c <_malloc_r>
 8003900:	4605      	mov	r5, r0
 8003902:	2800      	cmp	r0, #0
 8003904:	d0f2      	beq.n	80038ec <_realloc_r+0x1c>
 8003906:	4631      	mov	r1, r6
 8003908:	4622      	mov	r2, r4
 800390a:	f7ff ff17 	bl	800373c <memcpy>
 800390e:	4631      	mov	r1, r6
 8003910:	4638      	mov	r0, r7
 8003912:	f7ff ff37 	bl	8003784 <_free_r>
 8003916:	e7e9      	b.n	80038ec <_realloc_r+0x1c>
 8003918:	4635      	mov	r5, r6
 800391a:	e7e7      	b.n	80038ec <_realloc_r+0x1c>

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	2300      	movs	r3, #0
 8003920:	4c05      	ldr	r4, [pc, #20]	; (8003938 <_sbrk_r+0x1c>)
 8003922:	4605      	mov	r5, r0
 8003924:	4608      	mov	r0, r1
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	f7ff fb48 	bl	8002fbc <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2000010c 	.word	0x2000010c

0800393c <__malloc_lock>:
 800393c:	4770      	bx	lr

0800393e <__malloc_unlock>:
 800393e:	4770      	bx	lr

08003940 <_malloc_usable_size_r>:
 8003940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003944:	1f18      	subs	r0, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbc      	itt	lt
 800394a:	580b      	ldrlt	r3, [r1, r0]
 800394c:	18c0      	addlt	r0, r0, r3
 800394e:	4770      	bx	lr

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
