
LowPassFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800402c  0800402c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800402c  0800402c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800402c  0800402c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080040a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080040a4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123ae  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b4  00000000  00000000  00032447  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001680e  00000000  00000000  000360b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a9e3  00000000  00000000  0004c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077b59  00000000  00000000  000572a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cee02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000cee80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f98 	.word	0x08003f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003f98 	.word	0x08003f98

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2iz>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004dc:	d215      	bcs.n	800050a <__aeabi_d2iz+0x36>
 80004de:	d511      	bpl.n	8000504 <__aeabi_d2iz+0x30>
 80004e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004e8:	d912      	bls.n	8000510 <__aeabi_d2iz+0x3c>
 80004ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004fa:	fa23 f002 	lsr.w	r0, r3, r2
 80004fe:	bf18      	it	ne
 8000500:	4240      	negne	r0, r0
 8000502:	4770      	bx	lr
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	4770      	bx	lr
 800050a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800050e:	d105      	bne.n	800051c <__aeabi_d2iz+0x48>
 8000510:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800051a:	4770      	bx	lr
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <__aeabi_frsub>:
 8000524:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__addsf3>
 800052a:	bf00      	nop

0800052c <__aeabi_fsub>:
 800052c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000530 <__addsf3>:
 8000530:	0042      	lsls	r2, r0, #1
 8000532:	bf1f      	itttt	ne
 8000534:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000538:	ea92 0f03 	teqne	r2, r3
 800053c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000540:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000544:	d06a      	beq.n	800061c <__addsf3+0xec>
 8000546:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800054a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800054e:	bfc1      	itttt	gt
 8000550:	18d2      	addgt	r2, r2, r3
 8000552:	4041      	eorgt	r1, r0
 8000554:	4048      	eorgt	r0, r1
 8000556:	4041      	eorgt	r1, r0
 8000558:	bfb8      	it	lt
 800055a:	425b      	neglt	r3, r3
 800055c:	2b19      	cmp	r3, #25
 800055e:	bf88      	it	hi
 8000560:	4770      	bxhi	lr
 8000562:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000566:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800056a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800056e:	bf18      	it	ne
 8000570:	4240      	negne	r0, r0
 8000572:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000576:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800057a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800057e:	bf18      	it	ne
 8000580:	4249      	negne	r1, r1
 8000582:	ea92 0f03 	teq	r2, r3
 8000586:	d03f      	beq.n	8000608 <__addsf3+0xd8>
 8000588:	f1a2 0201 	sub.w	r2, r2, #1
 800058c:	fa41 fc03 	asr.w	ip, r1, r3
 8000590:	eb10 000c 	adds.w	r0, r0, ip
 8000594:	f1c3 0320 	rsb	r3, r3, #32
 8000598:	fa01 f103 	lsl.w	r1, r1, r3
 800059c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005a0:	d502      	bpl.n	80005a8 <__addsf3+0x78>
 80005a2:	4249      	negs	r1, r1
 80005a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005ac:	d313      	bcc.n	80005d6 <__addsf3+0xa6>
 80005ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005b2:	d306      	bcc.n	80005c2 <__addsf3+0x92>
 80005b4:	0840      	lsrs	r0, r0, #1
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	f102 0201 	add.w	r2, r2, #1
 80005be:	2afe      	cmp	r2, #254	; 0xfe
 80005c0:	d251      	bcs.n	8000666 <__addsf3+0x136>
 80005c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ca:	bf08      	it	eq
 80005cc:	f020 0001 	biceq.w	r0, r0, #1
 80005d0:	ea40 0003 	orr.w	r0, r0, r3
 80005d4:	4770      	bx	lr
 80005d6:	0049      	lsls	r1, r1, #1
 80005d8:	eb40 0000 	adc.w	r0, r0, r0
 80005dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80005e0:	f1a2 0201 	sub.w	r2, r2, #1
 80005e4:	d1ed      	bne.n	80005c2 <__addsf3+0x92>
 80005e6:	fab0 fc80 	clz	ip, r0
 80005ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80005ee:	ebb2 020c 	subs.w	r2, r2, ip
 80005f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005f6:	bfaa      	itet	ge
 80005f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005fc:	4252      	neglt	r2, r2
 80005fe:	4318      	orrge	r0, r3
 8000600:	bfbc      	itt	lt
 8000602:	40d0      	lsrlt	r0, r2
 8000604:	4318      	orrlt	r0, r3
 8000606:	4770      	bx	lr
 8000608:	f092 0f00 	teq	r2, #0
 800060c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000610:	bf06      	itte	eq
 8000612:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000616:	3201      	addeq	r2, #1
 8000618:	3b01      	subne	r3, #1
 800061a:	e7b5      	b.n	8000588 <__addsf3+0x58>
 800061c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000620:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000624:	bf18      	it	ne
 8000626:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800062a:	d021      	beq.n	8000670 <__addsf3+0x140>
 800062c:	ea92 0f03 	teq	r2, r3
 8000630:	d004      	beq.n	800063c <__addsf3+0x10c>
 8000632:	f092 0f00 	teq	r2, #0
 8000636:	bf08      	it	eq
 8000638:	4608      	moveq	r0, r1
 800063a:	4770      	bx	lr
 800063c:	ea90 0f01 	teq	r0, r1
 8000640:	bf1c      	itt	ne
 8000642:	2000      	movne	r0, #0
 8000644:	4770      	bxne	lr
 8000646:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800064a:	d104      	bne.n	8000656 <__addsf3+0x126>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	bf28      	it	cs
 8000650:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000654:	4770      	bx	lr
 8000656:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800065a:	bf3c      	itt	cc
 800065c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000660:	4770      	bxcc	lr
 8000662:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000666:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	4770      	bx	lr
 8000670:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000674:	bf16      	itet	ne
 8000676:	4608      	movne	r0, r1
 8000678:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800067c:	4601      	movne	r1, r0
 800067e:	0242      	lsls	r2, r0, #9
 8000680:	bf06      	itte	eq
 8000682:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000686:	ea90 0f01 	teqeq	r0, r1
 800068a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800068e:	4770      	bx	lr

08000690 <__aeabi_ui2f>:
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	e004      	b.n	80006a0 <__aeabi_i2f+0x8>
 8000696:	bf00      	nop

08000698 <__aeabi_i2f>:
 8000698:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	ea5f 0c00 	movs.w	ip, r0
 80006a4:	bf08      	it	eq
 80006a6:	4770      	bxeq	lr
 80006a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006ac:	4601      	mov	r1, r0
 80006ae:	f04f 0000 	mov.w	r0, #0
 80006b2:	e01c      	b.n	80006ee <__aeabi_l2f+0x2a>

080006b4 <__aeabi_ul2f>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	e00a      	b.n	80006d8 <__aeabi_l2f+0x14>
 80006c2:	bf00      	nop

080006c4 <__aeabi_l2f>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80006d0:	d502      	bpl.n	80006d8 <__aeabi_l2f+0x14>
 80006d2:	4240      	negs	r0, r0
 80006d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d8:	ea5f 0c01 	movs.w	ip, r1
 80006dc:	bf02      	ittt	eq
 80006de:	4684      	moveq	ip, r0
 80006e0:	4601      	moveq	r1, r0
 80006e2:	2000      	moveq	r0, #0
 80006e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80006e8:	bf08      	it	eq
 80006ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006f2:	fabc f28c 	clz	r2, ip
 80006f6:	3a08      	subs	r2, #8
 80006f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006fc:	db10      	blt.n	8000720 <__aeabi_l2f+0x5c>
 80006fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000702:	4463      	add	r3, ip
 8000704:	fa00 fc02 	lsl.w	ip, r0, r2
 8000708:	f1c2 0220 	rsb	r2, r2, #32
 800070c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000710:	fa20 f202 	lsr.w	r2, r0, r2
 8000714:	eb43 0002 	adc.w	r0, r3, r2
 8000718:	bf08      	it	eq
 800071a:	f020 0001 	biceq.w	r0, r0, #1
 800071e:	4770      	bx	lr
 8000720:	f102 0220 	add.w	r2, r2, #32
 8000724:	fa01 fc02 	lsl.w	ip, r1, r2
 8000728:	f1c2 0220 	rsb	r2, r2, #32
 800072c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000730:	fa21 f202 	lsr.w	r2, r1, r2
 8000734:	eb43 0002 	adc.w	r0, r3, r2
 8000738:	bf08      	it	eq
 800073a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800073e:	4770      	bx	lr

08000740 <__aeabi_fmul>:
 8000740:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000744:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000748:	bf1e      	ittt	ne
 800074a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800074e:	ea92 0f0c 	teqne	r2, ip
 8000752:	ea93 0f0c 	teqne	r3, ip
 8000756:	d06f      	beq.n	8000838 <__aeabi_fmul+0xf8>
 8000758:	441a      	add	r2, r3
 800075a:	ea80 0c01 	eor.w	ip, r0, r1
 800075e:	0240      	lsls	r0, r0, #9
 8000760:	bf18      	it	ne
 8000762:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000766:	d01e      	beq.n	80007a6 <__aeabi_fmul+0x66>
 8000768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800076c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000770:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000774:	fba0 3101 	umull	r3, r1, r0, r1
 8000778:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800077c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000780:	bf3e      	ittt	cc
 8000782:	0049      	lslcc	r1, r1, #1
 8000784:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000788:	005b      	lslcc	r3, r3, #1
 800078a:	ea40 0001 	orr.w	r0, r0, r1
 800078e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000792:	2afd      	cmp	r2, #253	; 0xfd
 8000794:	d81d      	bhi.n	80007d2 <__aeabi_fmul+0x92>
 8000796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800079a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800079e:	bf08      	it	eq
 80007a0:	f020 0001 	biceq.w	r0, r0, #1
 80007a4:	4770      	bx	lr
 80007a6:	f090 0f00 	teq	r0, #0
 80007aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007ae:	bf08      	it	eq
 80007b0:	0249      	lsleq	r1, r1, #9
 80007b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ba:	3a7f      	subs	r2, #127	; 0x7f
 80007bc:	bfc2      	ittt	gt
 80007be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007c6:	4770      	bxgt	lr
 80007c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	3a01      	subs	r2, #1
 80007d2:	dc5d      	bgt.n	8000890 <__aeabi_fmul+0x150>
 80007d4:	f112 0f19 	cmn.w	r2, #25
 80007d8:	bfdc      	itt	le
 80007da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80007de:	4770      	bxle	lr
 80007e0:	f1c2 0200 	rsb	r2, r2, #0
 80007e4:	0041      	lsls	r1, r0, #1
 80007e6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ea:	f1c2 0220 	rsb	r2, r2, #32
 80007ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80007f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007f6:	f140 0000 	adc.w	r0, r0, #0
 80007fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007fe:	bf08      	it	eq
 8000800:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000804:	4770      	bx	lr
 8000806:	f092 0f00 	teq	r2, #0
 800080a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800080e:	bf02      	ittt	eq
 8000810:	0040      	lsleq	r0, r0, #1
 8000812:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000816:	3a01      	subeq	r2, #1
 8000818:	d0f9      	beq.n	800080e <__aeabi_fmul+0xce>
 800081a:	ea40 000c 	orr.w	r0, r0, ip
 800081e:	f093 0f00 	teq	r3, #0
 8000822:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000826:	bf02      	ittt	eq
 8000828:	0049      	lsleq	r1, r1, #1
 800082a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800082e:	3b01      	subeq	r3, #1
 8000830:	d0f9      	beq.n	8000826 <__aeabi_fmul+0xe6>
 8000832:	ea41 010c 	orr.w	r1, r1, ip
 8000836:	e78f      	b.n	8000758 <__aeabi_fmul+0x18>
 8000838:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800083c:	ea92 0f0c 	teq	r2, ip
 8000840:	bf18      	it	ne
 8000842:	ea93 0f0c 	teqne	r3, ip
 8000846:	d00a      	beq.n	800085e <__aeabi_fmul+0x11e>
 8000848:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800084c:	bf18      	it	ne
 800084e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000852:	d1d8      	bne.n	8000806 <__aeabi_fmul+0xc6>
 8000854:	ea80 0001 	eor.w	r0, r0, r1
 8000858:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800085c:	4770      	bx	lr
 800085e:	f090 0f00 	teq	r0, #0
 8000862:	bf17      	itett	ne
 8000864:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000868:	4608      	moveq	r0, r1
 800086a:	f091 0f00 	teqne	r1, #0
 800086e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000872:	d014      	beq.n	800089e <__aeabi_fmul+0x15e>
 8000874:	ea92 0f0c 	teq	r2, ip
 8000878:	d101      	bne.n	800087e <__aeabi_fmul+0x13e>
 800087a:	0242      	lsls	r2, r0, #9
 800087c:	d10f      	bne.n	800089e <__aeabi_fmul+0x15e>
 800087e:	ea93 0f0c 	teq	r3, ip
 8000882:	d103      	bne.n	800088c <__aeabi_fmul+0x14c>
 8000884:	024b      	lsls	r3, r1, #9
 8000886:	bf18      	it	ne
 8000888:	4608      	movne	r0, r1
 800088a:	d108      	bne.n	800089e <__aeabi_fmul+0x15e>
 800088c:	ea80 0001 	eor.w	r0, r0, r1
 8000890:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000894:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000898:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800089c:	4770      	bx	lr
 800089e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008a6:	4770      	bx	lr

080008a8 <__aeabi_fdiv>:
 80008a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008b0:	bf1e      	ittt	ne
 80008b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008b6:	ea92 0f0c 	teqne	r2, ip
 80008ba:	ea93 0f0c 	teqne	r3, ip
 80008be:	d069      	beq.n	8000994 <__aeabi_fdiv+0xec>
 80008c0:	eba2 0203 	sub.w	r2, r2, r3
 80008c4:	ea80 0c01 	eor.w	ip, r0, r1
 80008c8:	0249      	lsls	r1, r1, #9
 80008ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008ce:	d037      	beq.n	8000940 <__aeabi_fdiv+0x98>
 80008d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008e0:	428b      	cmp	r3, r1
 80008e2:	bf38      	it	cc
 80008e4:	005b      	lslcc	r3, r3, #1
 80008e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80008ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80008ee:	428b      	cmp	r3, r1
 80008f0:	bf24      	itt	cs
 80008f2:	1a5b      	subcs	r3, r3, r1
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008fc:	bf24      	itt	cs
 80008fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000902:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000906:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800090a:	bf24      	itt	cs
 800090c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000910:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000914:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000918:	bf24      	itt	cs
 800091a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800091e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	bf18      	it	ne
 8000926:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800092a:	d1e0      	bne.n	80008ee <__aeabi_fdiv+0x46>
 800092c:	2afd      	cmp	r2, #253	; 0xfd
 800092e:	f63f af50 	bhi.w	80007d2 <__aeabi_fmul+0x92>
 8000932:	428b      	cmp	r3, r1
 8000934:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000938:	bf08      	it	eq
 800093a:	f020 0001 	biceq.w	r0, r0, #1
 800093e:	4770      	bx	lr
 8000940:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000944:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000948:	327f      	adds	r2, #127	; 0x7f
 800094a:	bfc2      	ittt	gt
 800094c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000950:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000954:	4770      	bxgt	lr
 8000956:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800095a:	f04f 0300 	mov.w	r3, #0
 800095e:	3a01      	subs	r2, #1
 8000960:	e737      	b.n	80007d2 <__aeabi_fmul+0x92>
 8000962:	f092 0f00 	teq	r2, #0
 8000966:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0040      	lsleq	r0, r0, #1
 800096e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000972:	3a01      	subeq	r2, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fdiv+0xc2>
 8000976:	ea40 000c 	orr.w	r0, r0, ip
 800097a:	f093 0f00 	teq	r3, #0
 800097e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000982:	bf02      	ittt	eq
 8000984:	0049      	lsleq	r1, r1, #1
 8000986:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800098a:	3b01      	subeq	r3, #1
 800098c:	d0f9      	beq.n	8000982 <__aeabi_fdiv+0xda>
 800098e:	ea41 010c 	orr.w	r1, r1, ip
 8000992:	e795      	b.n	80008c0 <__aeabi_fdiv+0x18>
 8000994:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000998:	ea92 0f0c 	teq	r2, ip
 800099c:	d108      	bne.n	80009b0 <__aeabi_fdiv+0x108>
 800099e:	0242      	lsls	r2, r0, #9
 80009a0:	f47f af7d 	bne.w	800089e <__aeabi_fmul+0x15e>
 80009a4:	ea93 0f0c 	teq	r3, ip
 80009a8:	f47f af70 	bne.w	800088c <__aeabi_fmul+0x14c>
 80009ac:	4608      	mov	r0, r1
 80009ae:	e776      	b.n	800089e <__aeabi_fmul+0x15e>
 80009b0:	ea93 0f0c 	teq	r3, ip
 80009b4:	d104      	bne.n	80009c0 <__aeabi_fdiv+0x118>
 80009b6:	024b      	lsls	r3, r1, #9
 80009b8:	f43f af4c 	beq.w	8000854 <__aeabi_fmul+0x114>
 80009bc:	4608      	mov	r0, r1
 80009be:	e76e      	b.n	800089e <__aeabi_fmul+0x15e>
 80009c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009c4:	bf18      	it	ne
 80009c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009ca:	d1ca      	bne.n	8000962 <__aeabi_fdiv+0xba>
 80009cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80009d0:	f47f af5c 	bne.w	800088c <__aeabi_fmul+0x14c>
 80009d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80009d8:	f47f af3c 	bne.w	8000854 <__aeabi_fmul+0x114>
 80009dc:	e75f      	b.n	800089e <__aeabi_fmul+0x15e>
 80009de:	bf00      	nop

080009e0 <__aeabi_f2iz>:
 80009e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e8:	d30f      	bcc.n	8000a0a <__aeabi_f2iz+0x2a>
 80009ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009f2:	d90d      	bls.n	8000a10 <__aeabi_f2iz+0x30>
 80009f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a00:	fa23 f002 	lsr.w	r0, r3, r2
 8000a04:	bf18      	it	ne
 8000a06:	4240      	negne	r0, r0
 8000a08:	4770      	bx	lr
 8000a0a:	f04f 0000 	mov.w	r0, #0
 8000a0e:	4770      	bx	lr
 8000a10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a14:	d101      	bne.n	8000a1a <__aeabi_f2iz+0x3a>
 8000a16:	0242      	lsls	r2, r0, #9
 8000a18:	d105      	bne.n	8000a26 <__aeabi_f2iz+0x46>
 8000a1a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a1e:	bf08      	it	eq
 8000a20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_f2uiz>:
 8000a2c:	0042      	lsls	r2, r0, #1
 8000a2e:	d20e      	bcs.n	8000a4e <__aeabi_f2uiz+0x22>
 8000a30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a34:	d30b      	bcc.n	8000a4e <__aeabi_f2uiz+0x22>
 8000a36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a3e:	d409      	bmi.n	8000a54 <__aeabi_f2uiz+0x28>
 8000a40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a48:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr
 8000a54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a58:	d101      	bne.n	8000a5e <__aeabi_f2uiz+0x32>
 8000a5a:	0242      	lsls	r2, r0, #9
 8000a5c:	d102      	bne.n	8000a64 <__aeabi_f2uiz+0x38>
 8000a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 fd13 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f002 fc0c 	bl	80032a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd2b 	bl	8001512 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 fcf3 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000000 	.word	0x20000000

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x1c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x20>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x20>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000004 	.word	0x20000004
 8000b18:	200000a0 	.word	0x200000a0

08000b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <HAL_GetTick+0x10>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	200000a0 	.word	0x200000a0

08000b30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e0be      	b.n	8000cd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d109      	bne.n	8000b74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f002 fbca 	bl	8003308 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fb8b 	bl	8001290 <ADC_ConversionStop_Disable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8099 	bne.w	8000cbe <HAL_ADC_Init+0x18e>
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8095 	bne.w	8000cbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b9c:	f023 0302 	bic.w	r3, r3, #2
 8000ba0:	f043 0202 	orr.w	r2, r3, #2
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000bb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000bb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc8:	d003      	beq.n	8000bd2 <HAL_ADC_Init+0xa2>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d102      	bne.n	8000bd8 <HAL_ADC_Init+0xa8>
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	e000      	b.n	8000bda <HAL_ADC_Init+0xaa>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d119      	bne.n	8000c1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	035a      	lsls	r2, r3, #13
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	e00b      	b.n	8000c1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	f043 0220 	orr.w	r2, r3, #32
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_ADC_Init+0x1a8>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c4c:	d003      	beq.n	8000c56 <HAL_ADC_Init+0x126>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d104      	bne.n	8000c60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	051b      	lsls	r3, r3, #20
 8000c5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_Init+0x1ac>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d10b      	bne.n	8000c9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9a:	e018      	b.n	8000cce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	f023 0312 	bic.w	r3, r3, #18
 8000ca4:	f043 0210 	orr.w	r2, r3, #16
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	f043 0201 	orr.w	r2, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cbc:	e007      	b.n	8000cce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f043 0210 	orr.w	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cdc:	ff1f0efe 	.word	0xff1f0efe

08000ce0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Start_IT+0x1a>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e0a0      	b.n	8000e3c <HAL_ADC_Start_IT+0x15c>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 fa72 	bl	80011ec <ADC_Enable>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 808f 	bne.w	8000e32 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a45      	ldr	r2, [pc, #276]	; (8000e44 <HAL_ADC_Start_IT+0x164>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_Start_IT+0x5e>
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <HAL_ADC_Start_IT+0x168>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d115      	bne.n	8000d6a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d026      	beq.n	8000da6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d68:	e01d      	b.n	8000da6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a33      	ldr	r2, [pc, #204]	; (8000e48 <HAL_ADC_Start_IT+0x168>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <HAL_ADC_Start_IT+0xaa>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a2f      	ldr	r2, [pc, #188]	; (8000e44 <HAL_ADC_Start_IT+0x164>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_ADC_Start_IT+0xc6>
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_ADC_Start_IT+0x168>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f023 0206 	bic.w	r2, r3, #6
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dbe:	e002      	b.n	8000dc6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f06f 0202 	mvn.w	r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0220 	orr.w	r2, r2, #32
 8000de6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000df2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000df6:	d113      	bne.n	8000e20 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dfc:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_ADC_Start_IT+0x164>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d105      	bne.n	8000e0e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_ADC_Start_IT+0x168>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d108      	bne.n	8000e20 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	e00c      	b.n	8000e3a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	e003      	b.n	8000e3a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40012800 	.word	0x40012800
 8000e48:	40012400 	.word	0x40012400

08000e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	2b20      	cmp	r3, #32
 8000e78:	d140      	bne.n	8000efc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d139      	bne.n	8000efc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eaa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eae:	d11d      	bne.n	8000eec <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d119      	bne.n	8000eec <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0220 	bic.w	r2, r2, #32
 8000ec6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f043 0201 	orr.w	r2, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f002 f95d 	bl	80031ac <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f06f 0212 	mvn.w	r2, #18
 8000efa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	2b80      	cmp	r3, #128	; 0x80
 8000f08:	d14f      	bne.n	8000faa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d148      	bne.n	8000faa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d105      	bne.n	8000f30 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f3a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f3e:	d012      	beq.n	8000f66 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d125      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f5c:	d11d      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d119      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f74:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f9b2 	bl	8001304 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f06f 020c 	mvn.w	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb4:	2b40      	cmp	r3, #64	; 0x40
 8000fb6:	d114      	bne.n	8000fe2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f809 	bl	8000fea <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 0201 	mvn.w	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_ConfigChannel+0x20>
 8001018:	2302      	movs	r3, #2
 800101a:	e0dc      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1da>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d81c      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	3b05      	subs	r3, #5
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b05      	subs	r3, #5
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
 8001064:	e03c      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d81c      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b23      	subs	r3, #35	; 0x23
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	4019      	ands	r1, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b23      	subs	r3, #35	; 0x23
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
 80010a6:	e01b      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b41      	subs	r3, #65	; 0x41
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b41      	subs	r3, #65	; 0x41
 80010d4:	fa00 f203 	lsl.w	r2, r0, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d91c      	bls.n	8001122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3b1e      	subs	r3, #30
 80010fa:	2207      	movs	r2, #7
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6898      	ldr	r0, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	3b1e      	subs	r3, #30
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	e019      	b.n	8001156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6919      	ldr	r1, [r3, #16]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	fa00 f203 	lsl.w	r2, r0, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d003      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	2b11      	cmp	r3, #17
 8001164:	d132      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d125      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d126      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800118c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d11a      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9a      	lsrs	r2, r3, #18
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x1b2>
 80011ba:	e007      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40012400 	.word	0x40012400
 80011e4:	20000008 	.word	0x20000008
 80011e8:	431bde83 	.word	0x431bde83

080011ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d039      	beq.n	800127e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <ADC_Enable+0x9c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <ADC_Enable+0xa0>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001228:	e002      	b.n	8001230 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001236:	f7ff fc71 	bl	8000b1c <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800123c:	e018      	b.n	8001270 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123e:	f7ff fc6d 	bl	8000b1c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d911      	bls.n	8001270 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e007      	b.n	8001280 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d1df      	bne.n	800123e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000008 	.word	0x20000008
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d127      	bne.n	80012fa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fc2f 	bl	8000b1c <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	e014      	b.n	80012ec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012c2:	f7ff fc2b 	bl	8000b1c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d90d      	bls.n	80012ec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e007      	b.n	80012fc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d0e3      	beq.n	80012c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4906      	ldr	r1, [pc, #24]	; (80013a8 <NVIC_EnableIRQ+0x2c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100

080013ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da0b      	bge.n	80013d8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <NVIC_SetPriority+0x4c>)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	3b04      	subs	r3, #4
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d6:	e009      	b.n	80013ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <NVIC_SetPriority+0x50>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	e000e100 	.word	0xe000e100

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff90 	bl	80013ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff31 	bl	8001318 <NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff46 	bl	8001360 <NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff39 	bl	800137c <NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b08b      	sub	sp, #44	; 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e127      	b.n	80017a0 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001550:	2201      	movs	r2, #1
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8116 	bne.w	800179a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b12      	cmp	r3, #18
 8001574:	d034      	beq.n	80015e0 <HAL_GPIO_Init+0xb4>
 8001576:	2b12      	cmp	r3, #18
 8001578:	d80d      	bhi.n	8001596 <HAL_GPIO_Init+0x6a>
 800157a:	2b02      	cmp	r3, #2
 800157c:	d02b      	beq.n	80015d6 <HAL_GPIO_Init+0xaa>
 800157e:	2b02      	cmp	r3, #2
 8001580:	d804      	bhi.n	800158c <HAL_GPIO_Init+0x60>
 8001582:	2b00      	cmp	r3, #0
 8001584:	d031      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
 8001586:	2b01      	cmp	r3, #1
 8001588:	d01c      	beq.n	80015c4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e048      	b.n	800161e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800158c:	2b03      	cmp	r3, #3
 800158e:	d043      	beq.n	8001618 <HAL_GPIO_Init+0xec>
 8001590:	2b11      	cmp	r3, #17
 8001592:	d01b      	beq.n	80015cc <HAL_GPIO_Init+0xa0>
          break;
 8001594:	e043      	b.n	800161e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001596:	4a87      	ldr	r2, [pc, #540]	; (80017b4 <HAL_GPIO_Init+0x288>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d026      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
 800159c:	4a85      	ldr	r2, [pc, #532]	; (80017b4 <HAL_GPIO_Init+0x288>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d806      	bhi.n	80015b0 <HAL_GPIO_Init+0x84>
 80015a2:	4a85      	ldr	r2, [pc, #532]	; (80017b8 <HAL_GPIO_Init+0x28c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d020      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
 80015a8:	4a84      	ldr	r2, [pc, #528]	; (80017bc <HAL_GPIO_Init+0x290>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01d      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
          break;
 80015ae:	e036      	b.n	800161e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80015b0:	4a83      	ldr	r2, [pc, #524]	; (80017c0 <HAL_GPIO_Init+0x294>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
 80015b6:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <HAL_GPIO_Init+0x298>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d016      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
 80015bc:	4a82      	ldr	r2, [pc, #520]	; (80017c8 <HAL_GPIO_Init+0x29c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0xbe>
          break;
 80015c2:	e02c      	b.n	800161e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e028      	b.n	800161e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e023      	b.n	800161e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	3308      	adds	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e01e      	b.n	800161e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	330c      	adds	r3, #12
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e019      	b.n	800161e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f2:	2304      	movs	r3, #4
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e012      	b.n	800161e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	611a      	str	r2, [r3, #16]
          break;
 800160a:	e008      	b.n	800161e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
          break;
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2bff      	cmp	r3, #255	; 0xff
 8001622:	d801      	bhi.n	8001628 <HAL_GPIO_Init+0xfc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	e001      	b.n	800162c <HAL_GPIO_Init+0x100>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d802      	bhi.n	800163a <HAL_GPIO_Init+0x10e>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x114>
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	3b08      	subs	r3, #8
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	210f      	movs	r1, #15
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	401a      	ands	r2, r3
 8001652:	6a39      	ldr	r1, [r7, #32]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8096 	beq.w	800179a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <HAL_GPIO_Init+0x2a0>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a56      	ldr	r2, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x2a0>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <HAL_GPIO_Init+0x2a0>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001686:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_GPIO_Init+0x2a4>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4013      	ands	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <HAL_GPIO_Init+0x2a8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x1ae>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2ac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x1aa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_GPIO_Init+0x2b0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x1a6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_GPIO_Init+0x2b4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x1a2>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x1b0>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x1b0>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x1b0>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x1b0>
 80016da:	2300      	movs	r3, #0
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80016ec:	4938      	ldr	r1, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x2a4>)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4936      	ldr	r1, [pc, #216]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4931      	ldr	r1, [pc, #196]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	492c      	ldr	r1, [pc, #176]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	4927      	ldr	r1, [pc, #156]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001746:	4013      	ands	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4922      	ldr	r1, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	43db      	mvns	r3, r3
 800176c:	491d      	ldr	r1, [pc, #116]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800176e:	4013      	ands	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4918      	ldr	r1, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	60cb      	str	r3, [r1, #12]
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <HAL_GPIO_Init+0x2b8>)
 8001796:	4013      	ands	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f aed4 	bls.w	8001550 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	372c      	adds	r7, #44	; 0x2c
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10110000 	.word	0x10110000
 80017bc:	10120000 	.word	0x10120000
 80017c0:	10310000 	.word	0x10310000
 80017c4:	10320000 	.word	0x10320000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8087 	beq.w	8001940 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001832:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183e:	4b8f      	ldr	r3, [pc, #572]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x58>
 800184a:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d06c      	beq.n	800193e <HAL_RCC_OscConfig+0x126>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d168      	bne.n	800193e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e22d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x70>
 800187a:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7f      	ldr	r2, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e02e      	b.n	80018e6 <HAL_RCC_OscConfig+0xce>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x92>
 8001890:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a79      	ldr	r2, [pc, #484]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a76      	ldr	r2, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e01d      	b.n	80018e6 <HAL_RCC_OscConfig+0xce>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0xb6>
 80018b4:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a70      	ldr	r2, [pc, #448]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6d      	ldr	r2, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0xce>
 80018ce:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d013      	beq.n	8001916 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff f915 	bl	8000b1c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7ff f911 	bl	8000b1c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1e1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0xde>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff f901 	bl	8000b1c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191e:	f7ff f8fd 	bl	8000b1c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b64      	cmp	r3, #100	; 0x64
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1cd      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x106>
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d063      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d11c      	bne.n	800199e <HAL_RCC_OscConfig+0x186>
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x170>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e1a1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4939      	ldr	r1, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199c:	e03a      	b.n	8001a14 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d020      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x268>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff f8b6 	bl	8000b1c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff f8b2 	bl	8000b1c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e182      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4926      	ldr	r1, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
 80019e6:	e015      	b.n	8001a14 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_RCC_OscConfig+0x268>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff f895 	bl	8000b1c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f891 	bl	8000b1c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e161      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d039      	beq.n	8001a94 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d019      	beq.n	8001a5c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f875 	bl	8000b1c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff f871 	bl	8000b1c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e141      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x264>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f000 fae3 	bl	8002020 <RCC_Delay>
 8001a5a:	e01b      	b.n	8001a94 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f85b 	bl	8000b1c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e00e      	b.n	8001a88 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f857 	bl	8000b1c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d907      	bls.n	8001a88 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e127      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	42420000 	.word	0x42420000
 8001a84:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ea      	bne.n	8001a6a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a6 	beq.w	8001bee <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10d      	bne.n	8001ace <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <HAL_RCC_OscConfig+0x4c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x4c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7e      	ldr	r2, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x4c0>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f819 	bl	8000b1c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff f815 	bl	8000b1c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0e5      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <HAL_RCC_OscConfig+0x4c0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x30a>
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e02d      	b.n	8001b7e <HAL_RCC_OscConfig+0x366>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x32c>
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a69      	ldr	r2, [pc, #420]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a66      	ldr	r2, [pc, #408]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x366>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x34e>
 8001b4c:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a60      	ldr	r2, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x366>
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a5a      	ldr	r2, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7fe ffc9 	bl	8000b1c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7fe ffc5 	bl	8000b1c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e093      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x376>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ffb3 	bl	8000b1c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ffaf 	bl	8000b1c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e07d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a3b      	ldr	r2, [pc, #236]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d069      	beq.n	8001cca <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d061      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d146      	bne.n	8001c98 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe ff84 	bl	8000b1c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe ff80 	bl	8000b1c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e050      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d108      	bne.n	8001c52 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4921      	ldr	r1, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a19      	ldr	r1, [r3, #32]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	430b      	orrs	r3, r1
 8001c64:	491b      	ldr	r1, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe ff54 	bl	8000b1c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe ff50 	bl	8000b1c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e020      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x460>
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff3d 	bl	8000b1c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe ff39 	bl	8000b1c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_OscConfig+0x4bc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x48e>
 8001cc4:	e001      	b.n	8001cca <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	42420060 	.word	0x42420060

08001ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cee:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d910      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4978      	ldr	r1, [pc, #480]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0e0      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d020      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d36:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a6c      	ldr	r2, [pc, #432]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d3c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d40:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a66      	ldr	r2, [pc, #408]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d54:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d58:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4b64      	ldr	r3, [pc, #400]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4961      	ldr	r1, [pc, #388]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d06a      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d80:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0a7      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e09b      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e093      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 0203 	bic.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4949      	ldr	r1, [pc, #292]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dca:	f7fe fea7 	bl	8000b1c <HAL_GetTick>
 8001dce:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d112      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe fe9f 	bl	8000b1c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e077      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_ClockConfig+0xfa>
 8001dfc:	e027      	b.n	8001e4e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d11d      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fe88 	bl	8000b1c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e060      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d1ee      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x128>
 8001e2a:	e010      	b.n	8001e4e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7fe fe76 	bl	8000b1c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04e      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d210      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	4920      	ldr	r1, [pc, #128]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e030      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ebc:	f000 f81c 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_RCC_ClockConfig+0x210>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_RCC_ClockConfig+0x214>)
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe fddd 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003fe0 	.word	0x08003fe0
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b490      	push	{r4, r7}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f00:	1d3c      	adds	r4, r7, #4
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x40>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x46>
 8001f36:	e02d      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3a:	623b      	str	r3, [r7, #32]
      break;
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0c5b      	lsrs	r3, r3, #17
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f70:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f76:	fb02 f203 	mul.w	r2, r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	e004      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	623b      	str	r3, [r7, #32]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f96:	623b      	str	r3, [r7, #32]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc90      	pop	{r4, r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	08003fb0 	.word	0x08003fb0
 8001fac:	08003fc0 	.word	0x08003fc0
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	007a1200 	.word	0x007a1200
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff2 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003ff0 	.word	0x08003ff0

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002000:	4601      	mov	r1, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08003ff0 	.word	0x08003ff0

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800203c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000008 	.word	0x20000008
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d07d      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020bc:	f7fe fd2e 	bl	8000b1c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	e008      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7fe fd2a 	bl	8000b1c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e06d      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02e      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d027      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d014      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fcf9 	bl	8000b1c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fcf5 	bl	8000b1c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e036      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4917      	ldr	r1, [pc, #92]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	4313      	orrs	r3, r2
 8002160:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	490b      	ldr	r1, [pc, #44]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42420440 	.word	0x42420440

080021c8 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01d      	b.n	8002216 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f001 f8ce 	bl	8003390 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 f8f8 	bl	80023fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fae8 	bl	8002808 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_TIM_PWM_Start+0x4c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d107      	bne.n	8002252 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40012c00 	.word	0x40012c00

08002270 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002286:	2302      	movs	r3, #2
 8002288:	e0b4      	b.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	f200 809f 	bhi.w	80023e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022dd 	.word	0x080022dd
 80022ac:	080023e1 	.word	0x080023e1
 80022b0:	080023e1 	.word	0x080023e1
 80022b4:	080023e1 	.word	0x080023e1
 80022b8:	0800231d 	.word	0x0800231d
 80022bc:	080023e1 	.word	0x080023e1
 80022c0:	080023e1 	.word	0x080023e1
 80022c4:	080023e1 	.word	0x080023e1
 80022c8:	0800235f 	.word	0x0800235f
 80022cc:	080023e1 	.word	0x080023e1
 80022d0:	080023e1 	.word	0x080023e1
 80022d4:	080023e1 	.word	0x080023e1
 80022d8:	0800239f 	.word	0x0800239f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f8f0 	bl	80024c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6999      	ldr	r1, [r3, #24]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	619a      	str	r2, [r3, #24]
    }
    break;
 800231a:	e062      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f93c 	bl	80025a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6999      	ldr	r1, [r3, #24]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	021a      	lsls	r2, r3, #8
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
    }
    break;
 800235c:	e041      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f98b 	bl	8002680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0208 	orr.w	r2, r2, #8
 8002378:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0204 	bic.w	r2, r2, #4
 8002388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69d9      	ldr	r1, [r3, #28]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	61da      	str	r2, [r3, #28]
    }
    break;
 800239c:	e021      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f9db 	bl	8002760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69d9      	ldr	r1, [r3, #28]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	61da      	str	r2, [r3, #28]
    }
    break;
 80023de:	e000      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80023e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <TIM_Base_SetConfig+0xc0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00b      	beq.n	8002430 <TIM_Base_SetConfig+0x34>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241e:	d007      	beq.n	8002430 <TIM_Base_SetConfig+0x34>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a27      	ldr	r2, [pc, #156]	; (80024c0 <TIM_Base_SetConfig+0xc4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0x34>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <TIM_Base_SetConfig+0xc8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <TIM_Base_SetConfig+0xc0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0x66>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0x66>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <TIM_Base_SetConfig+0xc4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0x66>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <TIM_Base_SetConfig+0xc8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d108      	bne.n	8002474 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <TIM_Base_SetConfig+0xc0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800

080024c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 0201 	bic.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0303 	bic.w	r3, r3, #3
 800250a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f023 0302 	bic.w	r3, r3, #2
 800251c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <TIM_OC1_SetConfig+0xd4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10c      	bne.n	800254a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0308 	bic.w	r3, r3, #8
 8002536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <TIM_OC1_SetConfig+0xd4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	621a      	str	r2, [r3, #32]
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40012c00 	.word	0x40012c00

080025a0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0210 	bic.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0320 	bic.w	r3, r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a1d      	ldr	r2, [pc, #116]	; (800267c <TIM_OC2_SetConfig+0xdc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10d      	bne.n	8002628 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002626:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a14      	ldr	r2, [pc, #80]	; (800267c <TIM_OC2_SetConfig+0xdc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d113      	bne.n	8002658 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800263e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	621a      	str	r2, [r3, #32]
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40012c00 	.word	0x40012c00

08002680 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <TIM_OC3_SetConfig+0xdc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002704:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <TIM_OC3_SetConfig+0xdc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d113      	bne.n	8002736 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	621a      	str	r2, [r3, #32]
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00

08002760 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <TIM_OC4_SetConfig+0xa4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d109      	bne.n	80027e0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00

08002808 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002818:	2201      	movs	r2, #1
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002864:	2302      	movs	r3, #2
 8002866:	e044      	b.n	80028f2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002910:	2302      	movs	r3, #2
 8002912:	e032      	b.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002932:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e03f      	b.n	8002a16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fd42 	bl	8003434 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f90b 	bl	8002be4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ec:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029fc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af02      	add	r7, sp, #8
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	f040 8083 	bne.w	8002b46 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_UART_Transmit+0x2e>
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07b      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x40>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e074      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a74:	f7fe f852 	bl	8000b1c <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	88fa      	ldrh	r2, [r7, #6]
 8002a84:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002a86:	e042      	b.n	8002b0e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d122      	bne.n	8002ae6 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f850 	bl	8002b50 <UART_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e046      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002acc:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3302      	adds	r3, #2
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	e017      	b.n	8002b0e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	e013      	b.n	8002b0e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f82d 	bl	8002b50 <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e023      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1b7      	bne.n	8002a88 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f814 	bl	8002b50 <UART_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e00a      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002b60:	e02c      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d028      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b70:	f7fd ffd4 	bl	8000b1c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d21d      	bcs.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e00f      	b.n	8002bdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d0c3      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c26:	f023 030c 	bic.w	r3, r3, #12
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <UART_SetConfig+0x228>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d16b      	bne.n	8002d2c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c54:	f7ff f9d0 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4a68      	ldr	r2, [pc, #416]	; (8002e10 <UART_SetConfig+0x22c>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	011c      	lsls	r4, r3, #4
 8002c78:	f7ff f9be 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c92:	f7ff f9b1 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <UART_SetConfig+0x22c>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2264      	movs	r2, #100	; 0x64
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	1aeb      	subs	r3, r5, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <UART_SetConfig+0x22c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	441c      	add	r4, r3
 8002cce:	f7ff f993 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ce8:	f7ff f986 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009a      	lsls	r2, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <UART_SetConfig+0x22c>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	2264      	movs	r2, #100	; 0x64
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	1aeb      	subs	r3, r5, r3
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	3332      	adds	r3, #50	; 0x32
 8002d16:	4a3e      	ldr	r2, [pc, #248]	; (8002e10 <UART_SetConfig+0x22c>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4422      	add	r2, r4
 8002d28:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002d2a:	e06a      	b.n	8002e02 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d2c:	f7ff f950 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	441a      	add	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <UART_SetConfig+0x22c>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	011c      	lsls	r4, r3, #4
 8002d50:	f7ff f93e 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d6a:	f7ff f931 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <UART_SetConfig+0x22c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2264      	movs	r2, #100	; 0x64
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	1aeb      	subs	r3, r5, r3
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <UART_SetConfig+0x22c>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da4:	441c      	add	r4, r3
 8002da6:	f7ff f913 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dc0:	f7ff f906 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <UART_SetConfig+0x22c>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2264      	movs	r2, #100	; 0x64
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	1aeb      	subs	r3, r5, r3
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <UART_SetConfig+0x22c>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4422      	add	r2, r4
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	51eb851f 	.word	0x51eb851f

08002e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e18:	f7fd fe28 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e1c:	f000 f83c 	bl	8002e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e20:	f000 f990 	bl	8003144 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e24:	f000 f964 	bl	80030f0 <MX_USART2_UART_Init>
  HAL_UART_Transmit(&huart2, (uint8_t*) "begin\r\n", 7, HAL_MAX_DELAY);
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4913      	ldr	r1, [pc, #76]	; (8002e7c <main+0x68>)
 8002e30:	4813      	ldr	r0, [pc, #76]	; (8002e80 <main+0x6c>)
 8002e32:	f7ff fdf4 	bl	8002a1e <HAL_UART_Transmit>
  MX_ADC1_Init();
 8002e36:	f000 f887 	bl	8002f48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002e3a:	f000 f8cf 	bl	8002fdc <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  samplePeriod = 0.00000625;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <main+0x70>)
 8002e40:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <main+0x74>)
 8002e42:	601a      	str	r2, [r3, #0]
  //tau = R*C;
  tau = 1.0;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <main+0x78>)
 8002e46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e4a:	601a      	str	r2, [r3, #0]
  periodOverTau = (float)samplePeriod/tau;
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <main+0x70>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <main+0x78>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7fd fd26 	bl	80008a8 <__aeabi_fdiv>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <main+0x7c>)
 8002e62:	601a      	str	r2, [r3, #0]
  OneMinusPeriodOverTau = (float)1 - periodOverTau;
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <main+0x7c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e6e:	f7fd fb5d 	bl	800052c <__aeabi_fsub>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <main+0x80>)
 8002e78:	601a      	str	r2, [r3, #0]
//
//  HAL_Delay(1000);

//  HAL_UART_Transmit(&huart2, (uint8_t*) "Ler ADC!\r\n", 10, HAL_MAX_DELAY);

  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <main+0x66>
 8002e7c:	08003fc4 	.word	0x08003fc4
 8002e80:	20000120 	.word	0x20000120
 8002e84:	20000160 	.word	0x20000160
 8002e88:	36d1b717 	.word	0x36d1b717
 8002e8c:	200000d8 	.word	0x200000d8
 8002e90:	200000a4 	.word	0x200000a4
 8002e94:	2000011c 	.word	0x2000011c

08002e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b094      	sub	sp, #80	; 0x50
 8002e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea2:	2228      	movs	r2, #40	; 0x28
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fbf2 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002edc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fc96 	bl	8001818 <HAL_RCC_OscConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ef2:	f000 f9d1 	bl	8003298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef6:	230f      	movs	r3, #15
 8002ef8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002efa:	2302      	movs	r3, #2
 8002efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2102      	movs	r1, #2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fee4 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002f1e:	f000 f9bb 	bl	8003298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f22:	2302      	movs	r3, #2
 8002f24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002f26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f894 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f3a:	f000 f9ad 	bl	8003298 <Error_Handler>
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3750      	adds	r7, #80	; 0x50
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <MX_ADC1_Init+0x90>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002f76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f84:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002f86:	f7fd fdd3 	bl	8000b30 <HAL_ADC_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002f90:	f000 f982 	bl	8003298 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002fa6:	f7fe f829 	bl	8000ffc <HAL_ADC_ConfigChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002fb0:	f000 f972 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */


  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2012      	movs	r0, #18
 8002fba:	f7fe fa80 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002fbe:	2012      	movs	r0, #18
 8002fc0:	f7fe fa99 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  HAL_ADC_Start_IT(&hadc1);
 8002fc4:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <MX_ADC1_Init+0x8c>)
 8002fc6:	f7fd fe8b 	bl	8000ce0 <HAL_ADC_Start_IT>

  /* USER CODE END ADC1_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200000a8 	.word	0x200000a8
 8002fd8:	40012400 	.word	0x40012400

08002fdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b090      	sub	sp, #64	; 0x40
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
 8002ffc:	615a      	str	r2, [r3, #20]
 8002ffe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003000:	463b      	mov	r3, r7
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	611a      	str	r2, [r3, #16]
 800300e:	615a      	str	r2, [r3, #20]
 8003010:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003012:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003014:	4a35      	ldr	r2, [pc, #212]	; (80030ec <MX_TIM1_Init+0x110>)
 8003016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <MX_TIM1_Init+0x10c>)
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301e:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003026:	f640 72ff 	movw	r2, #4095	; 0xfff
 800302a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302c:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <MX_TIM1_Init+0x10c>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <MX_TIM1_Init+0x10c>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800303e:	482a      	ldr	r0, [pc, #168]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003040:	f7ff f8c2 	bl	80021c8 <HAL_TIM_PWM_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800304a:	f000 f925 	bl	8003298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800305a:	4619      	mov	r1, r3
 800305c:	4822      	ldr	r0, [pc, #136]	; (80030e8 <MX_TIM1_Init+0x10c>)
 800305e:	f7ff fc4d 	bl	80028fc <HAL_TIMEx_MasterConfigSynchronization>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003068:	f000 f916 	bl	8003298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800306c:	2360      	movs	r3, #96	; 0x60
 800306e:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003078:	2300      	movs	r3, #0
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	2200      	movs	r2, #0
 800308e:	4619      	mov	r1, r3
 8003090:	4815      	ldr	r0, [pc, #84]	; (80030e8 <MX_TIM1_Init+0x10c>)
 8003092:	f7ff f8ed 	bl	8002270 <HAL_TIM_PWM_ConfigChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800309c:	f000 f8fc 	bl	8003298 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030be:	463b      	mov	r3, r7
 80030c0:	4619      	mov	r1, r3
 80030c2:	4809      	ldr	r0, [pc, #36]	; (80030e8 <MX_TIM1_Init+0x10c>)
 80030c4:	f7ff fbc2 	bl	800284c <HAL_TIMEx_ConfigBreakDeadTime>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80030ce:	f000 f8e3 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80030d2:	2100      	movs	r1, #0
 80030d4:	4804      	ldr	r0, [pc, #16]	; (80030e8 <MX_TIM1_Init+0x10c>)
 80030d6:	f7ff f8a3 	bl	8002220 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030da:	4803      	ldr	r0, [pc, #12]	; (80030e8 <MX_TIM1_Init+0x10c>)
 80030dc:	f000 f976 	bl	80033cc <HAL_TIM_MspPostInit>

}
 80030e0:	bf00      	nop
 80030e2:	3740      	adds	r7, #64	; 0x40
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200000dc 	.word	0x200000dc
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <MX_USART2_UART_Init+0x4c>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <MX_USART2_UART_Init+0x50>)
 80030f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <MX_USART2_UART_Init+0x4c>)
 80030fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <MX_USART2_UART_Init+0x4c>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003116:	220c      	movs	r2, #12
 8003118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <MX_USART2_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003128:	f7ff fc2c 	bl	8002984 <HAL_UART_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003132:	f000 f8b1 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000120 	.word	0x20000120
 8003140:	40004400 	.word	0x40004400

08003144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MX_GPIO_Init+0x60>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <MX_GPIO_Init+0x60>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6193      	str	r3, [r2, #24]
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_GPIO_Init+0x60>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Toggle_GPIO_Port, Toggle_Pin, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003176:	480c      	ldr	r0, [pc, #48]	; (80031a8 <MX_GPIO_Init+0x64>)
 8003178:	f7fe fb36 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Toggle_Pin */
  GPIO_InitStruct.Pin = Toggle_Pin;
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003182:	2301      	movs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2302      	movs	r3, #2
 800318c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Toggle_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	4619      	mov	r1, r3
 8003194:	4804      	ldr	r0, [pc, #16]	; (80031a8 <MX_GPIO_Init+0x64>)
 8003196:	f7fe f9c9 	bl	800152c <HAL_GPIO_Init>

}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010800 	.word	0x40010800

080031ac <HAL_ADC_ConvCpltCallback>:

	//HAL_UART_Transmit(&huart2, (uint8_t*) "Handle\n", 7, HAL_MAX_DELAY);
	HAL_ADC_IRQHandler(&hadc1);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b093      	sub	sp, #76	; 0x4c
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

	//Frequency = 189 kHz
	//HAL_GPIO_TogglePin(GPIOA, Toggle_Pin);

	//TIM1->CCR1 = HAL_ADC_GetValue(&hadc1);
	prevOut = (OneMinusPeriodOverTau*prevOut+periodOverTau*prevIn);
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_ADC_ConvCpltCallback+0xcc>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_ADC_ConvCpltCallback+0xd0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fd fabe 	bl	8000740 <__aeabi_fmul>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461c      	mov	r4, r3
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_ADC_ConvCpltCallback+0xd8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fd fab4 	bl	8000740 <__aeabi_fmul>
 80031d8:	4603      	mov	r3, r0
 80031da:	4619      	mov	r1, r3
 80031dc:	4620      	mov	r0, r4
 80031de:	f7fd f9a7 	bl	8000530 <__addsf3>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_ADC_ConvCpltCallback+0xd0>)
 80031e8:	601a      	str	r2, [r3, #0]
	TIM1->CCR1 = (uint16_t)prevOut;
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_ADC_ConvCpltCallback+0xd0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fc1c 	bl	8000a2c <__aeabi_f2uiz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_ADC_ConvCpltCallback+0xdc>)
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
	prevIn = HAL_ADC_GetValue(&hadc1);
 80031fc:	4823      	ldr	r0, [pc, #140]	; (800328c <HAL_ADC_ConvCpltCallback+0xe0>)
 80031fe:	f7fd fe25 	bl	8000e4c <HAL_ADC_GetValue>
 8003202:	4603      	mov	r3, r0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fa43 	bl	8000690 <__aeabi_ui2f>
 800320a:	4602      	mov	r2, r0
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_ADC_ConvCpltCallback+0xd8>)
 800320e:	601a      	str	r2, [r3, #0]
	char val[60];
	sprintf(val, "out: %d \r\nIn: %d \r\n", (int)round(prevOut), (int)roundf(prevIn));
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_ADC_ConvCpltCallback+0xd0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f905 	bl	8000424 <__aeabi_f2d>
 800321a:	4603      	mov	r3, r0
 800321c:	460c      	mov	r4, r1
 800321e:	4618      	mov	r0, r3
 8003220:	4621      	mov	r1, r4
 8003222:	f000 fe4f 	bl	8003ec4 <round>
 8003226:	4603      	mov	r3, r0
 8003228:	460c      	mov	r4, r1
 800322a:	4618      	mov	r0, r3
 800322c:	4621      	mov	r1, r4
 800322e:	f7fd f951 	bl	80004d4 <__aeabi_d2iz>
 8003232:	4604      	mov	r4, r0
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_ADC_ConvCpltCallback+0xd8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fe89 	bl	8003f50 <roundf>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fbcd 	bl	80009e0 <__aeabi_f2iz>
 8003246:	4603      	mov	r3, r0
 8003248:	f107 000c 	add.w	r0, r7, #12
 800324c:	4622      	mov	r2, r4
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <HAL_ADC_ConvCpltCallback+0xe4>)
 8003250:	f000 fa26 	bl	80036a0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), HAL_MAX_DELAY);
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	4618      	mov	r0, r3
 800325a:	f7fc ff77 	bl	800014c <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	b29a      	uxth	r2, r3
 8003262:	f107 010c 	add.w	r1, r7, #12
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	480a      	ldr	r0, [pc, #40]	; (8003294 <HAL_ADC_ConvCpltCallback+0xe8>)
 800326c:	f7ff fbd7 	bl	8002a1e <HAL_UART_Transmit>

}
 8003270:	bf00      	nop
 8003272:	374c      	adds	r7, #76	; 0x4c
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}
 8003278:	2000011c 	.word	0x2000011c
 800327c:	20000090 	.word	0x20000090
 8003280:	200000a4 	.word	0x200000a4
 8003284:	2000008c 	.word	0x2000008c
 8003288:	40012c00 	.word	0x40012c00
 800328c:	200000a8 	.word	0x200000a8
 8003290:	08003fcc 	.word	0x08003fcc
 8003294:	20000120 	.word	0x20000120

08003298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_MspInit+0x5c>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_MspInit+0x5c>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6193      	str	r3, [r2, #24]
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_MspInit+0x5c>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_MspInit+0x5c>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_MspInit+0x5c>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_MspInit+0x5c>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_MspInit+0x60>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_MspInit+0x60>)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40021000 	.word	0x40021000
 8003304:	40010000 	.word	0x40010000

08003308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_ADC_MspInit+0x7c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d129      	bne.n	800337c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_ADC_MspInit+0x80>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4a16      	ldr	r2, [pc, #88]	; (8003388 <HAL_ADC_MspInit+0x80>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003332:	6193      	str	r3, [r2, #24]
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_ADC_MspInit+0x80>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_ADC_MspInit+0x80>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a10      	ldr	r2, [pc, #64]	; (8003388 <HAL_ADC_MspInit+0x80>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6193      	str	r3, [r2, #24]
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_ADC_MspInit+0x80>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003358:	2302      	movs	r3, #2
 800335a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335c:	2303      	movs	r3, #3
 800335e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4809      	ldr	r0, [pc, #36]	; (800338c <HAL_ADC_MspInit+0x84>)
 8003368:	f7fe f8e0 	bl	800152c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	2012      	movs	r0, #18
 8003372:	f7fe f8a4 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003376:	2012      	movs	r0, #18
 8003378:	f7fe f8bd 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40012400 	.word	0x40012400
 8003388:	40021000 	.word	0x40021000
 800338c:	40010800 	.word	0x40010800

08003390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_TIM_PWM_MspInit+0x34>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10b      	bne.n	80033ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ac:	6193      	str	r3, [r2, #24]
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_TIM_MspPostInit+0x5c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d118      	bne.n	800341e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	6193      	str	r3, [r2, #24]
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2302      	movs	r3, #2
 8003410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	; (8003430 <HAL_TIM_MspPostInit+0x64>)
 800341a:	f7fe f887 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800341e:	bf00      	nop
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40010800 	.word	0x40010800

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_UART_MspInit+0x88>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12f      	bne.n	80034b4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345e:	61d3      	str	r3, [r2, #28]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003484:	2304      	movs	r3, #4
 8003486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0310 	add.w	r3, r7, #16
 8003494:	4619      	mov	r1, r3
 8003496:	480b      	ldr	r0, [pc, #44]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003498:	f7fe f848 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800349c:	2308      	movs	r3, #8
 800349e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	4619      	mov	r1, r3
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_UART_MspInit+0x90>)
 80034b0:	f7fe f83c 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034b4:	bf00      	nop
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010800 	.word	0x40010800

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <HardFault_Handler+0x4>

080034da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034de:	e7fe      	b.n	80034de <MemManage_Handler+0x4>

080034e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <BusFault_Handler+0x4>

080034e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <UsageFault_Handler+0x4>

080034ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003514:	f7fd faf0 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}

0800351c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <ADC1_2_IRQHandler+0x10>)
 8003522:	f7fd fc9f 	bl	8000e64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200000a8 	.word	0x200000a8

08003530 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <_sbrk+0x50>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <_sbrk+0x16>
		heap_end = &end;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <_sbrk+0x50>)
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <_sbrk+0x54>)
 8003544:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <_sbrk+0x50>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <_sbrk+0x50>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	466a      	mov	r2, sp
 8003556:	4293      	cmp	r3, r2
 8003558:	d907      	bls.n	800356a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800355a:	f000 f86f 	bl	800363c <__errno>
 800355e:	4602      	mov	r2, r0
 8003560:	230c      	movs	r3, #12
 8003562:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	e006      	b.n	8003578 <_sbrk+0x48>
	}

	heap_end += incr;
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <_sbrk+0x50>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	4a03      	ldr	r2, [pc, #12]	; (8003580 <_sbrk+0x50>)
 8003574:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000094 	.word	0x20000094
 8003584:	20000168 	.word	0x20000168

08003588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <SystemInit+0x5c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <SystemInit+0x5c>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <SystemInit+0x5c>)
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4911      	ldr	r1, [pc, #68]	; (80035e4 <SystemInit+0x5c>)
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <SystemInit+0x60>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <SystemInit+0x5c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <SystemInit+0x5c>)
 80035aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <SystemInit+0x5c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <SystemInit+0x5c>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <SystemInit+0x5c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <SystemInit+0x5c>)
 80035c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80035ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <SystemInit+0x5c>)
 80035ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80035d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SystemInit+0x64>)
 80035d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035da:	609a      	str	r2, [r3, #8]
#endif 
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40021000 	.word	0x40021000
 80035e8:	f8ff0000 	.word	0xf8ff0000
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035f2:	e003      	b.n	80035fc <LoopCopyDataInit>

080035f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80035f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80035fa:	3104      	adds	r1, #4

080035fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035fc:	480a      	ldr	r0, [pc, #40]	; (8003628 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003600:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003602:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003604:	d3f6      	bcc.n	80035f4 <CopyDataInit>
  ldr r2, =_sbss
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003608:	e002      	b.n	8003610 <LoopFillZerobss>

0800360a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800360c:	f842 3b04 	str.w	r3, [r2], #4

08003610 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003612:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003614:	d3f9      	bcc.n	800360a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003616:	f7ff ffb7 	bl	8003588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800361a:	f000 f815 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800361e:	f7ff fbf9 	bl	8002e14 <main>
  bx lr
 8003622:	4770      	bx	lr
  ldr r3, =_sidata
 8003624:	08004034 	.word	0x08004034
  ldr r0, =_sdata
 8003628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800362c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003630:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003634:	20000168 	.word	0x20000168

08003638 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003638:	e7fe      	b.n	8003638 <CAN1_RX1_IRQHandler>
	...

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2500      	movs	r5, #0
 800364c:	4e0c      	ldr	r6, [pc, #48]	; (8003680 <__libc_init_array+0x38>)
 800364e:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 8003650:	1ba4      	subs	r4, r4, r6
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a5      	cmp	r5, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	f000 fc9e 	bl	8003f98 <_init>
 800365c:	2500      	movs	r5, #0
 800365e:	4e0a      	ldr	r6, [pc, #40]	; (8003688 <__libc_init_array+0x40>)
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <__libc_init_array+0x44>)
 8003662:	1ba4      	subs	r4, r4, r6
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a5      	cmp	r5, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003670:	4798      	blx	r3
 8003672:	3501      	adds	r5, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367a:	4798      	blx	r3
 800367c:	3501      	adds	r5, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	0800402c 	.word	0x0800402c
 8003684:	0800402c 	.word	0x0800402c
 8003688:	0800402c 	.word	0x0800402c
 800368c:	08004030 	.word	0x08004030

08003690 <memset>:
 8003690:	4603      	mov	r3, r0
 8003692:	4402      	add	r2, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <siprintf>:
 80036a0:	b40e      	push	{r1, r2, r3}
 80036a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036a6:	b500      	push	{lr}
 80036a8:	b09c      	sub	sp, #112	; 0x70
 80036aa:	ab1d      	add	r3, sp, #116	; 0x74
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	9006      	str	r0, [sp, #24]
 80036b0:	9107      	str	r1, [sp, #28]
 80036b2:	9104      	str	r1, [sp, #16]
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <siprintf+0x38>)
 80036b6:	4909      	ldr	r1, [pc, #36]	; (80036dc <siprintf+0x3c>)
 80036b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036bc:	9105      	str	r1, [sp, #20]
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	a902      	add	r1, sp, #8
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f000 f866 	bl	8003794 <_svfiprintf_r>
 80036c8:	2200      	movs	r2, #0
 80036ca:	9b02      	ldr	r3, [sp, #8]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	b01c      	add	sp, #112	; 0x70
 80036d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d4:	b003      	add	sp, #12
 80036d6:	4770      	bx	lr
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	ffff0208 	.word	0xffff0208

080036e0 <__ssputs_r>:
 80036e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	688e      	ldr	r6, [r1, #8]
 80036e6:	4682      	mov	sl, r0
 80036e8:	429e      	cmp	r6, r3
 80036ea:	460c      	mov	r4, r1
 80036ec:	4690      	mov	r8, r2
 80036ee:	4699      	mov	r9, r3
 80036f0:	d837      	bhi.n	8003762 <__ssputs_r+0x82>
 80036f2:	898a      	ldrh	r2, [r1, #12]
 80036f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036f8:	d031      	beq.n	800375e <__ssputs_r+0x7e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	6825      	ldr	r5, [r4, #0]
 80036fe:	6909      	ldr	r1, [r1, #16]
 8003700:	1a6f      	subs	r7, r5, r1
 8003702:	6965      	ldr	r5, [r4, #20]
 8003704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003708:	fb95 f5f3 	sdiv	r5, r5, r3
 800370c:	f109 0301 	add.w	r3, r9, #1
 8003710:	443b      	add	r3, r7
 8003712:	429d      	cmp	r5, r3
 8003714:	bf38      	it	cc
 8003716:	461d      	movcc	r5, r3
 8003718:	0553      	lsls	r3, r2, #21
 800371a:	d530      	bpl.n	800377e <__ssputs_r+0x9e>
 800371c:	4629      	mov	r1, r5
 800371e:	f000 fb37 	bl	8003d90 <_malloc_r>
 8003722:	4606      	mov	r6, r0
 8003724:	b950      	cbnz	r0, 800373c <__ssputs_r+0x5c>
 8003726:	230c      	movs	r3, #12
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f8ca 3000 	str.w	r3, [sl]
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	463a      	mov	r2, r7
 800373e:	6921      	ldr	r1, [r4, #16]
 8003740:	f000 fab6 	bl	8003cb0 <memcpy>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	6126      	str	r6, [r4, #16]
 8003752:	443e      	add	r6, r7
 8003754:	6026      	str	r6, [r4, #0]
 8003756:	464e      	mov	r6, r9
 8003758:	6165      	str	r5, [r4, #20]
 800375a:	1bed      	subs	r5, r5, r7
 800375c:	60a5      	str	r5, [r4, #8]
 800375e:	454e      	cmp	r6, r9
 8003760:	d900      	bls.n	8003764 <__ssputs_r+0x84>
 8003762:	464e      	mov	r6, r9
 8003764:	4632      	mov	r2, r6
 8003766:	4641      	mov	r1, r8
 8003768:	6820      	ldr	r0, [r4, #0]
 800376a:	f000 faac 	bl	8003cc6 <memmove>
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	2000      	movs	r0, #0
 8003772:	1b9b      	subs	r3, r3, r6
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	441e      	add	r6, r3
 800377a:	6026      	str	r6, [r4, #0]
 800377c:	e7dc      	b.n	8003738 <__ssputs_r+0x58>
 800377e:	462a      	mov	r2, r5
 8003780:	f000 fb60 	bl	8003e44 <_realloc_r>
 8003784:	4606      	mov	r6, r0
 8003786:	2800      	cmp	r0, #0
 8003788:	d1e2      	bne.n	8003750 <__ssputs_r+0x70>
 800378a:	6921      	ldr	r1, [r4, #16]
 800378c:	4650      	mov	r0, sl
 800378e:	f000 fab3 	bl	8003cf8 <_free_r>
 8003792:	e7c8      	b.n	8003726 <__ssputs_r+0x46>

08003794 <_svfiprintf_r>:
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003798:	461d      	mov	r5, r3
 800379a:	898b      	ldrh	r3, [r1, #12]
 800379c:	b09d      	sub	sp, #116	; 0x74
 800379e:	061f      	lsls	r7, r3, #24
 80037a0:	4680      	mov	r8, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	4616      	mov	r6, r2
 80037a6:	d50f      	bpl.n	80037c8 <_svfiprintf_r+0x34>
 80037a8:	690b      	ldr	r3, [r1, #16]
 80037aa:	b96b      	cbnz	r3, 80037c8 <_svfiprintf_r+0x34>
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	f000 faef 	bl	8003d90 <_malloc_r>
 80037b2:	6020      	str	r0, [r4, #0]
 80037b4:	6120      	str	r0, [r4, #16]
 80037b6:	b928      	cbnz	r0, 80037c4 <_svfiprintf_r+0x30>
 80037b8:	230c      	movs	r3, #12
 80037ba:	f8c8 3000 	str.w	r3, [r8]
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	e0c8      	b.n	8003956 <_svfiprintf_r+0x1c2>
 80037c4:	2340      	movs	r3, #64	; 0x40
 80037c6:	6163      	str	r3, [r4, #20]
 80037c8:	2300      	movs	r3, #0
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
 80037cc:	2320      	movs	r3, #32
 80037ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d2:	2330      	movs	r3, #48	; 0x30
 80037d4:	f04f 0b01 	mov.w	fp, #1
 80037d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037dc:	9503      	str	r5, [sp, #12]
 80037de:	4637      	mov	r7, r6
 80037e0:	463d      	mov	r5, r7
 80037e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037e6:	b10b      	cbz	r3, 80037ec <_svfiprintf_r+0x58>
 80037e8:	2b25      	cmp	r3, #37	; 0x25
 80037ea:	d13e      	bne.n	800386a <_svfiprintf_r+0xd6>
 80037ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80037f0:	d00b      	beq.n	800380a <_svfiprintf_r+0x76>
 80037f2:	4653      	mov	r3, sl
 80037f4:	4632      	mov	r2, r6
 80037f6:	4621      	mov	r1, r4
 80037f8:	4640      	mov	r0, r8
 80037fa:	f7ff ff71 	bl	80036e0 <__ssputs_r>
 80037fe:	3001      	adds	r0, #1
 8003800:	f000 80a4 	beq.w	800394c <_svfiprintf_r+0x1b8>
 8003804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003806:	4453      	add	r3, sl
 8003808:	9309      	str	r3, [sp, #36]	; 0x24
 800380a:	783b      	ldrb	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 809d 	beq.w	800394c <_svfiprintf_r+0x1b8>
 8003812:	2300      	movs	r3, #0
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800381c:	9304      	str	r3, [sp, #16]
 800381e:	9307      	str	r3, [sp, #28]
 8003820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003824:	931a      	str	r3, [sp, #104]	; 0x68
 8003826:	462f      	mov	r7, r5
 8003828:	2205      	movs	r2, #5
 800382a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800382e:	4850      	ldr	r0, [pc, #320]	; (8003970 <_svfiprintf_r+0x1dc>)
 8003830:	f000 fa30 	bl	8003c94 <memchr>
 8003834:	9b04      	ldr	r3, [sp, #16]
 8003836:	b9d0      	cbnz	r0, 800386e <_svfiprintf_r+0xda>
 8003838:	06d9      	lsls	r1, r3, #27
 800383a:	bf44      	itt	mi
 800383c:	2220      	movmi	r2, #32
 800383e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003842:	071a      	lsls	r2, r3, #28
 8003844:	bf44      	itt	mi
 8003846:	222b      	movmi	r2, #43	; 0x2b
 8003848:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800384c:	782a      	ldrb	r2, [r5, #0]
 800384e:	2a2a      	cmp	r2, #42	; 0x2a
 8003850:	d015      	beq.n	800387e <_svfiprintf_r+0xea>
 8003852:	462f      	mov	r7, r5
 8003854:	2000      	movs	r0, #0
 8003856:	250a      	movs	r5, #10
 8003858:	9a07      	ldr	r2, [sp, #28]
 800385a:	4639      	mov	r1, r7
 800385c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003860:	3b30      	subs	r3, #48	; 0x30
 8003862:	2b09      	cmp	r3, #9
 8003864:	d94d      	bls.n	8003902 <_svfiprintf_r+0x16e>
 8003866:	b1b8      	cbz	r0, 8003898 <_svfiprintf_r+0x104>
 8003868:	e00f      	b.n	800388a <_svfiprintf_r+0xf6>
 800386a:	462f      	mov	r7, r5
 800386c:	e7b8      	b.n	80037e0 <_svfiprintf_r+0x4c>
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <_svfiprintf_r+0x1dc>)
 8003870:	463d      	mov	r5, r7
 8003872:	1a80      	subs	r0, r0, r2
 8003874:	fa0b f000 	lsl.w	r0, fp, r0
 8003878:	4318      	orrs	r0, r3
 800387a:	9004      	str	r0, [sp, #16]
 800387c:	e7d3      	b.n	8003826 <_svfiprintf_r+0x92>
 800387e:	9a03      	ldr	r2, [sp, #12]
 8003880:	1d11      	adds	r1, r2, #4
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	9103      	str	r1, [sp, #12]
 8003886:	2a00      	cmp	r2, #0
 8003888:	db01      	blt.n	800388e <_svfiprintf_r+0xfa>
 800388a:	9207      	str	r2, [sp, #28]
 800388c:	e004      	b.n	8003898 <_svfiprintf_r+0x104>
 800388e:	4252      	negs	r2, r2
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	9207      	str	r2, [sp, #28]
 8003896:	9304      	str	r3, [sp, #16]
 8003898:	783b      	ldrb	r3, [r7, #0]
 800389a:	2b2e      	cmp	r3, #46	; 0x2e
 800389c:	d10c      	bne.n	80038b8 <_svfiprintf_r+0x124>
 800389e:	787b      	ldrb	r3, [r7, #1]
 80038a0:	2b2a      	cmp	r3, #42	; 0x2a
 80038a2:	d133      	bne.n	800390c <_svfiprintf_r+0x178>
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	3702      	adds	r7, #2
 80038a8:	1d1a      	adds	r2, r3, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	9203      	str	r2, [sp, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bfb8      	it	lt
 80038b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80038b6:	9305      	str	r3, [sp, #20]
 80038b8:	4d2e      	ldr	r5, [pc, #184]	; (8003974 <_svfiprintf_r+0x1e0>)
 80038ba:	2203      	movs	r2, #3
 80038bc:	7839      	ldrb	r1, [r7, #0]
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f9e8 	bl	8003c94 <memchr>
 80038c4:	b138      	cbz	r0, 80038d6 <_svfiprintf_r+0x142>
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	1b40      	subs	r0, r0, r5
 80038ca:	fa03 f000 	lsl.w	r0, r3, r0
 80038ce:	9b04      	ldr	r3, [sp, #16]
 80038d0:	3701      	adds	r7, #1
 80038d2:	4303      	orrs	r3, r0
 80038d4:	9304      	str	r3, [sp, #16]
 80038d6:	7839      	ldrb	r1, [r7, #0]
 80038d8:	2206      	movs	r2, #6
 80038da:	4827      	ldr	r0, [pc, #156]	; (8003978 <_svfiprintf_r+0x1e4>)
 80038dc:	1c7e      	adds	r6, r7, #1
 80038de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038e2:	f000 f9d7 	bl	8003c94 <memchr>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d038      	beq.n	800395c <_svfiprintf_r+0x1c8>
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <_svfiprintf_r+0x1e8>)
 80038ec:	bb13      	cbnz	r3, 8003934 <_svfiprintf_r+0x1a0>
 80038ee:	9b03      	ldr	r3, [sp, #12]
 80038f0:	3307      	adds	r3, #7
 80038f2:	f023 0307 	bic.w	r3, r3, #7
 80038f6:	3308      	adds	r3, #8
 80038f8:	9303      	str	r3, [sp, #12]
 80038fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fc:	444b      	add	r3, r9
 80038fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003900:	e76d      	b.n	80037de <_svfiprintf_r+0x4a>
 8003902:	fb05 3202 	mla	r2, r5, r2, r3
 8003906:	2001      	movs	r0, #1
 8003908:	460f      	mov	r7, r1
 800390a:	e7a6      	b.n	800385a <_svfiprintf_r+0xc6>
 800390c:	2300      	movs	r3, #0
 800390e:	250a      	movs	r5, #10
 8003910:	4619      	mov	r1, r3
 8003912:	3701      	adds	r7, #1
 8003914:	9305      	str	r3, [sp, #20]
 8003916:	4638      	mov	r0, r7
 8003918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800391c:	3a30      	subs	r2, #48	; 0x30
 800391e:	2a09      	cmp	r2, #9
 8003920:	d903      	bls.n	800392a <_svfiprintf_r+0x196>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0c8      	beq.n	80038b8 <_svfiprintf_r+0x124>
 8003926:	9105      	str	r1, [sp, #20]
 8003928:	e7c6      	b.n	80038b8 <_svfiprintf_r+0x124>
 800392a:	fb05 2101 	mla	r1, r5, r1, r2
 800392e:	2301      	movs	r3, #1
 8003930:	4607      	mov	r7, r0
 8003932:	e7f0      	b.n	8003916 <_svfiprintf_r+0x182>
 8003934:	ab03      	add	r3, sp, #12
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4622      	mov	r2, r4
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <_svfiprintf_r+0x1ec>)
 800393c:	a904      	add	r1, sp, #16
 800393e:	4640      	mov	r0, r8
 8003940:	f3af 8000 	nop.w
 8003944:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003948:	4681      	mov	r9, r0
 800394a:	d1d6      	bne.n	80038fa <_svfiprintf_r+0x166>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	065b      	lsls	r3, r3, #25
 8003950:	f53f af35 	bmi.w	80037be <_svfiprintf_r+0x2a>
 8003954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003956:	b01d      	add	sp, #116	; 0x74
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395c:	ab03      	add	r3, sp, #12
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	4622      	mov	r2, r4
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <_svfiprintf_r+0x1ec>)
 8003964:	a904      	add	r1, sp, #16
 8003966:	4640      	mov	r0, r8
 8003968:	f000 f882 	bl	8003a70 <_printf_i>
 800396c:	e7ea      	b.n	8003944 <_svfiprintf_r+0x1b0>
 800396e:	bf00      	nop
 8003970:	08003ff8 	.word	0x08003ff8
 8003974:	08003ffe 	.word	0x08003ffe
 8003978:	08004002 	.word	0x08004002
 800397c:	00000000 	.word	0x00000000
 8003980:	080036e1 	.word	0x080036e1

08003984 <_printf_common>:
 8003984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003988:	4691      	mov	r9, r2
 800398a:	461f      	mov	r7, r3
 800398c:	688a      	ldr	r2, [r1, #8]
 800398e:	690b      	ldr	r3, [r1, #16]
 8003990:	4606      	mov	r6, r0
 8003992:	4293      	cmp	r3, r2
 8003994:	bfb8      	it	lt
 8003996:	4613      	movlt	r3, r2
 8003998:	f8c9 3000 	str.w	r3, [r9]
 800399c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a0:	460c      	mov	r4, r1
 80039a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039a6:	b112      	cbz	r2, 80039ae <_printf_common+0x2a>
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8c9 3000 	str.w	r3, [r9]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	0699      	lsls	r1, r3, #26
 80039b2:	bf42      	ittt	mi
 80039b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039b8:	3302      	addmi	r3, #2
 80039ba:	f8c9 3000 	strmi.w	r3, [r9]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	f015 0506 	ands.w	r5, r5, #6
 80039c4:	d107      	bne.n	80039d6 <_printf_common+0x52>
 80039c6:	f104 0a19 	add.w	sl, r4, #25
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	f8d9 2000 	ldr.w	r2, [r9]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	42ab      	cmp	r3, r5
 80039d4:	dc29      	bgt.n	8003a2a <_printf_common+0xa6>
 80039d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	3300      	adds	r3, #0
 80039de:	bf18      	it	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	0692      	lsls	r2, r2, #26
 80039e4:	d42e      	bmi.n	8003a44 <_printf_common+0xc0>
 80039e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ea:	4639      	mov	r1, r7
 80039ec:	4630      	mov	r0, r6
 80039ee:	47c0      	blx	r8
 80039f0:	3001      	adds	r0, #1
 80039f2:	d021      	beq.n	8003a38 <_printf_common+0xb4>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	68e5      	ldr	r5, [r4, #12]
 80039f8:	f003 0306 	and.w	r3, r3, #6
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	bf18      	it	ne
 8003a00:	2500      	movne	r5, #0
 8003a02:	f8d9 2000 	ldr.w	r2, [r9]
 8003a06:	f04f 0900 	mov.w	r9, #0
 8003a0a:	bf08      	it	eq
 8003a0c:	1aad      	subeq	r5, r5, r2
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	6922      	ldr	r2, [r4, #16]
 8003a12:	bf08      	it	eq
 8003a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bfc4      	itt	gt
 8003a1c:	1a9b      	subgt	r3, r3, r2
 8003a1e:	18ed      	addgt	r5, r5, r3
 8003a20:	341a      	adds	r4, #26
 8003a22:	454d      	cmp	r5, r9
 8003a24:	d11a      	bne.n	8003a5c <_printf_common+0xd8>
 8003a26:	2000      	movs	r0, #0
 8003a28:	e008      	b.n	8003a3c <_printf_common+0xb8>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4652      	mov	r2, sl
 8003a2e:	4639      	mov	r1, r7
 8003a30:	4630      	mov	r0, r6
 8003a32:	47c0      	blx	r8
 8003a34:	3001      	adds	r0, #1
 8003a36:	d103      	bne.n	8003a40 <_printf_common+0xbc>
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7c2      	b.n	80039ca <_printf_common+0x46>
 8003a44:	2030      	movs	r0, #48	; 0x30
 8003a46:	18e1      	adds	r1, r4, r3
 8003a48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a52:	4422      	add	r2, r4
 8003a54:	3302      	adds	r3, #2
 8003a56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a5a:	e7c4      	b.n	80039e6 <_printf_common+0x62>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	4622      	mov	r2, r4
 8003a60:	4639      	mov	r1, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	47c0      	blx	r8
 8003a66:	3001      	adds	r0, #1
 8003a68:	d0e6      	beq.n	8003a38 <_printf_common+0xb4>
 8003a6a:	f109 0901 	add.w	r9, r9, #1
 8003a6e:	e7d8      	b.n	8003a22 <_printf_common+0x9e>

08003a70 <_printf_i>:
 8003a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a78:	460c      	mov	r4, r1
 8003a7a:	7e09      	ldrb	r1, [r1, #24]
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	296e      	cmp	r1, #110	; 0x6e
 8003a80:	4617      	mov	r7, r2
 8003a82:	4606      	mov	r6, r0
 8003a84:	4698      	mov	r8, r3
 8003a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a88:	f000 80b3 	beq.w	8003bf2 <_printf_i+0x182>
 8003a8c:	d822      	bhi.n	8003ad4 <_printf_i+0x64>
 8003a8e:	2963      	cmp	r1, #99	; 0x63
 8003a90:	d036      	beq.n	8003b00 <_printf_i+0x90>
 8003a92:	d80a      	bhi.n	8003aaa <_printf_i+0x3a>
 8003a94:	2900      	cmp	r1, #0
 8003a96:	f000 80b9 	beq.w	8003c0c <_printf_i+0x19c>
 8003a9a:	2958      	cmp	r1, #88	; 0x58
 8003a9c:	f000 8083 	beq.w	8003ba6 <_printf_i+0x136>
 8003aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003aa8:	e032      	b.n	8003b10 <_printf_i+0xa0>
 8003aaa:	2964      	cmp	r1, #100	; 0x64
 8003aac:	d001      	beq.n	8003ab2 <_printf_i+0x42>
 8003aae:	2969      	cmp	r1, #105	; 0x69
 8003ab0:	d1f6      	bne.n	8003aa0 <_printf_i+0x30>
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	0605      	lsls	r5, r0, #24
 8003ab8:	f103 0104 	add.w	r1, r3, #4
 8003abc:	d52a      	bpl.n	8003b14 <_printf_i+0xa4>
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da03      	bge.n	8003ace <_printf_i+0x5e>
 8003ac6:	222d      	movs	r2, #45	; 0x2d
 8003ac8:	425b      	negs	r3, r3
 8003aca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ace:	486f      	ldr	r0, [pc, #444]	; (8003c8c <_printf_i+0x21c>)
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	e039      	b.n	8003b48 <_printf_i+0xd8>
 8003ad4:	2973      	cmp	r1, #115	; 0x73
 8003ad6:	f000 809d 	beq.w	8003c14 <_printf_i+0x1a4>
 8003ada:	d808      	bhi.n	8003aee <_printf_i+0x7e>
 8003adc:	296f      	cmp	r1, #111	; 0x6f
 8003ade:	d020      	beq.n	8003b22 <_printf_i+0xb2>
 8003ae0:	2970      	cmp	r1, #112	; 0x70
 8003ae2:	d1dd      	bne.n	8003aa0 <_printf_i+0x30>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	e003      	b.n	8003af6 <_printf_i+0x86>
 8003aee:	2975      	cmp	r1, #117	; 0x75
 8003af0:	d017      	beq.n	8003b22 <_printf_i+0xb2>
 8003af2:	2978      	cmp	r1, #120	; 0x78
 8003af4:	d1d4      	bne.n	8003aa0 <_printf_i+0x30>
 8003af6:	2378      	movs	r3, #120	; 0x78
 8003af8:	4865      	ldr	r0, [pc, #404]	; (8003c90 <_printf_i+0x220>)
 8003afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003afe:	e055      	b.n	8003bac <_printf_i+0x13c>
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b06:	1d19      	adds	r1, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6011      	str	r1, [r2, #0]
 8003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b10:	2301      	movs	r3, #1
 8003b12:	e08c      	b.n	8003c2e <_printf_i+0x1be>
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b1a:	6011      	str	r1, [r2, #0]
 8003b1c:	bf18      	it	ne
 8003b1e:	b21b      	sxthne	r3, r3
 8003b20:	e7cf      	b.n	8003ac2 <_printf_i+0x52>
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	6825      	ldr	r5, [r4, #0]
 8003b26:	1d18      	adds	r0, r3, #4
 8003b28:	6010      	str	r0, [r2, #0]
 8003b2a:	0628      	lsls	r0, r5, #24
 8003b2c:	d501      	bpl.n	8003b32 <_printf_i+0xc2>
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <_printf_i+0xc8>
 8003b32:	0668      	lsls	r0, r5, #25
 8003b34:	d5fb      	bpl.n	8003b2e <_printf_i+0xbe>
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	296f      	cmp	r1, #111	; 0x6f
 8003b3a:	bf14      	ite	ne
 8003b3c:	220a      	movne	r2, #10
 8003b3e:	2208      	moveq	r2, #8
 8003b40:	4852      	ldr	r0, [pc, #328]	; (8003c8c <_printf_i+0x21c>)
 8003b42:	2100      	movs	r1, #0
 8003b44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b48:	6865      	ldr	r5, [r4, #4]
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	60a5      	str	r5, [r4, #8]
 8003b4e:	f2c0 8095 	blt.w	8003c7c <_printf_i+0x20c>
 8003b52:	6821      	ldr	r1, [r4, #0]
 8003b54:	f021 0104 	bic.w	r1, r1, #4
 8003b58:	6021      	str	r1, [r4, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d13d      	bne.n	8003bda <_printf_i+0x16a>
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	f040 808e 	bne.w	8003c80 <_printf_i+0x210>
 8003b64:	4665      	mov	r5, ip
 8003b66:	2a08      	cmp	r2, #8
 8003b68:	d10b      	bne.n	8003b82 <_printf_i+0x112>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	07db      	lsls	r3, r3, #31
 8003b6e:	d508      	bpl.n	8003b82 <_printf_i+0x112>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bfde      	ittt	le
 8003b78:	2330      	movle	r3, #48	; 0x30
 8003b7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b82:	ebac 0305 	sub.w	r3, ip, r5
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	f8cd 8000 	str.w	r8, [sp]
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	aa03      	add	r2, sp, #12
 8003b90:	4621      	mov	r1, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7ff fef6 	bl	8003984 <_printf_common>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d14d      	bne.n	8003c38 <_printf_i+0x1c8>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	b005      	add	sp, #20
 8003ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	4839      	ldr	r0, [pc, #228]	; (8003c8c <_printf_i+0x21c>)
 8003ba8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	1d1d      	adds	r5, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6015      	str	r5, [r2, #0]
 8003bb6:	060a      	lsls	r2, r1, #24
 8003bb8:	d50b      	bpl.n	8003bd2 <_printf_i+0x162>
 8003bba:	07ca      	lsls	r2, r1, #31
 8003bbc:	bf44      	itt	mi
 8003bbe:	f041 0120 	orrmi.w	r1, r1, #32
 8003bc2:	6021      	strmi	r1, [r4, #0]
 8003bc4:	b91b      	cbnz	r3, 8003bce <_printf_i+0x15e>
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	f022 0220 	bic.w	r2, r2, #32
 8003bcc:	6022      	str	r2, [r4, #0]
 8003bce:	2210      	movs	r2, #16
 8003bd0:	e7b7      	b.n	8003b42 <_printf_i+0xd2>
 8003bd2:	064d      	lsls	r5, r1, #25
 8003bd4:	bf48      	it	mi
 8003bd6:	b29b      	uxthmi	r3, r3
 8003bd8:	e7ef      	b.n	8003bba <_printf_i+0x14a>
 8003bda:	4665      	mov	r5, ip
 8003bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003be0:	fb02 3311 	mls	r3, r2, r1, r3
 8003be4:	5cc3      	ldrb	r3, [r0, r3]
 8003be6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bea:	460b      	mov	r3, r1
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d1f5      	bne.n	8003bdc <_printf_i+0x16c>
 8003bf0:	e7b9      	b.n	8003b66 <_printf_i+0xf6>
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	6825      	ldr	r5, [r4, #0]
 8003bf6:	1d18      	adds	r0, r3, #4
 8003bf8:	6961      	ldr	r1, [r4, #20]
 8003bfa:	6010      	str	r0, [r2, #0]
 8003bfc:	0628      	lsls	r0, r5, #24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	d501      	bpl.n	8003c06 <_printf_i+0x196>
 8003c02:	6019      	str	r1, [r3, #0]
 8003c04:	e002      	b.n	8003c0c <_printf_i+0x19c>
 8003c06:	066a      	lsls	r2, r5, #25
 8003c08:	d5fb      	bpl.n	8003c02 <_printf_i+0x192>
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4665      	mov	r5, ip
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	e7b9      	b.n	8003b88 <_printf_i+0x118>
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	1d19      	adds	r1, r3, #4
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	681d      	ldr	r5, [r3, #0]
 8003c1c:	6862      	ldr	r2, [r4, #4]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f837 	bl	8003c94 <memchr>
 8003c26:	b108      	cbz	r0, 8003c2c <_printf_i+0x1bc>
 8003c28:	1b40      	subs	r0, r0, r5
 8003c2a:	6060      	str	r0, [r4, #4]
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c36:	e7a7      	b.n	8003b88 <_printf_i+0x118>
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	462a      	mov	r2, r5
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	4630      	mov	r0, r6
 8003c40:	47c0      	blx	r8
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0aa      	beq.n	8003b9c <_printf_i+0x12c>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	079b      	lsls	r3, r3, #30
 8003c4a:	d413      	bmi.n	8003c74 <_printf_i+0x204>
 8003c4c:	68e0      	ldr	r0, [r4, #12]
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	4298      	cmp	r0, r3
 8003c52:	bfb8      	it	lt
 8003c54:	4618      	movlt	r0, r3
 8003c56:	e7a3      	b.n	8003ba0 <_printf_i+0x130>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	464a      	mov	r2, r9
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4630      	mov	r0, r6
 8003c60:	47c0      	blx	r8
 8003c62:	3001      	adds	r0, #1
 8003c64:	d09a      	beq.n	8003b9c <_printf_i+0x12c>
 8003c66:	3501      	adds	r5, #1
 8003c68:	68e3      	ldr	r3, [r4, #12]
 8003c6a:	9a03      	ldr	r2, [sp, #12]
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	42ab      	cmp	r3, r5
 8003c70:	dcf2      	bgt.n	8003c58 <_printf_i+0x1e8>
 8003c72:	e7eb      	b.n	8003c4c <_printf_i+0x1dc>
 8003c74:	2500      	movs	r5, #0
 8003c76:	f104 0919 	add.w	r9, r4, #25
 8003c7a:	e7f5      	b.n	8003c68 <_printf_i+0x1f8>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ac      	bne.n	8003bda <_printf_i+0x16a>
 8003c80:	7803      	ldrb	r3, [r0, #0]
 8003c82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c8a:	e76c      	b.n	8003b66 <_printf_i+0xf6>
 8003c8c:	08004009 	.word	0x08004009
 8003c90:	0800401a 	.word	0x0800401a

08003c94 <memchr>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	b2c9      	uxtb	r1, r1
 8003c98:	4402      	add	r2, r0
 8003c9a:	4290      	cmp	r0, r2
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	d101      	bne.n	8003ca4 <memchr+0x10>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e003      	b.n	8003cac <memchr+0x18>
 8003ca4:	781c      	ldrb	r4, [r3, #0]
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	428c      	cmp	r4, r1
 8003caa:	d1f6      	bne.n	8003c9a <memchr+0x6>
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd10      	pop	{r4, pc}

08003cb0 <memcpy>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	1e43      	subs	r3, r0, #1
 8003cb4:	440a      	add	r2, r1
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	d100      	bne.n	8003cbc <memcpy+0xc>
 8003cba:	bd10      	pop	{r4, pc}
 8003cbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cc4:	e7f7      	b.n	8003cb6 <memcpy+0x6>

08003cc6 <memmove>:
 8003cc6:	4288      	cmp	r0, r1
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	eb01 0302 	add.w	r3, r1, r2
 8003cce:	d807      	bhi.n	8003ce0 <memmove+0x1a>
 8003cd0:	1e42      	subs	r2, r0, #1
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	d00a      	beq.n	8003cec <memmove+0x26>
 8003cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cda:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003cde:	e7f8      	b.n	8003cd2 <memmove+0xc>
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	d9f5      	bls.n	8003cd0 <memmove+0xa>
 8003ce4:	1881      	adds	r1, r0, r2
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	42d3      	cmn	r3, r2
 8003cea:	d100      	bne.n	8003cee <memmove+0x28>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cf2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003cf6:	e7f7      	b.n	8003ce8 <memmove+0x22>

08003cf8 <_free_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	d043      	beq.n	8003d88 <_free_r+0x90>
 8003d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d04:	1f0c      	subs	r4, r1, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bfb8      	it	lt
 8003d0a:	18e4      	addlt	r4, r4, r3
 8003d0c:	f000 f8d0 	bl	8003eb0 <__malloc_lock>
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <_free_r+0x94>)
 8003d12:	6813      	ldr	r3, [r2, #0]
 8003d14:	4610      	mov	r0, r2
 8003d16:	b933      	cbnz	r3, 8003d26 <_free_r+0x2e>
 8003d18:	6063      	str	r3, [r4, #4]
 8003d1a:	6014      	str	r4, [r2, #0]
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d22:	f000 b8c6 	b.w	8003eb2 <__malloc_unlock>
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	d90b      	bls.n	8003d42 <_free_r+0x4a>
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	1862      	adds	r2, r4, r1
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bf01      	itttt	eq
 8003d32:	681a      	ldreq	r2, [r3, #0]
 8003d34:	685b      	ldreq	r3, [r3, #4]
 8003d36:	1852      	addeq	r2, r2, r1
 8003d38:	6022      	streq	r2, [r4, #0]
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	6004      	str	r4, [r0, #0]
 8003d3e:	e7ed      	b.n	8003d1c <_free_r+0x24>
 8003d40:	4613      	mov	r3, r2
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	b10a      	cbz	r2, 8003d4a <_free_r+0x52>
 8003d46:	42a2      	cmp	r2, r4
 8003d48:	d9fa      	bls.n	8003d40 <_free_r+0x48>
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	1858      	adds	r0, r3, r1
 8003d4e:	42a0      	cmp	r0, r4
 8003d50:	d10b      	bne.n	8003d6a <_free_r+0x72>
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	4401      	add	r1, r0
 8003d56:	1858      	adds	r0, r3, r1
 8003d58:	4282      	cmp	r2, r0
 8003d5a:	6019      	str	r1, [r3, #0]
 8003d5c:	d1de      	bne.n	8003d1c <_free_r+0x24>
 8003d5e:	6810      	ldr	r0, [r2, #0]
 8003d60:	6852      	ldr	r2, [r2, #4]
 8003d62:	4401      	add	r1, r0
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	e7d8      	b.n	8003d1c <_free_r+0x24>
 8003d6a:	d902      	bls.n	8003d72 <_free_r+0x7a>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	e7d4      	b.n	8003d1c <_free_r+0x24>
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	1821      	adds	r1, r4, r0
 8003d76:	428a      	cmp	r2, r1
 8003d78:	bf01      	itttt	eq
 8003d7a:	6811      	ldreq	r1, [r2, #0]
 8003d7c:	6852      	ldreq	r2, [r2, #4]
 8003d7e:	1809      	addeq	r1, r1, r0
 8003d80:	6021      	streq	r1, [r4, #0]
 8003d82:	6062      	str	r2, [r4, #4]
 8003d84:	605c      	str	r4, [r3, #4]
 8003d86:	e7c9      	b.n	8003d1c <_free_r+0x24>
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000098 	.word	0x20000098

08003d90 <_malloc_r>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	1ccd      	adds	r5, r1, #3
 8003d94:	f025 0503 	bic.w	r5, r5, #3
 8003d98:	3508      	adds	r5, #8
 8003d9a:	2d0c      	cmp	r5, #12
 8003d9c:	bf38      	it	cc
 8003d9e:	250c      	movcc	r5, #12
 8003da0:	2d00      	cmp	r5, #0
 8003da2:	4606      	mov	r6, r0
 8003da4:	db01      	blt.n	8003daa <_malloc_r+0x1a>
 8003da6:	42a9      	cmp	r1, r5
 8003da8:	d903      	bls.n	8003db2 <_malloc_r+0x22>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	2000      	movs	r0, #0
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	f000 f87d 	bl	8003eb0 <__malloc_lock>
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <_malloc_r+0xac>)
 8003db8:	6814      	ldr	r4, [r2, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	b991      	cbnz	r1, 8003de4 <_malloc_r+0x54>
 8003dbe:	4c20      	ldr	r4, [pc, #128]	; (8003e40 <_malloc_r+0xb0>)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	b91b      	cbnz	r3, 8003dcc <_malloc_r+0x3c>
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 f863 	bl	8003e90 <_sbrk_r>
 8003dca:	6020      	str	r0, [r4, #0]
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 f85e 	bl	8003e90 <_sbrk_r>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d124      	bne.n	8003e22 <_malloc_r+0x92>
 8003dd8:	230c      	movs	r3, #12
 8003dda:	4630      	mov	r0, r6
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	f000 f868 	bl	8003eb2 <__malloc_unlock>
 8003de2:	e7e4      	b.n	8003dae <_malloc_r+0x1e>
 8003de4:	680b      	ldr	r3, [r1, #0]
 8003de6:	1b5b      	subs	r3, r3, r5
 8003de8:	d418      	bmi.n	8003e1c <_malloc_r+0x8c>
 8003dea:	2b0b      	cmp	r3, #11
 8003dec:	d90f      	bls.n	8003e0e <_malloc_r+0x7e>
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	18cc      	adds	r4, r1, r3
 8003df2:	50cd      	str	r5, [r1, r3]
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 f85c 	bl	8003eb2 <__malloc_unlock>
 8003dfa:	f104 000b 	add.w	r0, r4, #11
 8003dfe:	1d23      	adds	r3, r4, #4
 8003e00:	f020 0007 	bic.w	r0, r0, #7
 8003e04:	1ac3      	subs	r3, r0, r3
 8003e06:	d0d3      	beq.n	8003db0 <_malloc_r+0x20>
 8003e08:	425a      	negs	r2, r3
 8003e0a:	50e2      	str	r2, [r4, r3]
 8003e0c:	e7d0      	b.n	8003db0 <_malloc_r+0x20>
 8003e0e:	684b      	ldr	r3, [r1, #4]
 8003e10:	428c      	cmp	r4, r1
 8003e12:	bf16      	itet	ne
 8003e14:	6063      	strne	r3, [r4, #4]
 8003e16:	6013      	streq	r3, [r2, #0]
 8003e18:	460c      	movne	r4, r1
 8003e1a:	e7eb      	b.n	8003df4 <_malloc_r+0x64>
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	6849      	ldr	r1, [r1, #4]
 8003e20:	e7cc      	b.n	8003dbc <_malloc_r+0x2c>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d005      	beq.n	8003e38 <_malloc_r+0xa8>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 f82e 	bl	8003e90 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d0cf      	beq.n	8003dd8 <_malloc_r+0x48>
 8003e38:	6025      	str	r5, [r4, #0]
 8003e3a:	e7db      	b.n	8003df4 <_malloc_r+0x64>
 8003e3c:	20000098 	.word	0x20000098
 8003e40:	2000009c 	.word	0x2000009c

08003e44 <_realloc_r>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	4607      	mov	r7, r0
 8003e48:	4614      	mov	r4, r2
 8003e4a:	460e      	mov	r6, r1
 8003e4c:	b921      	cbnz	r1, 8003e58 <_realloc_r+0x14>
 8003e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e52:	4611      	mov	r1, r2
 8003e54:	f7ff bf9c 	b.w	8003d90 <_malloc_r>
 8003e58:	b922      	cbnz	r2, 8003e64 <_realloc_r+0x20>
 8003e5a:	f7ff ff4d 	bl	8003cf8 <_free_r>
 8003e5e:	4625      	mov	r5, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e64:	f000 f826 	bl	8003eb4 <_malloc_usable_size_r>
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d20f      	bcs.n	8003e8c <_realloc_r+0x48>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4638      	mov	r0, r7
 8003e70:	f7ff ff8e 	bl	8003d90 <_malloc_r>
 8003e74:	4605      	mov	r5, r0
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d0f2      	beq.n	8003e60 <_realloc_r+0x1c>
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	f7ff ff17 	bl	8003cb0 <memcpy>
 8003e82:	4631      	mov	r1, r6
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff ff37 	bl	8003cf8 <_free_r>
 8003e8a:	e7e9      	b.n	8003e60 <_realloc_r+0x1c>
 8003e8c:	4635      	mov	r5, r6
 8003e8e:	e7e7      	b.n	8003e60 <_realloc_r+0x1c>

08003e90 <_sbrk_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	2300      	movs	r3, #0
 8003e94:	4c05      	ldr	r4, [pc, #20]	; (8003eac <_sbrk_r+0x1c>)
 8003e96:	4605      	mov	r5, r0
 8003e98:	4608      	mov	r0, r1
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	f7ff fb48 	bl	8003530 <_sbrk>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_sbrk_r+0x1a>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_sbrk_r+0x1a>
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	20000164 	.word	0x20000164

08003eb0 <__malloc_lock>:
 8003eb0:	4770      	bx	lr

08003eb2 <__malloc_unlock>:
 8003eb2:	4770      	bx	lr

08003eb4 <_malloc_usable_size_r>:
 8003eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb8:	1f18      	subs	r0, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfbc      	itt	lt
 8003ebe:	580b      	ldrlt	r3, [r1, r0]
 8003ec0:	18c0      	addlt	r0, r0, r3
 8003ec2:	4770      	bx	lr

08003ec4 <round>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003eca:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8003ece:	2c13      	cmp	r4, #19
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	468c      	mov	ip, r1
 8003ed8:	4602      	mov	r2, r0
 8003eda:	dc17      	bgt.n	8003f0c <round+0x48>
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	da09      	bge.n	8003ef4 <round+0x30>
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003ee6:	d103      	bne.n	8003ef0 <round+0x2c>
 8003ee8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003eec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	e028      	b.n	8003f46 <round+0x82>
 8003ef4:	4915      	ldr	r1, [pc, #84]	; (8003f4c <round+0x88>)
 8003ef6:	4121      	asrs	r1, r4
 8003ef8:	420d      	tst	r5, r1
 8003efa:	d100      	bne.n	8003efe <round+0x3a>
 8003efc:	b178      	cbz	r0, 8003f1e <round+0x5a>
 8003efe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f02:	4123      	asrs	r3, r4
 8003f04:	4463      	add	r3, ip
 8003f06:	ea23 0301 	bic.w	r3, r3, r1
 8003f0a:	e7f1      	b.n	8003ef0 <round+0x2c>
 8003f0c:	2c33      	cmp	r4, #51	; 0x33
 8003f0e:	dd09      	ble.n	8003f24 <round+0x60>
 8003f10:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003f14:	d103      	bne.n	8003f1e <round+0x5a>
 8003f16:	f7fc f927 	bl	8000168 <__adddf3>
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	460d      	mov	r5, r1
 8003f1e:	4630      	mov	r0, r6
 8003f20:	4629      	mov	r1, r5
 8003f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003f2c:	40f8      	lsrs	r0, r7
 8003f2e:	4206      	tst	r6, r0
 8003f30:	d0f5      	beq.n	8003f1e <round+0x5a>
 8003f32:	2101      	movs	r1, #1
 8003f34:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003f38:	fa01 f404 	lsl.w	r4, r1, r4
 8003f3c:	1932      	adds	r2, r6, r4
 8003f3e:	bf28      	it	cs
 8003f40:	185b      	addcs	r3, r3, r1
 8003f42:	ea22 0200 	bic.w	r2, r2, r0
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	e7e6      	b.n	8003f1a <round+0x56>
 8003f4c:	000fffff 	.word	0x000fffff

08003f50 <roundf>:
 8003f50:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003f54:	3b7f      	subs	r3, #127	; 0x7f
 8003f56:	2b16      	cmp	r3, #22
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	dc14      	bgt.n	8003f88 <roundf+0x38>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da07      	bge.n	8003f72 <roundf+0x22>
 8003f62:	3301      	adds	r3, #1
 8003f64:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8003f68:	d101      	bne.n	8003f6e <roundf+0x1e>
 8003f6a:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8003f6e:	4608      	mov	r0, r1
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <roundf+0x44>)
 8003f74:	411a      	asrs	r2, r3
 8003f76:	4210      	tst	r0, r2
 8003f78:	d0f9      	beq.n	8003f6e <roundf+0x1e>
 8003f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7e:	4119      	asrs	r1, r3
 8003f80:	4401      	add	r1, r0
 8003f82:	ea21 0102 	bic.w	r1, r1, r2
 8003f86:	e7f2      	b.n	8003f6e <roundf+0x1e>
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d1f0      	bne.n	8003f6e <roundf+0x1e>
 8003f8c:	f7fc fad0 	bl	8000530 <__addsf3>
 8003f90:	4601      	mov	r1, r0
 8003f92:	e7ec      	b.n	8003f6e <roundf+0x1e>
 8003f94:	007fffff 	.word	0x007fffff

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
